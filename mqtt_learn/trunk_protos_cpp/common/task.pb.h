// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "./enums.pb.h"
#include "./header.pb.h"
#include "./container.pb.h"
#include "./point.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftask_2eproto;
namespace common {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::Task* Arena::CreateMaybeMessage<::common::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ftask_2eproto);
    return ::descriptor_table_common_2ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 8,
    kTraceIdFieldNumber = 3,
    kTaskIdFieldNumber = 5,
    kPlanDestinationFieldNumber = 12,
    kActualDestinationFieldNumber = 13,
    kTargetFieldNumber = 20,
    kSubTargetFieldNumber = 21,
    kProblemCodeFieldNumber = 25,
    kProblemDescriptionFieldNumber = 26,
    kUpVpbFieldNumber = 29,
    kDownVpbFieldNumber = 30,
    kCraneIdFieldNumber = 32,
    kTosIdFieldNumber = 35,
    kHeaderFieldNumber = 1,
    kUpdatedFieldNumber = 2,
    kLocPointFieldNumber = 14,
    kDestPointFieldNumber = 15,
    kOrderVersionFieldNumber = 4,
    kTaskVersionFieldNumber = 6,
    kStatusFieldNumber = 7,
    kActOrderTypeFieldNumber = 9,
    kActBusinessTypeFieldNumber = 10,
    kDestTypeFieldNumber = 11,
    kTaskTypeFieldNumber = 16,
    kTaskModeFieldNumber = 17,
    kGuideTypeFieldNumber = 19,
    kActiveCpsTypeFieldNumber = 23,
    kBypassSequenceFieldNumber = 24,
    kGuideStopFieldNumber = 18,
    kActiveCpsFieldNumber = 22,
    kGuideCpsFieldNumber = 31,
    kHasNaviFieldNumber = 33,
    kRouteDirectionFieldNumber = 27,
    kNeedManualFieldNumber = 34,
    kWaitPointFieldNumber = 36,
    kTwinFlagFieldNumber = 37,
  };
  // repeated .common.Container containers = 8;
  int containers_size() const;
  void clear_containers();
  ::common::Container* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >*
      mutable_containers();
  const ::common::Container& containers(int index) const;
  ::common::Container* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >&
      containers() const;

  // string trace_id = 3;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);

  // string task_id = 5;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // string plan_destination = 12;
  void clear_plan_destination();
  const std::string& plan_destination() const;
  void set_plan_destination(const std::string& value);
  void set_plan_destination(std::string&& value);
  void set_plan_destination(const char* value);
  void set_plan_destination(const char* value, size_t size);
  std::string* mutable_plan_destination();
  std::string* release_plan_destination();
  void set_allocated_plan_destination(std::string* plan_destination);

  // string actual_destination = 13;
  void clear_actual_destination();
  const std::string& actual_destination() const;
  void set_actual_destination(const std::string& value);
  void set_actual_destination(std::string&& value);
  void set_actual_destination(const char* value);
  void set_actual_destination(const char* value, size_t size);
  std::string* mutable_actual_destination();
  std::string* release_actual_destination();
  void set_allocated_actual_destination(std::string* actual_destination);

  // string target = 20;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // string sub_target = 21;
  void clear_sub_target();
  const std::string& sub_target() const;
  void set_sub_target(const std::string& value);
  void set_sub_target(std::string&& value);
  void set_sub_target(const char* value);
  void set_sub_target(const char* value, size_t size);
  std::string* mutable_sub_target();
  std::string* release_sub_target();
  void set_allocated_sub_target(std::string* sub_target);

  // string problem_code = 25;
  void clear_problem_code();
  const std::string& problem_code() const;
  void set_problem_code(const std::string& value);
  void set_problem_code(std::string&& value);
  void set_problem_code(const char* value);
  void set_problem_code(const char* value, size_t size);
  std::string* mutable_problem_code();
  std::string* release_problem_code();
  void set_allocated_problem_code(std::string* problem_code);

  // string problem_description = 26;
  void clear_problem_description();
  const std::string& problem_description() const;
  void set_problem_description(const std::string& value);
  void set_problem_description(std::string&& value);
  void set_problem_description(const char* value);
  void set_problem_description(const char* value, size_t size);
  std::string* mutable_problem_description();
  std::string* release_problem_description();
  void set_allocated_problem_description(std::string* problem_description);

  // string up_vpb = 29;
  void clear_up_vpb();
  const std::string& up_vpb() const;
  void set_up_vpb(const std::string& value);
  void set_up_vpb(std::string&& value);
  void set_up_vpb(const char* value);
  void set_up_vpb(const char* value, size_t size);
  std::string* mutable_up_vpb();
  std::string* release_up_vpb();
  void set_allocated_up_vpb(std::string* up_vpb);

  // string down_vpb = 30;
  void clear_down_vpb();
  const std::string& down_vpb() const;
  void set_down_vpb(const std::string& value);
  void set_down_vpb(std::string&& value);
  void set_down_vpb(const char* value);
  void set_down_vpb(const char* value, size_t size);
  std::string* mutable_down_vpb();
  std::string* release_down_vpb();
  void set_allocated_down_vpb(std::string* down_vpb);

  // string crane_id = 32;
  void clear_crane_id();
  const std::string& crane_id() const;
  void set_crane_id(const std::string& value);
  void set_crane_id(std::string&& value);
  void set_crane_id(const char* value);
  void set_crane_id(const char* value, size_t size);
  std::string* mutable_crane_id();
  std::string* release_crane_id();
  void set_allocated_crane_id(std::string* crane_id);

  // string tos_id = 35;
  void clear_tos_id();
  const std::string& tos_id() const;
  void set_tos_id(const std::string& value);
  void set_tos_id(std::string&& value);
  void set_tos_id(const char* value);
  void set_tos_id(const char* value, size_t size);
  std::string* mutable_tos_id();
  std::string* release_tos_id();
  void set_allocated_tos_id(std::string* tos_id);

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // .google.protobuf.Timestamp updated = 2;
  bool has_updated() const;
  void clear_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated);

  // .common.Point loc_point = 14;
  bool has_loc_point() const;
  void clear_loc_point();
  const ::common::Point& loc_point() const;
  ::common::Point* release_loc_point();
  ::common::Point* mutable_loc_point();
  void set_allocated_loc_point(::common::Point* loc_point);

  // .common.Point dest_point = 15;
  bool has_dest_point() const;
  void clear_dest_point();
  const ::common::Point& dest_point() const;
  ::common::Point* release_dest_point();
  ::common::Point* mutable_dest_point();
  void set_allocated_dest_point(::common::Point* dest_point);

  // uint32 order_version = 4;
  void clear_order_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_version() const;
  void set_order_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 task_version = 6;
  void clear_task_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 task_version() const;
  void set_task_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .common.OrderStatus status = 7;
  void clear_status();
  ::common::OrderStatus status() const;
  void set_status(::common::OrderStatus value);

  // .common.OrderType act_order_type = 9;
  void clear_act_order_type();
  ::common::OrderType act_order_type() const;
  void set_act_order_type(::common::OrderType value);

  // .common.BusinessType act_business_type = 10;
  void clear_act_business_type();
  ::common::BusinessType act_business_type() const;
  void set_act_business_type(::common::BusinessType value);

  // .common.DestType dest_type = 11;
  void clear_dest_type();
  ::common::DestType dest_type() const;
  void set_dest_type(::common::DestType value);

  // .common.TaskType task_type = 16;
  void clear_task_type();
  ::common::TaskType task_type() const;
  void set_task_type(::common::TaskType value);

  // .common.TaskMode task_mode = 17;
  void clear_task_mode();
  ::common::TaskMode task_mode() const;
  void set_task_mode(::common::TaskMode value);

  // .common.GuideType guide_type = 19;
  void clear_guide_type();
  ::common::GuideType guide_type() const;
  void set_guide_type(::common::GuideType value);

  // .common.GuideType active_cps_type = 23;
  void clear_active_cps_type();
  ::common::GuideType active_cps_type() const;
  void set_active_cps_type(::common::GuideType value);

  // .common.BypassSequence bypass_sequence = 24;
  void clear_bypass_sequence();
  ::common::BypassSequence bypass_sequence() const;
  void set_bypass_sequence(::common::BypassSequence value);

  // bool guide_stop = 18;
  void clear_guide_stop();
  bool guide_stop() const;
  void set_guide_stop(bool value);

  // bool active_cps = 22;
  void clear_active_cps();
  bool active_cps() const;
  void set_active_cps(bool value);

  // bool guide_cps = 31;
  void clear_guide_cps();
  bool guide_cps() const;
  void set_guide_cps(bool value);

  // bool has_navi = 33;
  void clear_has_navi();
  bool has_navi() const;
  void set_has_navi(bool value);

  // .common.WorkCycleDirection route_direction = 27;
  void clear_route_direction();
  ::common::WorkCycleDirection route_direction() const;
  void set_route_direction(::common::WorkCycleDirection value);

  // bool need_manual = 34;
  void clear_need_manual();
  bool need_manual() const;
  void set_need_manual(bool value);

  // .common.WaitPoint wait_point = 36;
  void clear_wait_point();
  ::common::WaitPoint wait_point() const;
  void set_wait_point(::common::WaitPoint value);

  // .common.TwinFlag twin_flag = 37;
  void clear_twin_flag();
  ::common::TwinFlag twin_flag() const;
  void set_twin_flag(::common::TwinFlag value);

  // @@protoc_insertion_point(class_scope:common.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container > containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr problem_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr problem_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr up_vpb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr down_vpb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crane_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tos_id_;
  ::common::Header* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  ::common::Point* loc_point_;
  ::common::Point* dest_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task_version_;
  int status_;
  int act_order_type_;
  int act_business_type_;
  int dest_type_;
  int task_type_;
  int task_mode_;
  int guide_type_;
  int active_cps_type_;
  int bypass_sequence_;
  bool guide_stop_;
  bool active_cps_;
  bool guide_cps_;
  bool has_navi_;
  int route_direction_;
  bool need_manual_;
  int wait_point_;
  int twin_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// .common.Header header = 1;
inline bool Task::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& Task::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.Task.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* Task::release_header() {
  // @@protoc_insertion_point(field_release:common.Task.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* Task::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Task.header)
  return header_;
}
inline void Task::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.Task.header)
}

// .google.protobuf.Timestamp updated = 2;
inline bool Task::has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Task::updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  // @@protoc_insertion_point(field_get:common.Task.updated)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::release_updated() {
  // @@protoc_insertion_point(field_release:common.Task.updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Task.updated)
  return updated_;
}
inline void Task::set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:common.Task.updated)
}

// string trace_id = 3;
inline void Task::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::trace_id() const {
  // @@protoc_insertion_point(field_get:common.Task.trace_id)
  return trace_id_.GetNoArena();
}
inline void Task::set_trace_id(const std::string& value) {
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.trace_id)
}
inline void Task::set_trace_id(std::string&& value) {
  
  trace_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.trace_id)
}
inline void Task::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.trace_id)
}
inline void Task::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.trace_id)
}
inline std::string* Task::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.trace_id)
  return trace_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_trace_id() {
  // @@protoc_insertion_point(field_release:common.Task.trace_id)
  
  return trace_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:common.Task.trace_id)
}

// uint32 order_version = 4;
inline void Task::clear_order_version() {
  order_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::order_version() const {
  // @@protoc_insertion_point(field_get:common.Task.order_version)
  return order_version_;
}
inline void Task::set_order_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_version_ = value;
  // @@protoc_insertion_point(field_set:common.Task.order_version)
}

// string task_id = 5;
inline void Task::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::task_id() const {
  // @@protoc_insertion_point(field_get:common.Task.task_id)
  return task_id_.GetNoArena();
}
inline void Task::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.task_id)
}
inline void Task::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.task_id)
}
inline void Task::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.task_id)
}
inline void Task::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.task_id)
}
inline std::string* Task::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_task_id() {
  // @@protoc_insertion_point(field_release:common.Task.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:common.Task.task_id)
}

// uint32 task_version = 6;
inline void Task::clear_task_version() {
  task_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::task_version() const {
  // @@protoc_insertion_point(field_get:common.Task.task_version)
  return task_version_;
}
inline void Task::set_task_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  task_version_ = value;
  // @@protoc_insertion_point(field_set:common.Task.task_version)
}

// .common.OrderStatus status = 7;
inline void Task::clear_status() {
  status_ = 0;
}
inline ::common::OrderStatus Task::status() const {
  // @@protoc_insertion_point(field_get:common.Task.status)
  return static_cast< ::common::OrderStatus >(status_);
}
inline void Task::set_status(::common::OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:common.Task.status)
}

// repeated .common.Container containers = 8;
inline int Task::containers_size() const {
  return containers_.size();
}
inline ::common::Container* Task::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:common.Task.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >*
Task::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:common.Task.containers)
  return &containers_;
}
inline const ::common::Container& Task::containers(int index) const {
  // @@protoc_insertion_point(field_get:common.Task.containers)
  return containers_.Get(index);
}
inline ::common::Container* Task::add_containers() {
  // @@protoc_insertion_point(field_add:common.Task.containers)
  return containers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >&
Task::containers() const {
  // @@protoc_insertion_point(field_list:common.Task.containers)
  return containers_;
}

// .common.OrderType act_order_type = 9;
inline void Task::clear_act_order_type() {
  act_order_type_ = 0;
}
inline ::common::OrderType Task::act_order_type() const {
  // @@protoc_insertion_point(field_get:common.Task.act_order_type)
  return static_cast< ::common::OrderType >(act_order_type_);
}
inline void Task::set_act_order_type(::common::OrderType value) {
  
  act_order_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.act_order_type)
}

// .common.BusinessType act_business_type = 10;
inline void Task::clear_act_business_type() {
  act_business_type_ = 0;
}
inline ::common::BusinessType Task::act_business_type() const {
  // @@protoc_insertion_point(field_get:common.Task.act_business_type)
  return static_cast< ::common::BusinessType >(act_business_type_);
}
inline void Task::set_act_business_type(::common::BusinessType value) {
  
  act_business_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.act_business_type)
}

// .common.DestType dest_type = 11;
inline void Task::clear_dest_type() {
  dest_type_ = 0;
}
inline ::common::DestType Task::dest_type() const {
  // @@protoc_insertion_point(field_get:common.Task.dest_type)
  return static_cast< ::common::DestType >(dest_type_);
}
inline void Task::set_dest_type(::common::DestType value) {
  
  dest_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.dest_type)
}

// string plan_destination = 12;
inline void Task::clear_plan_destination() {
  plan_destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::plan_destination() const {
  // @@protoc_insertion_point(field_get:common.Task.plan_destination)
  return plan_destination_.GetNoArena();
}
inline void Task::set_plan_destination(const std::string& value) {
  
  plan_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.plan_destination)
}
inline void Task::set_plan_destination(std::string&& value) {
  
  plan_destination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.plan_destination)
}
inline void Task::set_plan_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.plan_destination)
}
inline void Task::set_plan_destination(const char* value, size_t size) {
  
  plan_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.plan_destination)
}
inline std::string* Task::mutable_plan_destination() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.plan_destination)
  return plan_destination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_plan_destination() {
  // @@protoc_insertion_point(field_release:common.Task.plan_destination)
  
  return plan_destination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_plan_destination(std::string* plan_destination) {
  if (plan_destination != nullptr) {
    
  } else {
    
  }
  plan_destination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_destination);
  // @@protoc_insertion_point(field_set_allocated:common.Task.plan_destination)
}

// string actual_destination = 13;
inline void Task::clear_actual_destination() {
  actual_destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::actual_destination() const {
  // @@protoc_insertion_point(field_get:common.Task.actual_destination)
  return actual_destination_.GetNoArena();
}
inline void Task::set_actual_destination(const std::string& value) {
  
  actual_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.actual_destination)
}
inline void Task::set_actual_destination(std::string&& value) {
  
  actual_destination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.actual_destination)
}
inline void Task::set_actual_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actual_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.actual_destination)
}
inline void Task::set_actual_destination(const char* value, size_t size) {
  
  actual_destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.actual_destination)
}
inline std::string* Task::mutable_actual_destination() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.actual_destination)
  return actual_destination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_actual_destination() {
  // @@protoc_insertion_point(field_release:common.Task.actual_destination)
  
  return actual_destination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_actual_destination(std::string* actual_destination) {
  if (actual_destination != nullptr) {
    
  } else {
    
  }
  actual_destination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual_destination);
  // @@protoc_insertion_point(field_set_allocated:common.Task.actual_destination)
}

// .common.Point loc_point = 14;
inline bool Task::has_loc_point() const {
  return this != internal_default_instance() && loc_point_ != nullptr;
}
inline const ::common::Point& Task::loc_point() const {
  const ::common::Point* p = loc_point_;
  // @@protoc_insertion_point(field_get:common.Task.loc_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* Task::release_loc_point() {
  // @@protoc_insertion_point(field_release:common.Task.loc_point)
  
  ::common::Point* temp = loc_point_;
  loc_point_ = nullptr;
  return temp;
}
inline ::common::Point* Task::mutable_loc_point() {
  
  if (loc_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    loc_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Task.loc_point)
  return loc_point_;
}
inline void Task::set_allocated_loc_point(::common::Point* loc_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(loc_point_);
  }
  if (loc_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loc_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loc_point, submessage_arena);
    }
    
  } else {
    
  }
  loc_point_ = loc_point;
  // @@protoc_insertion_point(field_set_allocated:common.Task.loc_point)
}

// .common.Point dest_point = 15;
inline bool Task::has_dest_point() const {
  return this != internal_default_instance() && dest_point_ != nullptr;
}
inline const ::common::Point& Task::dest_point() const {
  const ::common::Point* p = dest_point_;
  // @@protoc_insertion_point(field_get:common.Task.dest_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* Task::release_dest_point() {
  // @@protoc_insertion_point(field_release:common.Task.dest_point)
  
  ::common::Point* temp = dest_point_;
  dest_point_ = nullptr;
  return temp;
}
inline ::common::Point* Task::mutable_dest_point() {
  
  if (dest_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    dest_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Task.dest_point)
  return dest_point_;
}
inline void Task::set_allocated_dest_point(::common::Point* dest_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_point_);
  }
  if (dest_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dest_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_point, submessage_arena);
    }
    
  } else {
    
  }
  dest_point_ = dest_point;
  // @@protoc_insertion_point(field_set_allocated:common.Task.dest_point)
}

// .common.TaskType task_type = 16;
inline void Task::clear_task_type() {
  task_type_ = 0;
}
inline ::common::TaskType Task::task_type() const {
  // @@protoc_insertion_point(field_get:common.Task.task_type)
  return static_cast< ::common::TaskType >(task_type_);
}
inline void Task::set_task_type(::common::TaskType value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.task_type)
}

// .common.TaskMode task_mode = 17;
inline void Task::clear_task_mode() {
  task_mode_ = 0;
}
inline ::common::TaskMode Task::task_mode() const {
  // @@protoc_insertion_point(field_get:common.Task.task_mode)
  return static_cast< ::common::TaskMode >(task_mode_);
}
inline void Task::set_task_mode(::common::TaskMode value) {
  
  task_mode_ = value;
  // @@protoc_insertion_point(field_set:common.Task.task_mode)
}

// bool guide_stop = 18;
inline void Task::clear_guide_stop() {
  guide_stop_ = false;
}
inline bool Task::guide_stop() const {
  // @@protoc_insertion_point(field_get:common.Task.guide_stop)
  return guide_stop_;
}
inline void Task::set_guide_stop(bool value) {
  
  guide_stop_ = value;
  // @@protoc_insertion_point(field_set:common.Task.guide_stop)
}

// .common.GuideType guide_type = 19;
inline void Task::clear_guide_type() {
  guide_type_ = 0;
}
inline ::common::GuideType Task::guide_type() const {
  // @@protoc_insertion_point(field_get:common.Task.guide_type)
  return static_cast< ::common::GuideType >(guide_type_);
}
inline void Task::set_guide_type(::common::GuideType value) {
  
  guide_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.guide_type)
}

// string target = 20;
inline void Task::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::target() const {
  // @@protoc_insertion_point(field_get:common.Task.target)
  return target_.GetNoArena();
}
inline void Task::set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.target)
}
inline void Task::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.target)
}
inline void Task::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.target)
}
inline void Task::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.target)
}
inline std::string* Task::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_target() {
  // @@protoc_insertion_point(field_release:common.Task.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:common.Task.target)
}

// string sub_target = 21;
inline void Task::clear_sub_target() {
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::sub_target() const {
  // @@protoc_insertion_point(field_get:common.Task.sub_target)
  return sub_target_.GetNoArena();
}
inline void Task::set_sub_target(const std::string& value) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.sub_target)
}
inline void Task::set_sub_target(std::string&& value) {
  
  sub_target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.sub_target)
}
inline void Task::set_sub_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.sub_target)
}
inline void Task::set_sub_target(const char* value, size_t size) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.sub_target)
}
inline std::string* Task::mutable_sub_target() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.sub_target)
  return sub_target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_sub_target() {
  // @@protoc_insertion_point(field_release:common.Task.sub_target)
  
  return sub_target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_sub_target(std::string* sub_target) {
  if (sub_target != nullptr) {
    
  } else {
    
  }
  sub_target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_target);
  // @@protoc_insertion_point(field_set_allocated:common.Task.sub_target)
}

// bool active_cps = 22;
inline void Task::clear_active_cps() {
  active_cps_ = false;
}
inline bool Task::active_cps() const {
  // @@protoc_insertion_point(field_get:common.Task.active_cps)
  return active_cps_;
}
inline void Task::set_active_cps(bool value) {
  
  active_cps_ = value;
  // @@protoc_insertion_point(field_set:common.Task.active_cps)
}

// .common.GuideType active_cps_type = 23;
inline void Task::clear_active_cps_type() {
  active_cps_type_ = 0;
}
inline ::common::GuideType Task::active_cps_type() const {
  // @@protoc_insertion_point(field_get:common.Task.active_cps_type)
  return static_cast< ::common::GuideType >(active_cps_type_);
}
inline void Task::set_active_cps_type(::common::GuideType value) {
  
  active_cps_type_ = value;
  // @@protoc_insertion_point(field_set:common.Task.active_cps_type)
}

// .common.BypassSequence bypass_sequence = 24;
inline void Task::clear_bypass_sequence() {
  bypass_sequence_ = 0;
}
inline ::common::BypassSequence Task::bypass_sequence() const {
  // @@protoc_insertion_point(field_get:common.Task.bypass_sequence)
  return static_cast< ::common::BypassSequence >(bypass_sequence_);
}
inline void Task::set_bypass_sequence(::common::BypassSequence value) {
  
  bypass_sequence_ = value;
  // @@protoc_insertion_point(field_set:common.Task.bypass_sequence)
}

// string problem_code = 25;
inline void Task::clear_problem_code() {
  problem_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::problem_code() const {
  // @@protoc_insertion_point(field_get:common.Task.problem_code)
  return problem_code_.GetNoArena();
}
inline void Task::set_problem_code(const std::string& value) {
  
  problem_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.problem_code)
}
inline void Task::set_problem_code(std::string&& value) {
  
  problem_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.problem_code)
}
inline void Task::set_problem_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  problem_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.problem_code)
}
inline void Task::set_problem_code(const char* value, size_t size) {
  
  problem_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.problem_code)
}
inline std::string* Task::mutable_problem_code() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.problem_code)
  return problem_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_problem_code() {
  // @@protoc_insertion_point(field_release:common.Task.problem_code)
  
  return problem_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_problem_code(std::string* problem_code) {
  if (problem_code != nullptr) {
    
  } else {
    
  }
  problem_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), problem_code);
  // @@protoc_insertion_point(field_set_allocated:common.Task.problem_code)
}

// string problem_description = 26;
inline void Task::clear_problem_description() {
  problem_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::problem_description() const {
  // @@protoc_insertion_point(field_get:common.Task.problem_description)
  return problem_description_.GetNoArena();
}
inline void Task::set_problem_description(const std::string& value) {
  
  problem_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.problem_description)
}
inline void Task::set_problem_description(std::string&& value) {
  
  problem_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.problem_description)
}
inline void Task::set_problem_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  problem_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.problem_description)
}
inline void Task::set_problem_description(const char* value, size_t size) {
  
  problem_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.problem_description)
}
inline std::string* Task::mutable_problem_description() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.problem_description)
  return problem_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_problem_description() {
  // @@protoc_insertion_point(field_release:common.Task.problem_description)
  
  return problem_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_problem_description(std::string* problem_description) {
  if (problem_description != nullptr) {
    
  } else {
    
  }
  problem_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), problem_description);
  // @@protoc_insertion_point(field_set_allocated:common.Task.problem_description)
}

// .common.WorkCycleDirection route_direction = 27;
inline void Task::clear_route_direction() {
  route_direction_ = 0;
}
inline ::common::WorkCycleDirection Task::route_direction() const {
  // @@protoc_insertion_point(field_get:common.Task.route_direction)
  return static_cast< ::common::WorkCycleDirection >(route_direction_);
}
inline void Task::set_route_direction(::common::WorkCycleDirection value) {
  
  route_direction_ = value;
  // @@protoc_insertion_point(field_set:common.Task.route_direction)
}

// string up_vpb = 29;
inline void Task::clear_up_vpb() {
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::up_vpb() const {
  // @@protoc_insertion_point(field_get:common.Task.up_vpb)
  return up_vpb_.GetNoArena();
}
inline void Task::set_up_vpb(const std::string& value) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.up_vpb)
}
inline void Task::set_up_vpb(std::string&& value) {
  
  up_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.up_vpb)
}
inline void Task::set_up_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.up_vpb)
}
inline void Task::set_up_vpb(const char* value, size_t size) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.up_vpb)
}
inline std::string* Task::mutable_up_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.up_vpb)
  return up_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_up_vpb() {
  // @@protoc_insertion_point(field_release:common.Task.up_vpb)
  
  return up_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_up_vpb(std::string* up_vpb) {
  if (up_vpb != nullptr) {
    
  } else {
    
  }
  up_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), up_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.Task.up_vpb)
}

// string down_vpb = 30;
inline void Task::clear_down_vpb() {
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::down_vpb() const {
  // @@protoc_insertion_point(field_get:common.Task.down_vpb)
  return down_vpb_.GetNoArena();
}
inline void Task::set_down_vpb(const std::string& value) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.down_vpb)
}
inline void Task::set_down_vpb(std::string&& value) {
  
  down_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.down_vpb)
}
inline void Task::set_down_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.down_vpb)
}
inline void Task::set_down_vpb(const char* value, size_t size) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.down_vpb)
}
inline std::string* Task::mutable_down_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.down_vpb)
  return down_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_down_vpb() {
  // @@protoc_insertion_point(field_release:common.Task.down_vpb)
  
  return down_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_down_vpb(std::string* down_vpb) {
  if (down_vpb != nullptr) {
    
  } else {
    
  }
  down_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), down_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.Task.down_vpb)
}

// bool guide_cps = 31;
inline void Task::clear_guide_cps() {
  guide_cps_ = false;
}
inline bool Task::guide_cps() const {
  // @@protoc_insertion_point(field_get:common.Task.guide_cps)
  return guide_cps_;
}
inline void Task::set_guide_cps(bool value) {
  
  guide_cps_ = value;
  // @@protoc_insertion_point(field_set:common.Task.guide_cps)
}

// string crane_id = 32;
inline void Task::clear_crane_id() {
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::crane_id() const {
  // @@protoc_insertion_point(field_get:common.Task.crane_id)
  return crane_id_.GetNoArena();
}
inline void Task::set_crane_id(const std::string& value) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.crane_id)
}
inline void Task::set_crane_id(std::string&& value) {
  
  crane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.crane_id)
}
inline void Task::set_crane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.crane_id)
}
inline void Task::set_crane_id(const char* value, size_t size) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.crane_id)
}
inline std::string* Task::mutable_crane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.crane_id)
  return crane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_crane_id() {
  // @@protoc_insertion_point(field_release:common.Task.crane_id)
  
  return crane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_crane_id(std::string* crane_id) {
  if (crane_id != nullptr) {
    
  } else {
    
  }
  crane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crane_id);
  // @@protoc_insertion_point(field_set_allocated:common.Task.crane_id)
}

// bool has_navi = 33;
inline void Task::clear_has_navi() {
  has_navi_ = false;
}
inline bool Task::has_navi() const {
  // @@protoc_insertion_point(field_get:common.Task.has_navi)
  return has_navi_;
}
inline void Task::set_has_navi(bool value) {
  
  has_navi_ = value;
  // @@protoc_insertion_point(field_set:common.Task.has_navi)
}

// bool need_manual = 34;
inline void Task::clear_need_manual() {
  need_manual_ = false;
}
inline bool Task::need_manual() const {
  // @@protoc_insertion_point(field_get:common.Task.need_manual)
  return need_manual_;
}
inline void Task::set_need_manual(bool value) {
  
  need_manual_ = value;
  // @@protoc_insertion_point(field_set:common.Task.need_manual)
}

// string tos_id = 35;
inline void Task::clear_tos_id() {
  tos_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::tos_id() const {
  // @@protoc_insertion_point(field_get:common.Task.tos_id)
  return tos_id_.GetNoArena();
}
inline void Task::set_tos_id(const std::string& value) {
  
  tos_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Task.tos_id)
}
inline void Task::set_tos_id(std::string&& value) {
  
  tos_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Task.tos_id)
}
inline void Task::set_tos_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tos_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Task.tos_id)
}
inline void Task::set_tos_id(const char* value, size_t size) {
  
  tos_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Task.tos_id)
}
inline std::string* Task::mutable_tos_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Task.tos_id)
  return tos_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_tos_id() {
  // @@protoc_insertion_point(field_release:common.Task.tos_id)
  
  return tos_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_tos_id(std::string* tos_id) {
  if (tos_id != nullptr) {
    
  } else {
    
  }
  tos_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tos_id);
  // @@protoc_insertion_point(field_set_allocated:common.Task.tos_id)
}

// .common.WaitPoint wait_point = 36;
inline void Task::clear_wait_point() {
  wait_point_ = 0;
}
inline ::common::WaitPoint Task::wait_point() const {
  // @@protoc_insertion_point(field_get:common.Task.wait_point)
  return static_cast< ::common::WaitPoint >(wait_point_);
}
inline void Task::set_wait_point(::common::WaitPoint value) {
  
  wait_point_ = value;
  // @@protoc_insertion_point(field_set:common.Task.wait_point)
}

// .common.TwinFlag twin_flag = 37;
inline void Task::clear_twin_flag() {
  twin_flag_ = 0;
}
inline ::common::TwinFlag Task::twin_flag() const {
  // @@protoc_insertion_point(field_get:common.Task.twin_flag)
  return static_cast< ::common::TwinFlag >(twin_flag_);
}
inline void Task::set_twin_flag(::common::TwinFlag value) {
  
  twin_flag_ = value;
  // @@protoc_insertion_point(field_set:common.Task.twin_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ftask_2eproto
