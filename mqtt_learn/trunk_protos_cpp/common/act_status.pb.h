// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/act_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fact_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fact_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "./point.pb.h"
#include "./enums.pb.h"
#include "./header.pb.h"
#include "./fault_info.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fact_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fact_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fact_5fstatus_2eproto;
namespace common {
class ActStatus;
class ActStatusDefaultTypeInternal;
extern ActStatusDefaultTypeInternal _ActStatus_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ActStatus* Arena::CreateMaybeMessage<::common::ActStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class ActStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ActStatus) */ {
 public:
  ActStatus();
  virtual ~ActStatus();

  ActStatus(const ActStatus& from);
  ActStatus(ActStatus&& from) noexcept
    : ActStatus() {
    *this = ::std::move(from);
  }

  inline ActStatus& operator=(const ActStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActStatus& operator=(ActStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActStatus* internal_default_instance() {
    return reinterpret_cast<const ActStatus*>(
               &_ActStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActStatus& a, ActStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActStatus* New() const final {
    return CreateMaybeMessage<ActStatus>(nullptr);
  }

  ActStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActStatus& from);
  void MergeFrom(const ActStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ActStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fact_5fstatus_2eproto);
    return ::descriptor_table_common_2fact_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultsFieldNumber = 30,
    kTraceIdFieldNumber = 6,
    kTaskIdFieldNumber = 7,
    kNaviIdFieldNumber = 8,
    kTargetFieldNumber = 9,
    kSubTargetFieldNumber = 10,
    kLastLocationFieldNumber = 11,
    kLocationFieldNumber = 12,
    kNextLocationFieldNumber = 13,
    kHostFieldNumber = 40,
    kPortFieldNumber = 41,
    kCraneIdFieldNumber = 43,
    kHeaderFieldNumber = 1,
    kCreatedFieldNumber = 2,
    kUpdatedFieldNumber = 3,
    kPointFieldNumber = 15,
    kStateFlowFieldNumber = 4,
    kTaskModeFieldNumber = 5,
    kYawFieldNumber = 16,
    kChassisTotalHourFieldNumber = 18,
    kGearFieldNumber = 19,
    kIsAttendanceTosFieldNumber = 14,
    kEstopFieldNumber = 17,
    kIsChargingFieldNumber = 20,
    kEmptyFieldNumber = 26,
    kMotionModeFieldNumber = 21,
    kDrvDirectionFieldNumber = 22,
    kSpeedFieldNumber = 23,
    kSohFieldNumber = 24,
    kSocFieldNumber = 25,
    kTurnLightFieldNumber = 27,
    kFirmErrorStatusFieldNumber = 28,
    kVehicleErrorStatusFieldNumber = 29,
    kTechnicalStatusFieldNumber = 31,
    kMileageFieldNumber = 32,
    kOperationalStatusFieldNumber = 33,
    kHingeAngleFieldNumber = 34,
    kDistanceToTargetFieldNumber = 35,
    kOffsetLFieldNumber = 36,
    kOffsetTFieldNumber = 37,
    kOffsetYawFieldNumber = 38,
    kInHighVoltageFieldNumber = 39,
    kTaskTypeFieldNumber = 42,
    kActTypeFieldNumber = 44,
    kRtSpeedFieldNumber = 45,
    kFrameTsFieldNumber = 46,
    kTrailerAngleFieldNumber = 47,
  };
  // repeated .common.FaultInfo faults = 30;
  int faults_size() const;
  void clear_faults();
  ::common::FaultInfo* mutable_faults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FaultInfo >*
      mutable_faults();
  const ::common::FaultInfo& faults(int index) const;
  ::common::FaultInfo* add_faults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FaultInfo >&
      faults() const;

  // string trace_id = 6;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);

  // string task_id = 7;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // string navi_id = 8;
  void clear_navi_id();
  const std::string& navi_id() const;
  void set_navi_id(const std::string& value);
  void set_navi_id(std::string&& value);
  void set_navi_id(const char* value);
  void set_navi_id(const char* value, size_t size);
  std::string* mutable_navi_id();
  std::string* release_navi_id();
  void set_allocated_navi_id(std::string* navi_id);

  // string target = 9;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // string sub_target = 10;
  void clear_sub_target();
  const std::string& sub_target() const;
  void set_sub_target(const std::string& value);
  void set_sub_target(std::string&& value);
  void set_sub_target(const char* value);
  void set_sub_target(const char* value, size_t size);
  std::string* mutable_sub_target();
  std::string* release_sub_target();
  void set_allocated_sub_target(std::string* sub_target);

  // string last_location = 11;
  void clear_last_location();
  const std::string& last_location() const;
  void set_last_location(const std::string& value);
  void set_last_location(std::string&& value);
  void set_last_location(const char* value);
  void set_last_location(const char* value, size_t size);
  std::string* mutable_last_location();
  std::string* release_last_location();
  void set_allocated_last_location(std::string* last_location);

  // string location = 12;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);

  // string next_location = 13;
  void clear_next_location();
  const std::string& next_location() const;
  void set_next_location(const std::string& value);
  void set_next_location(std::string&& value);
  void set_next_location(const char* value);
  void set_next_location(const char* value, size_t size);
  std::string* mutable_next_location();
  std::string* release_next_location();
  void set_allocated_next_location(std::string* next_location);

  // string host = 40;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // string port = 41;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);

  // string crane_id = 43;
  void clear_crane_id();
  const std::string& crane_id() const;
  void set_crane_id(const std::string& value);
  void set_crane_id(std::string&& value);
  void set_crane_id(const char* value);
  void set_crane_id(const char* value, size_t size);
  std::string* mutable_crane_id();
  std::string* release_crane_id();
  void set_allocated_crane_id(std::string* crane_id);

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // .google.protobuf.Timestamp created = 2;
  bool has_created() const;
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);

  // .google.protobuf.Timestamp updated = 3;
  bool has_updated() const;
  void clear_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated);

  // .common.Point point = 15;
  bool has_point() const;
  void clear_point();
  const ::common::Point& point() const;
  ::common::Point* release_point();
  ::common::Point* mutable_point();
  void set_allocated_point(::common::Point* point);

  // .common.StateFlow state_flow = 4;
  void clear_state_flow();
  ::common::StateFlow state_flow() const;
  void set_state_flow(::common::StateFlow value);

  // .common.TaskMode task_mode = 5;
  void clear_task_mode();
  ::common::TaskMode task_mode() const;
  void set_task_mode(::common::TaskMode value);

  // double yaw = 16;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);

  // int32 chassis_total_hour = 18;
  void clear_chassis_total_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 chassis_total_hour() const;
  void set_chassis_total_hour(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .common.Gear gear = 19;
  void clear_gear();
  ::common::Gear gear() const;
  void set_gear(::common::Gear value);

  // bool is_attendance_tos = 14;
  void clear_is_attendance_tos();
  bool is_attendance_tos() const;
  void set_is_attendance_tos(bool value);

  // bool estop = 17;
  void clear_estop();
  bool estop() const;
  void set_estop(bool value);

  // bool is_charging = 20;
  void clear_is_charging();
  bool is_charging() const;
  void set_is_charging(bool value);

  // bool empty = 26;
  void clear_empty();
  bool empty() const;
  void set_empty(bool value);

  // .common.SteeringMode motion_mode = 21;
  void clear_motion_mode();
  ::common::SteeringMode motion_mode() const;
  void set_motion_mode(::common::SteeringMode value);

  // .common.DriveDirection drv_direction = 22;
  void clear_drv_direction();
  ::common::DriveDirection drv_direction() const;
  void set_drv_direction(::common::DriveDirection value);

  // float speed = 23;
  void clear_speed();
  float speed() const;
  void set_speed(float value);

  // int32 soh = 24;
  void clear_soh();
  ::PROTOBUF_NAMESPACE_ID::int32 soh() const;
  void set_soh(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 soc = 25;
  void clear_soc();
  ::PROTOBUF_NAMESPACE_ID::int32 soc() const;
  void set_soc(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .common.TurnLight turn_light = 27;
  void clear_turn_light();
  ::common::TurnLight turn_light() const;
  void set_turn_light(::common::TurnLight value);

  // int32 firm_error_status = 28;
  void clear_firm_error_status();
  ::PROTOBUF_NAMESPACE_ID::int32 firm_error_status() const;
  void set_firm_error_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 vehicle_error_status = 29;
  void clear_vehicle_error_status();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_error_status() const;
  void set_vehicle_error_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .common.TechnicalStatus technical_status = 31;
  void clear_technical_status();
  ::common::TechnicalStatus technical_status() const;
  void set_technical_status(::common::TechnicalStatus value);

  // float mileage = 32;
  void clear_mileage();
  float mileage() const;
  void set_mileage(float value);

  // .common.OperationalStatus operational_status = 33;
  void clear_operational_status();
  ::common::OperationalStatus operational_status() const;
  void set_operational_status(::common::OperationalStatus value);

  // float hinge_angle = 34;
  void clear_hinge_angle();
  float hinge_angle() const;
  void set_hinge_angle(float value);

  // float distance_to_target = 35;
  void clear_distance_to_target();
  float distance_to_target() const;
  void set_distance_to_target(float value);

  // double offset_l = 36;
  void clear_offset_l();
  double offset_l() const;
  void set_offset_l(double value);

  // double offset_t = 37;
  void clear_offset_t();
  double offset_t() const;
  void set_offset_t(double value);

  // double offset_yaw = 38;
  void clear_offset_yaw();
  double offset_yaw() const;
  void set_offset_yaw(double value);

  // bool in_high_voltage = 39;
  void clear_in_high_voltage();
  bool in_high_voltage() const;
  void set_in_high_voltage(bool value);

  // .common.TaskType task_type = 42;
  void clear_task_type();
  ::common::TaskType task_type() const;
  void set_task_type(::common::TaskType value);

  // .common.ActType act_type = 44;
  void clear_act_type();
  ::common::ActType act_type() const;
  void set_act_type(::common::ActType value);

  // float rt_speed = 45;
  void clear_rt_speed();
  float rt_speed() const;
  void set_rt_speed(float value);

  // double frame_ts = 46;
  void clear_frame_ts();
  double frame_ts() const;
  void set_frame_ts(double value);

  // double trailer_angle = 47;
  void clear_trailer_angle();
  double trailer_angle() const;
  void set_trailer_angle(double value);

  // @@protoc_insertion_point(class_scope:common.ActStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FaultInfo > faults_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr navi_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crane_id_;
  ::common::Header* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  ::common::Point* point_;
  int state_flow_;
  int task_mode_;
  double yaw_;
  ::PROTOBUF_NAMESPACE_ID::int32 chassis_total_hour_;
  int gear_;
  bool is_attendance_tos_;
  bool estop_;
  bool is_charging_;
  bool empty_;
  int motion_mode_;
  int drv_direction_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 soh_;
  ::PROTOBUF_NAMESPACE_ID::int32 soc_;
  int turn_light_;
  ::PROTOBUF_NAMESPACE_ID::int32 firm_error_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_error_status_;
  int technical_status_;
  float mileage_;
  int operational_status_;
  float hinge_angle_;
  float distance_to_target_;
  double offset_l_;
  double offset_t_;
  double offset_yaw_;
  bool in_high_voltage_;
  int task_type_;
  int act_type_;
  float rt_speed_;
  double frame_ts_;
  double trailer_angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fact_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActStatus

// .common.Header header = 1;
inline bool ActStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& ActStatus::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.ActStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* ActStatus::release_header() {
  // @@protoc_insertion_point(field_release:common.ActStatus.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* ActStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ActStatus.header)
  return header_;
}
inline void ActStatus::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.header)
}

// .google.protobuf.Timestamp created = 2;
inline bool ActStatus::has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActStatus::created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:common.ActStatus.created)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActStatus::release_created() {
  // @@protoc_insertion_point(field_release:common.ActStatus.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActStatus::mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ActStatus.created)
  return created_;
}
inline void ActStatus::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.created)
}

// .google.protobuf.Timestamp updated = 3;
inline bool ActStatus::has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActStatus::updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  // @@protoc_insertion_point(field_get:common.ActStatus.updated)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActStatus::release_updated() {
  // @@protoc_insertion_point(field_release:common.ActStatus.updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActStatus::mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ActStatus.updated)
  return updated_;
}
inline void ActStatus::set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.updated)
}

// .common.StateFlow state_flow = 4;
inline void ActStatus::clear_state_flow() {
  state_flow_ = 0;
}
inline ::common::StateFlow ActStatus::state_flow() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.state_flow)
  return static_cast< ::common::StateFlow >(state_flow_);
}
inline void ActStatus::set_state_flow(::common::StateFlow value) {
  
  state_flow_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.state_flow)
}

// .common.TaskMode task_mode = 5;
inline void ActStatus::clear_task_mode() {
  task_mode_ = 0;
}
inline ::common::TaskMode ActStatus::task_mode() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.task_mode)
  return static_cast< ::common::TaskMode >(task_mode_);
}
inline void ActStatus::set_task_mode(::common::TaskMode value) {
  
  task_mode_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.task_mode)
}

// string trace_id = 6;
inline void ActStatus::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::trace_id() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.trace_id)
  return trace_id_.GetNoArena();
}
inline void ActStatus::set_trace_id(const std::string& value) {
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.trace_id)
}
inline void ActStatus::set_trace_id(std::string&& value) {
  
  trace_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.trace_id)
}
inline void ActStatus::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.trace_id)
}
inline void ActStatus::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.trace_id)
}
inline std::string* ActStatus::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.trace_id)
  return trace_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_trace_id() {
  // @@protoc_insertion_point(field_release:common.ActStatus.trace_id)
  
  return trace_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.trace_id)
}

// string task_id = 7;
inline void ActStatus::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::task_id() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.task_id)
  return task_id_.GetNoArena();
}
inline void ActStatus::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.task_id)
}
inline void ActStatus::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.task_id)
}
inline void ActStatus::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.task_id)
}
inline void ActStatus::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.task_id)
}
inline std::string* ActStatus::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_task_id() {
  // @@protoc_insertion_point(field_release:common.ActStatus.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.task_id)
}

// string navi_id = 8;
inline void ActStatus::clear_navi_id() {
  navi_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::navi_id() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.navi_id)
  return navi_id_.GetNoArena();
}
inline void ActStatus::set_navi_id(const std::string& value) {
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.navi_id)
}
inline void ActStatus::set_navi_id(std::string&& value) {
  
  navi_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.navi_id)
}
inline void ActStatus::set_navi_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.navi_id)
}
inline void ActStatus::set_navi_id(const char* value, size_t size) {
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.navi_id)
}
inline std::string* ActStatus::mutable_navi_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.navi_id)
  return navi_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_navi_id() {
  // @@protoc_insertion_point(field_release:common.ActStatus.navi_id)
  
  return navi_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_navi_id(std::string* navi_id) {
  if (navi_id != nullptr) {
    
  } else {
    
  }
  navi_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), navi_id);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.navi_id)
}

// string target = 9;
inline void ActStatus::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::target() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.target)
  return target_.GetNoArena();
}
inline void ActStatus::set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.target)
}
inline void ActStatus::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.target)
}
inline void ActStatus::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.target)
}
inline void ActStatus::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.target)
}
inline std::string* ActStatus::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_target() {
  // @@protoc_insertion_point(field_release:common.ActStatus.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.target)
}

// string sub_target = 10;
inline void ActStatus::clear_sub_target() {
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::sub_target() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.sub_target)
  return sub_target_.GetNoArena();
}
inline void ActStatus::set_sub_target(const std::string& value) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.sub_target)
}
inline void ActStatus::set_sub_target(std::string&& value) {
  
  sub_target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.sub_target)
}
inline void ActStatus::set_sub_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.sub_target)
}
inline void ActStatus::set_sub_target(const char* value, size_t size) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.sub_target)
}
inline std::string* ActStatus::mutable_sub_target() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.sub_target)
  return sub_target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_sub_target() {
  // @@protoc_insertion_point(field_release:common.ActStatus.sub_target)
  
  return sub_target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_sub_target(std::string* sub_target) {
  if (sub_target != nullptr) {
    
  } else {
    
  }
  sub_target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_target);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.sub_target)
}

// string last_location = 11;
inline void ActStatus::clear_last_location() {
  last_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::last_location() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.last_location)
  return last_location_.GetNoArena();
}
inline void ActStatus::set_last_location(const std::string& value) {
  
  last_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.last_location)
}
inline void ActStatus::set_last_location(std::string&& value) {
  
  last_location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.last_location)
}
inline void ActStatus::set_last_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.last_location)
}
inline void ActStatus::set_last_location(const char* value, size_t size) {
  
  last_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.last_location)
}
inline std::string* ActStatus::mutable_last_location() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.last_location)
  return last_location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_last_location() {
  // @@protoc_insertion_point(field_release:common.ActStatus.last_location)
  
  return last_location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_last_location(std::string* last_location) {
  if (last_location != nullptr) {
    
  } else {
    
  }
  last_location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_location);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.last_location)
}

// string location = 12;
inline void ActStatus::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::location() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.location)
  return location_.GetNoArena();
}
inline void ActStatus::set_location(const std::string& value) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.location)
}
inline void ActStatus::set_location(std::string&& value) {
  
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.location)
}
inline void ActStatus::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.location)
}
inline void ActStatus::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.location)
}
inline std::string* ActStatus::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.location)
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_location() {
  // @@protoc_insertion_point(field_release:common.ActStatus.location)
  
  return location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.location)
}

// string next_location = 13;
inline void ActStatus::clear_next_location() {
  next_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::next_location() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.next_location)
  return next_location_.GetNoArena();
}
inline void ActStatus::set_next_location(const std::string& value) {
  
  next_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.next_location)
}
inline void ActStatus::set_next_location(std::string&& value) {
  
  next_location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.next_location)
}
inline void ActStatus::set_next_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.next_location)
}
inline void ActStatus::set_next_location(const char* value, size_t size) {
  
  next_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.next_location)
}
inline std::string* ActStatus::mutable_next_location() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.next_location)
  return next_location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_next_location() {
  // @@protoc_insertion_point(field_release:common.ActStatus.next_location)
  
  return next_location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_next_location(std::string* next_location) {
  if (next_location != nullptr) {
    
  } else {
    
  }
  next_location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_location);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.next_location)
}

// bool is_attendance_tos = 14;
inline void ActStatus::clear_is_attendance_tos() {
  is_attendance_tos_ = false;
}
inline bool ActStatus::is_attendance_tos() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.is_attendance_tos)
  return is_attendance_tos_;
}
inline void ActStatus::set_is_attendance_tos(bool value) {
  
  is_attendance_tos_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.is_attendance_tos)
}

// .common.Point point = 15;
inline bool ActStatus::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline const ::common::Point& ActStatus::point() const {
  const ::common::Point* p = point_;
  // @@protoc_insertion_point(field_get:common.ActStatus.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* ActStatus::release_point() {
  // @@protoc_insertion_point(field_release:common.ActStatus.point)
  
  ::common::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::common::Point* ActStatus::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ActStatus.point)
  return point_;
}
inline void ActStatus::set_allocated_point(::common::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.point)
}

// double yaw = 16;
inline void ActStatus::clear_yaw() {
  yaw_ = 0;
}
inline double ActStatus::yaw() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.yaw)
  return yaw_;
}
inline void ActStatus::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.yaw)
}

// bool estop = 17;
inline void ActStatus::clear_estop() {
  estop_ = false;
}
inline bool ActStatus::estop() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.estop)
  return estop_;
}
inline void ActStatus::set_estop(bool value) {
  
  estop_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.estop)
}

// int32 chassis_total_hour = 18;
inline void ActStatus::clear_chassis_total_hour() {
  chassis_total_hour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActStatus::chassis_total_hour() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.chassis_total_hour)
  return chassis_total_hour_;
}
inline void ActStatus::set_chassis_total_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chassis_total_hour_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.chassis_total_hour)
}

// .common.Gear gear = 19;
inline void ActStatus::clear_gear() {
  gear_ = 0;
}
inline ::common::Gear ActStatus::gear() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.gear)
  return static_cast< ::common::Gear >(gear_);
}
inline void ActStatus::set_gear(::common::Gear value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.gear)
}

// bool is_charging = 20;
inline void ActStatus::clear_is_charging() {
  is_charging_ = false;
}
inline bool ActStatus::is_charging() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.is_charging)
  return is_charging_;
}
inline void ActStatus::set_is_charging(bool value) {
  
  is_charging_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.is_charging)
}

// .common.SteeringMode motion_mode = 21;
inline void ActStatus::clear_motion_mode() {
  motion_mode_ = 0;
}
inline ::common::SteeringMode ActStatus::motion_mode() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.motion_mode)
  return static_cast< ::common::SteeringMode >(motion_mode_);
}
inline void ActStatus::set_motion_mode(::common::SteeringMode value) {
  
  motion_mode_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.motion_mode)
}

// .common.DriveDirection drv_direction = 22;
inline void ActStatus::clear_drv_direction() {
  drv_direction_ = 0;
}
inline ::common::DriveDirection ActStatus::drv_direction() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.drv_direction)
  return static_cast< ::common::DriveDirection >(drv_direction_);
}
inline void ActStatus::set_drv_direction(::common::DriveDirection value) {
  
  drv_direction_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.drv_direction)
}

// float speed = 23;
inline void ActStatus::clear_speed() {
  speed_ = 0;
}
inline float ActStatus::speed() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.speed)
  return speed_;
}
inline void ActStatus::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.speed)
}

// int32 soh = 24;
inline void ActStatus::clear_soh() {
  soh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActStatus::soh() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.soh)
  return soh_;
}
inline void ActStatus::set_soh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  soh_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.soh)
}

// int32 soc = 25;
inline void ActStatus::clear_soc() {
  soc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActStatus::soc() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.soc)
  return soc_;
}
inline void ActStatus::set_soc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  soc_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.soc)
}

// bool empty = 26;
inline void ActStatus::clear_empty() {
  empty_ = false;
}
inline bool ActStatus::empty() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.empty)
  return empty_;
}
inline void ActStatus::set_empty(bool value) {
  
  empty_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.empty)
}

// .common.TurnLight turn_light = 27;
inline void ActStatus::clear_turn_light() {
  turn_light_ = 0;
}
inline ::common::TurnLight ActStatus::turn_light() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.turn_light)
  return static_cast< ::common::TurnLight >(turn_light_);
}
inline void ActStatus::set_turn_light(::common::TurnLight value) {
  
  turn_light_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.turn_light)
}

// int32 firm_error_status = 28;
inline void ActStatus::clear_firm_error_status() {
  firm_error_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActStatus::firm_error_status() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.firm_error_status)
  return firm_error_status_;
}
inline void ActStatus::set_firm_error_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firm_error_status_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.firm_error_status)
}

// int32 vehicle_error_status = 29;
inline void ActStatus::clear_vehicle_error_status() {
  vehicle_error_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActStatus::vehicle_error_status() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.vehicle_error_status)
  return vehicle_error_status_;
}
inline void ActStatus::set_vehicle_error_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_error_status_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.vehicle_error_status)
}

// repeated .common.FaultInfo faults = 30;
inline int ActStatus::faults_size() const {
  return faults_.size();
}
inline ::common::FaultInfo* ActStatus::mutable_faults(int index) {
  // @@protoc_insertion_point(field_mutable:common.ActStatus.faults)
  return faults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FaultInfo >*
ActStatus::mutable_faults() {
  // @@protoc_insertion_point(field_mutable_list:common.ActStatus.faults)
  return &faults_;
}
inline const ::common::FaultInfo& ActStatus::faults(int index) const {
  // @@protoc_insertion_point(field_get:common.ActStatus.faults)
  return faults_.Get(index);
}
inline ::common::FaultInfo* ActStatus::add_faults() {
  // @@protoc_insertion_point(field_add:common.ActStatus.faults)
  return faults_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FaultInfo >&
ActStatus::faults() const {
  // @@protoc_insertion_point(field_list:common.ActStatus.faults)
  return faults_;
}

// .common.TechnicalStatus technical_status = 31;
inline void ActStatus::clear_technical_status() {
  technical_status_ = 0;
}
inline ::common::TechnicalStatus ActStatus::technical_status() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.technical_status)
  return static_cast< ::common::TechnicalStatus >(technical_status_);
}
inline void ActStatus::set_technical_status(::common::TechnicalStatus value) {
  
  technical_status_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.technical_status)
}

// float mileage = 32;
inline void ActStatus::clear_mileage() {
  mileage_ = 0;
}
inline float ActStatus::mileage() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.mileage)
  return mileage_;
}
inline void ActStatus::set_mileage(float value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.mileage)
}

// .common.OperationalStatus operational_status = 33;
inline void ActStatus::clear_operational_status() {
  operational_status_ = 0;
}
inline ::common::OperationalStatus ActStatus::operational_status() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.operational_status)
  return static_cast< ::common::OperationalStatus >(operational_status_);
}
inline void ActStatus::set_operational_status(::common::OperationalStatus value) {
  
  operational_status_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.operational_status)
}

// float hinge_angle = 34;
inline void ActStatus::clear_hinge_angle() {
  hinge_angle_ = 0;
}
inline float ActStatus::hinge_angle() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.hinge_angle)
  return hinge_angle_;
}
inline void ActStatus::set_hinge_angle(float value) {
  
  hinge_angle_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.hinge_angle)
}

// float distance_to_target = 35;
inline void ActStatus::clear_distance_to_target() {
  distance_to_target_ = 0;
}
inline float ActStatus::distance_to_target() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.distance_to_target)
  return distance_to_target_;
}
inline void ActStatus::set_distance_to_target(float value) {
  
  distance_to_target_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.distance_to_target)
}

// double offset_l = 36;
inline void ActStatus::clear_offset_l() {
  offset_l_ = 0;
}
inline double ActStatus::offset_l() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.offset_l)
  return offset_l_;
}
inline void ActStatus::set_offset_l(double value) {
  
  offset_l_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.offset_l)
}

// double offset_t = 37;
inline void ActStatus::clear_offset_t() {
  offset_t_ = 0;
}
inline double ActStatus::offset_t() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.offset_t)
  return offset_t_;
}
inline void ActStatus::set_offset_t(double value) {
  
  offset_t_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.offset_t)
}

// double offset_yaw = 38;
inline void ActStatus::clear_offset_yaw() {
  offset_yaw_ = 0;
}
inline double ActStatus::offset_yaw() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.offset_yaw)
  return offset_yaw_;
}
inline void ActStatus::set_offset_yaw(double value) {
  
  offset_yaw_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.offset_yaw)
}

// bool in_high_voltage = 39;
inline void ActStatus::clear_in_high_voltage() {
  in_high_voltage_ = false;
}
inline bool ActStatus::in_high_voltage() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.in_high_voltage)
  return in_high_voltage_;
}
inline void ActStatus::set_in_high_voltage(bool value) {
  
  in_high_voltage_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.in_high_voltage)
}

// string host = 40;
inline void ActStatus::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::host() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.host)
  return host_.GetNoArena();
}
inline void ActStatus::set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.host)
}
inline void ActStatus::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.host)
}
inline void ActStatus::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.host)
}
inline void ActStatus::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.host)
}
inline std::string* ActStatus::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_host() {
  // @@protoc_insertion_point(field_release:common.ActStatus.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.host)
}

// string port = 41;
inline void ActStatus::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::port() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.port)
  return port_.GetNoArena();
}
inline void ActStatus::set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.port)
}
inline void ActStatus::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.port)
}
inline void ActStatus::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.port)
}
inline void ActStatus::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.port)
}
inline std::string* ActStatus::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.port)
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_port() {
  // @@protoc_insertion_point(field_release:common.ActStatus.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.port)
}

// .common.TaskType task_type = 42;
inline void ActStatus::clear_task_type() {
  task_type_ = 0;
}
inline ::common::TaskType ActStatus::task_type() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.task_type)
  return static_cast< ::common::TaskType >(task_type_);
}
inline void ActStatus::set_task_type(::common::TaskType value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.task_type)
}

// string crane_id = 43;
inline void ActStatus::clear_crane_id() {
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActStatus::crane_id() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.crane_id)
  return crane_id_.GetNoArena();
}
inline void ActStatus::set_crane_id(const std::string& value) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ActStatus.crane_id)
}
inline void ActStatus::set_crane_id(std::string&& value) {
  
  crane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ActStatus.crane_id)
}
inline void ActStatus::set_crane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ActStatus.crane_id)
}
inline void ActStatus::set_crane_id(const char* value, size_t size) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ActStatus.crane_id)
}
inline std::string* ActStatus::mutable_crane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ActStatus.crane_id)
  return crane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActStatus::release_crane_id() {
  // @@protoc_insertion_point(field_release:common.ActStatus.crane_id)
  
  return crane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActStatus::set_allocated_crane_id(std::string* crane_id) {
  if (crane_id != nullptr) {
    
  } else {
    
  }
  crane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crane_id);
  // @@protoc_insertion_point(field_set_allocated:common.ActStatus.crane_id)
}

// .common.ActType act_type = 44;
inline void ActStatus::clear_act_type() {
  act_type_ = 0;
}
inline ::common::ActType ActStatus::act_type() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.act_type)
  return static_cast< ::common::ActType >(act_type_);
}
inline void ActStatus::set_act_type(::common::ActType value) {
  
  act_type_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.act_type)
}

// float rt_speed = 45;
inline void ActStatus::clear_rt_speed() {
  rt_speed_ = 0;
}
inline float ActStatus::rt_speed() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.rt_speed)
  return rt_speed_;
}
inline void ActStatus::set_rt_speed(float value) {
  
  rt_speed_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.rt_speed)
}

// double frame_ts = 46;
inline void ActStatus::clear_frame_ts() {
  frame_ts_ = 0;
}
inline double ActStatus::frame_ts() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.frame_ts)
  return frame_ts_;
}
inline void ActStatus::set_frame_ts(double value) {
  
  frame_ts_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.frame_ts)
}

// double trailer_angle = 47;
inline void ActStatus::clear_trailer_angle() {
  trailer_angle_ = 0;
}
inline double ActStatus::trailer_angle() const {
  // @@protoc_insertion_point(field_get:common.ActStatus.trailer_angle)
  return trailer_angle_;
}
inline void ActStatus::set_trailer_angle(double value) {
  
  trailer_angle_ = value;
  // @@protoc_insertion_point(field_set:common.ActStatus.trailer_angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fact_5fstatus_2eproto
