// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/qc_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fqc_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fqc_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "./header.pb.h"
#include "./enums.pb.h"
#include "./point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fqc_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fqc_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fqc_5fstatus_2eproto;
namespace common {
class QcStatus;
class QcStatusDefaultTypeInternal;
extern QcStatusDefaultTypeInternal _QcStatus_default_instance_;
class UniqueQcStatus;
class UniqueQcStatusDefaultTypeInternal;
extern UniqueQcStatusDefaultTypeInternal _UniqueQcStatus_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::QcStatus* Arena::CreateMaybeMessage<::common::QcStatus>(Arena*);
template<> ::common::UniqueQcStatus* Arena::CreateMaybeMessage<::common::UniqueQcStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class UniqueQcStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.UniqueQcStatus) */ {
 public:
  UniqueQcStatus();
  virtual ~UniqueQcStatus();

  UniqueQcStatus(const UniqueQcStatus& from);
  UniqueQcStatus(UniqueQcStatus&& from) noexcept
    : UniqueQcStatus() {
    *this = ::std::move(from);
  }

  inline UniqueQcStatus& operator=(const UniqueQcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniqueQcStatus& operator=(UniqueQcStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniqueQcStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniqueQcStatus* internal_default_instance() {
    return reinterpret_cast<const UniqueQcStatus*>(
               &_UniqueQcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UniqueQcStatus& a, UniqueQcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UniqueQcStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniqueQcStatus* New() const final {
    return CreateMaybeMessage<UniqueQcStatus>(nullptr);
  }

  UniqueQcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniqueQcStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniqueQcStatus& from);
  void MergeFrom(const UniqueQcStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniqueQcStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.UniqueQcStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fqc_5fstatus_2eproto);
    return ::descriptor_table_common_2fqc_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCraneIdFieldNumber = 1,
    kTechnicalDetailsFieldNumber = 3,
    kLaneIdFieldNumber = 11,
    kUpVpbFieldNumber = 14,
    kDownVpbFieldNumber = 15,
    kBerthNameFieldNumber = 16,
    kIsTopFieldNumber = 23,
    kGantryPosFieldNumber = 7,
    kTrolleyPosFieldNumber = 8,
    kLandLeftLegPosFieldNumber = 9,
    kLandRightLegPosFieldNumber = 10,
    kTechnicalStatusFieldNumber = 2,
    kGantryOffsetFieldNumber = 4,
    kTrolleyOffsetFieldNumber = 5,
    kSpreaderHeightFieldNumber = 6,
    kQcMoveFieldNumber = 12,
    kQcBayArrivedFieldNumber = 13,
    kRouteDirectionFieldNumber = 17,
    kVesselDirectionFieldNumber = 18,
    kLockStatusFieldNumber = 19,
    kTrolleyModelFieldNumber = 20,
    kCraneYawFieldNumber = 22,
    kCraneTypeFieldNumber = 21,
  };
  // string crane_id = 1;
  void clear_crane_id();
  const std::string& crane_id() const;
  void set_crane_id(const std::string& value);
  void set_crane_id(std::string&& value);
  void set_crane_id(const char* value);
  void set_crane_id(const char* value, size_t size);
  std::string* mutable_crane_id();
  std::string* release_crane_id();
  void set_allocated_crane_id(std::string* crane_id);

  // string technical_details = 3;
  void clear_technical_details();
  const std::string& technical_details() const;
  void set_technical_details(const std::string& value);
  void set_technical_details(std::string&& value);
  void set_technical_details(const char* value);
  void set_technical_details(const char* value, size_t size);
  std::string* mutable_technical_details();
  std::string* release_technical_details();
  void set_allocated_technical_details(std::string* technical_details);

  // string lane_id = 11;
  void clear_lane_id();
  const std::string& lane_id() const;
  void set_lane_id(const std::string& value);
  void set_lane_id(std::string&& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  std::string* mutable_lane_id();
  std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);

  // string up_vpb = 14;
  void clear_up_vpb();
  const std::string& up_vpb() const;
  void set_up_vpb(const std::string& value);
  void set_up_vpb(std::string&& value);
  void set_up_vpb(const char* value);
  void set_up_vpb(const char* value, size_t size);
  std::string* mutable_up_vpb();
  std::string* release_up_vpb();
  void set_allocated_up_vpb(std::string* up_vpb);

  // string down_vpb = 15;
  void clear_down_vpb();
  const std::string& down_vpb() const;
  void set_down_vpb(const std::string& value);
  void set_down_vpb(std::string&& value);
  void set_down_vpb(const char* value);
  void set_down_vpb(const char* value, size_t size);
  std::string* mutable_down_vpb();
  std::string* release_down_vpb();
  void set_allocated_down_vpb(std::string* down_vpb);

  // string berth_name = 16;
  void clear_berth_name();
  const std::string& berth_name() const;
  void set_berth_name(const std::string& value);
  void set_berth_name(std::string&& value);
  void set_berth_name(const char* value);
  void set_berth_name(const char* value, size_t size);
  std::string* mutable_berth_name();
  std::string* release_berth_name();
  void set_allocated_berth_name(std::string* berth_name);

  // string is_top = 23;
  void clear_is_top();
  const std::string& is_top() const;
  void set_is_top(const std::string& value);
  void set_is_top(std::string&& value);
  void set_is_top(const char* value);
  void set_is_top(const char* value, size_t size);
  std::string* mutable_is_top();
  std::string* release_is_top();
  void set_allocated_is_top(std::string* is_top);

  // .common.Point gantry_pos = 7;
  bool has_gantry_pos() const;
  void clear_gantry_pos();
  const ::common::Point& gantry_pos() const;
  ::common::Point* release_gantry_pos();
  ::common::Point* mutable_gantry_pos();
  void set_allocated_gantry_pos(::common::Point* gantry_pos);

  // .common.Point trolley_pos = 8;
  bool has_trolley_pos() const;
  void clear_trolley_pos();
  const ::common::Point& trolley_pos() const;
  ::common::Point* release_trolley_pos();
  ::common::Point* mutable_trolley_pos();
  void set_allocated_trolley_pos(::common::Point* trolley_pos);

  // .common.Point land_left_leg_pos = 9;
  bool has_land_left_leg_pos() const;
  void clear_land_left_leg_pos();
  const ::common::Point& land_left_leg_pos() const;
  ::common::Point* release_land_left_leg_pos();
  ::common::Point* mutable_land_left_leg_pos();
  void set_allocated_land_left_leg_pos(::common::Point* land_left_leg_pos);

  // .common.Point land_right_leg_pos = 10;
  bool has_land_right_leg_pos() const;
  void clear_land_right_leg_pos();
  const ::common::Point& land_right_leg_pos() const;
  ::common::Point* release_land_right_leg_pos();
  ::common::Point* mutable_land_right_leg_pos();
  void set_allocated_land_right_leg_pos(::common::Point* land_right_leg_pos);

  // .common.TechnicalStatus technical_status = 2;
  void clear_technical_status();
  ::common::TechnicalStatus technical_status() const;
  void set_technical_status(::common::TechnicalStatus value);

  // int32 gantry_offset = 4;
  void clear_gantry_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 gantry_offset() const;
  void set_gantry_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trolley_offset = 5;
  void clear_trolley_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 trolley_offset() const;
  void set_trolley_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 spreader_height = 6;
  void clear_spreader_height();
  ::PROTOBUF_NAMESPACE_ID::int32 spreader_height() const;
  void set_spreader_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .common.MotionStatus qc_move = 12;
  void clear_qc_move();
  ::common::MotionStatus qc_move() const;
  void set_qc_move(::common::MotionStatus value);

  // bool qc_bay_arrived = 13;
  void clear_qc_bay_arrived();
  bool qc_bay_arrived() const;
  void set_qc_bay_arrived(bool value);

  // .common.WorkCycleDirection route_direction = 17;
  void clear_route_direction();
  ::common::WorkCycleDirection route_direction() const;
  void set_route_direction(::common::WorkCycleDirection value);

  // .common.VesselDirection vessel_direction = 18;
  void clear_vessel_direction();
  ::common::VesselDirection vessel_direction() const;
  void set_vessel_direction(::common::VesselDirection value);

  // int32 lock_status = 19;
  void clear_lock_status();
  ::PROTOBUF_NAMESPACE_ID::int32 lock_status() const;
  void set_lock_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trolley_model = 20;
  void clear_trolley_model();
  ::PROTOBUF_NAMESPACE_ID::int32 trolley_model() const;
  void set_trolley_model(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double crane_yaw = 22;
  void clear_crane_yaw();
  double crane_yaw() const;
  void set_crane_yaw(double value);

  // .common.CraneType crane_type = 21;
  void clear_crane_type();
  ::common::CraneType crane_type() const;
  void set_crane_type(::common::CraneType value);

  // @@protoc_insertion_point(class_scope:common.UniqueQcStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crane_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr technical_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr up_vpb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr down_vpb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr berth_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr is_top_;
  ::common::Point* gantry_pos_;
  ::common::Point* trolley_pos_;
  ::common::Point* land_left_leg_pos_;
  ::common::Point* land_right_leg_pos_;
  int technical_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 gantry_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 trolley_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 spreader_height_;
  int qc_move_;
  bool qc_bay_arrived_;
  int route_direction_;
  int vessel_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 trolley_model_;
  double crane_yaw_;
  int crane_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fqc_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class QcStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.QcStatus) */ {
 public:
  QcStatus();
  virtual ~QcStatus();

  QcStatus(const QcStatus& from);
  QcStatus(QcStatus&& from) noexcept
    : QcStatus() {
    *this = ::std::move(from);
  }

  inline QcStatus& operator=(const QcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline QcStatus& operator=(QcStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QcStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QcStatus* internal_default_instance() {
    return reinterpret_cast<const QcStatus*>(
               &_QcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QcStatus& a, QcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(QcStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QcStatus* New() const final {
    return CreateMaybeMessage<QcStatus>(nullptr);
  }

  QcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QcStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QcStatus& from);
  void MergeFrom(const QcStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QcStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.QcStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fqc_5fstatus_2eproto);
    return ::descriptor_table_common_2fqc_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQcStatusFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kUpdatedFieldNumber = 2,
  };
  // repeated .common.UniqueQcStatus qc_status = 3;
  int qc_status_size() const;
  void clear_qc_status();
  ::common::UniqueQcStatus* mutable_qc_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::UniqueQcStatus >*
      mutable_qc_status();
  const ::common::UniqueQcStatus& qc_status(int index) const;
  ::common::UniqueQcStatus* add_qc_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::UniqueQcStatus >&
      qc_status() const;

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // .google.protobuf.Timestamp updated = 2;
  bool has_updated() const;
  void clear_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated);

  // @@protoc_insertion_point(class_scope:common.QcStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::UniqueQcStatus > qc_status_;
  ::common::Header* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fqc_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniqueQcStatus

// string crane_id = 1;
inline void UniqueQcStatus::clear_crane_id() {
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::crane_id() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.crane_id)
  return crane_id_.GetNoArena();
}
inline void UniqueQcStatus::set_crane_id(const std::string& value) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.crane_id)
}
inline void UniqueQcStatus::set_crane_id(std::string&& value) {
  
  crane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.crane_id)
}
inline void UniqueQcStatus::set_crane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.crane_id)
}
inline void UniqueQcStatus::set_crane_id(const char* value, size_t size) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.crane_id)
}
inline std::string* UniqueQcStatus::mutable_crane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.crane_id)
  return crane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_crane_id() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.crane_id)
  
  return crane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_crane_id(std::string* crane_id) {
  if (crane_id != nullptr) {
    
  } else {
    
  }
  crane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crane_id);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.crane_id)
}

// .common.TechnicalStatus technical_status = 2;
inline void UniqueQcStatus::clear_technical_status() {
  technical_status_ = 0;
}
inline ::common::TechnicalStatus UniqueQcStatus::technical_status() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.technical_status)
  return static_cast< ::common::TechnicalStatus >(technical_status_);
}
inline void UniqueQcStatus::set_technical_status(::common::TechnicalStatus value) {
  
  technical_status_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.technical_status)
}

// string technical_details = 3;
inline void UniqueQcStatus::clear_technical_details() {
  technical_details_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::technical_details() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.technical_details)
  return technical_details_.GetNoArena();
}
inline void UniqueQcStatus::set_technical_details(const std::string& value) {
  
  technical_details_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.technical_details)
}
inline void UniqueQcStatus::set_technical_details(std::string&& value) {
  
  technical_details_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.technical_details)
}
inline void UniqueQcStatus::set_technical_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  technical_details_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.technical_details)
}
inline void UniqueQcStatus::set_technical_details(const char* value, size_t size) {
  
  technical_details_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.technical_details)
}
inline std::string* UniqueQcStatus::mutable_technical_details() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.technical_details)
  return technical_details_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_technical_details() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.technical_details)
  
  return technical_details_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_technical_details(std::string* technical_details) {
  if (technical_details != nullptr) {
    
  } else {
    
  }
  technical_details_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), technical_details);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.technical_details)
}

// int32 gantry_offset = 4;
inline void UniqueQcStatus::clear_gantry_offset() {
  gantry_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniqueQcStatus::gantry_offset() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.gantry_offset)
  return gantry_offset_;
}
inline void UniqueQcStatus::set_gantry_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gantry_offset_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.gantry_offset)
}

// int32 trolley_offset = 5;
inline void UniqueQcStatus::clear_trolley_offset() {
  trolley_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniqueQcStatus::trolley_offset() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.trolley_offset)
  return trolley_offset_;
}
inline void UniqueQcStatus::set_trolley_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trolley_offset_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.trolley_offset)
}

// int32 spreader_height = 6;
inline void UniqueQcStatus::clear_spreader_height() {
  spreader_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniqueQcStatus::spreader_height() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.spreader_height)
  return spreader_height_;
}
inline void UniqueQcStatus::set_spreader_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spreader_height_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.spreader_height)
}

// .common.Point gantry_pos = 7;
inline bool UniqueQcStatus::has_gantry_pos() const {
  return this != internal_default_instance() && gantry_pos_ != nullptr;
}
inline const ::common::Point& UniqueQcStatus::gantry_pos() const {
  const ::common::Point* p = gantry_pos_;
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.gantry_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* UniqueQcStatus::release_gantry_pos() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.gantry_pos)
  
  ::common::Point* temp = gantry_pos_;
  gantry_pos_ = nullptr;
  return temp;
}
inline ::common::Point* UniqueQcStatus::mutable_gantry_pos() {
  
  if (gantry_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    gantry_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.gantry_pos)
  return gantry_pos_;
}
inline void UniqueQcStatus::set_allocated_gantry_pos(::common::Point* gantry_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gantry_pos_);
  }
  if (gantry_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gantry_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gantry_pos, submessage_arena);
    }
    
  } else {
    
  }
  gantry_pos_ = gantry_pos;
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.gantry_pos)
}

// .common.Point trolley_pos = 8;
inline bool UniqueQcStatus::has_trolley_pos() const {
  return this != internal_default_instance() && trolley_pos_ != nullptr;
}
inline const ::common::Point& UniqueQcStatus::trolley_pos() const {
  const ::common::Point* p = trolley_pos_;
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.trolley_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* UniqueQcStatus::release_trolley_pos() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.trolley_pos)
  
  ::common::Point* temp = trolley_pos_;
  trolley_pos_ = nullptr;
  return temp;
}
inline ::common::Point* UniqueQcStatus::mutable_trolley_pos() {
  
  if (trolley_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    trolley_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.trolley_pos)
  return trolley_pos_;
}
inline void UniqueQcStatus::set_allocated_trolley_pos(::common::Point* trolley_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trolley_pos_);
  }
  if (trolley_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trolley_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trolley_pos, submessage_arena);
    }
    
  } else {
    
  }
  trolley_pos_ = trolley_pos;
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.trolley_pos)
}

// .common.Point land_left_leg_pos = 9;
inline bool UniqueQcStatus::has_land_left_leg_pos() const {
  return this != internal_default_instance() && land_left_leg_pos_ != nullptr;
}
inline const ::common::Point& UniqueQcStatus::land_left_leg_pos() const {
  const ::common::Point* p = land_left_leg_pos_;
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.land_left_leg_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* UniqueQcStatus::release_land_left_leg_pos() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.land_left_leg_pos)
  
  ::common::Point* temp = land_left_leg_pos_;
  land_left_leg_pos_ = nullptr;
  return temp;
}
inline ::common::Point* UniqueQcStatus::mutable_land_left_leg_pos() {
  
  if (land_left_leg_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    land_left_leg_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.land_left_leg_pos)
  return land_left_leg_pos_;
}
inline void UniqueQcStatus::set_allocated_land_left_leg_pos(::common::Point* land_left_leg_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(land_left_leg_pos_);
  }
  if (land_left_leg_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      land_left_leg_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, land_left_leg_pos, submessage_arena);
    }
    
  } else {
    
  }
  land_left_leg_pos_ = land_left_leg_pos;
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.land_left_leg_pos)
}

// .common.Point land_right_leg_pos = 10;
inline bool UniqueQcStatus::has_land_right_leg_pos() const {
  return this != internal_default_instance() && land_right_leg_pos_ != nullptr;
}
inline const ::common::Point& UniqueQcStatus::land_right_leg_pos() const {
  const ::common::Point* p = land_right_leg_pos_;
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.land_right_leg_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* UniqueQcStatus::release_land_right_leg_pos() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.land_right_leg_pos)
  
  ::common::Point* temp = land_right_leg_pos_;
  land_right_leg_pos_ = nullptr;
  return temp;
}
inline ::common::Point* UniqueQcStatus::mutable_land_right_leg_pos() {
  
  if (land_right_leg_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    land_right_leg_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.land_right_leg_pos)
  return land_right_leg_pos_;
}
inline void UniqueQcStatus::set_allocated_land_right_leg_pos(::common::Point* land_right_leg_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(land_right_leg_pos_);
  }
  if (land_right_leg_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      land_right_leg_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, land_right_leg_pos, submessage_arena);
    }
    
  } else {
    
  }
  land_right_leg_pos_ = land_right_leg_pos;
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.land_right_leg_pos)
}

// string lane_id = 11;
inline void UniqueQcStatus::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::lane_id() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.lane_id)
  return lane_id_.GetNoArena();
}
inline void UniqueQcStatus::set_lane_id(const std::string& value) {
  
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.lane_id)
}
inline void UniqueQcStatus::set_lane_id(std::string&& value) {
  
  lane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.lane_id)
}
inline void UniqueQcStatus::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.lane_id)
}
inline void UniqueQcStatus::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.lane_id)
}
inline std::string* UniqueQcStatus::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.lane_id)
  return lane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_lane_id() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.lane_id)
  
  return lane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.lane_id)
}

// .common.MotionStatus qc_move = 12;
inline void UniqueQcStatus::clear_qc_move() {
  qc_move_ = 0;
}
inline ::common::MotionStatus UniqueQcStatus::qc_move() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.qc_move)
  return static_cast< ::common::MotionStatus >(qc_move_);
}
inline void UniqueQcStatus::set_qc_move(::common::MotionStatus value) {
  
  qc_move_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.qc_move)
}

// bool qc_bay_arrived = 13;
inline void UniqueQcStatus::clear_qc_bay_arrived() {
  qc_bay_arrived_ = false;
}
inline bool UniqueQcStatus::qc_bay_arrived() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.qc_bay_arrived)
  return qc_bay_arrived_;
}
inline void UniqueQcStatus::set_qc_bay_arrived(bool value) {
  
  qc_bay_arrived_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.qc_bay_arrived)
}

// string up_vpb = 14;
inline void UniqueQcStatus::clear_up_vpb() {
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::up_vpb() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.up_vpb)
  return up_vpb_.GetNoArena();
}
inline void UniqueQcStatus::set_up_vpb(const std::string& value) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.up_vpb)
}
inline void UniqueQcStatus::set_up_vpb(std::string&& value) {
  
  up_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.up_vpb)
}
inline void UniqueQcStatus::set_up_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.up_vpb)
}
inline void UniqueQcStatus::set_up_vpb(const char* value, size_t size) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.up_vpb)
}
inline std::string* UniqueQcStatus::mutable_up_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.up_vpb)
  return up_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_up_vpb() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.up_vpb)
  
  return up_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_up_vpb(std::string* up_vpb) {
  if (up_vpb != nullptr) {
    
  } else {
    
  }
  up_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), up_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.up_vpb)
}

// string down_vpb = 15;
inline void UniqueQcStatus::clear_down_vpb() {
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::down_vpb() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.down_vpb)
  return down_vpb_.GetNoArena();
}
inline void UniqueQcStatus::set_down_vpb(const std::string& value) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.down_vpb)
}
inline void UniqueQcStatus::set_down_vpb(std::string&& value) {
  
  down_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.down_vpb)
}
inline void UniqueQcStatus::set_down_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.down_vpb)
}
inline void UniqueQcStatus::set_down_vpb(const char* value, size_t size) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.down_vpb)
}
inline std::string* UniqueQcStatus::mutable_down_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.down_vpb)
  return down_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_down_vpb() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.down_vpb)
  
  return down_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_down_vpb(std::string* down_vpb) {
  if (down_vpb != nullptr) {
    
  } else {
    
  }
  down_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), down_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.down_vpb)
}

// string berth_name = 16;
inline void UniqueQcStatus::clear_berth_name() {
  berth_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::berth_name() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.berth_name)
  return berth_name_.GetNoArena();
}
inline void UniqueQcStatus::set_berth_name(const std::string& value) {
  
  berth_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.berth_name)
}
inline void UniqueQcStatus::set_berth_name(std::string&& value) {
  
  berth_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.berth_name)
}
inline void UniqueQcStatus::set_berth_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  berth_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.berth_name)
}
inline void UniqueQcStatus::set_berth_name(const char* value, size_t size) {
  
  berth_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.berth_name)
}
inline std::string* UniqueQcStatus::mutable_berth_name() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.berth_name)
  return berth_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_berth_name() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.berth_name)
  
  return berth_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_berth_name(std::string* berth_name) {
  if (berth_name != nullptr) {
    
  } else {
    
  }
  berth_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), berth_name);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.berth_name)
}

// .common.WorkCycleDirection route_direction = 17;
inline void UniqueQcStatus::clear_route_direction() {
  route_direction_ = 0;
}
inline ::common::WorkCycleDirection UniqueQcStatus::route_direction() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.route_direction)
  return static_cast< ::common::WorkCycleDirection >(route_direction_);
}
inline void UniqueQcStatus::set_route_direction(::common::WorkCycleDirection value) {
  
  route_direction_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.route_direction)
}

// .common.VesselDirection vessel_direction = 18;
inline void UniqueQcStatus::clear_vessel_direction() {
  vessel_direction_ = 0;
}
inline ::common::VesselDirection UniqueQcStatus::vessel_direction() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.vessel_direction)
  return static_cast< ::common::VesselDirection >(vessel_direction_);
}
inline void UniqueQcStatus::set_vessel_direction(::common::VesselDirection value) {
  
  vessel_direction_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.vessel_direction)
}

// int32 lock_status = 19;
inline void UniqueQcStatus::clear_lock_status() {
  lock_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniqueQcStatus::lock_status() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.lock_status)
  return lock_status_;
}
inline void UniqueQcStatus::set_lock_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_status_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.lock_status)
}

// int32 trolley_model = 20;
inline void UniqueQcStatus::clear_trolley_model() {
  trolley_model_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniqueQcStatus::trolley_model() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.trolley_model)
  return trolley_model_;
}
inline void UniqueQcStatus::set_trolley_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trolley_model_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.trolley_model)
}

// .common.CraneType crane_type = 21;
inline void UniqueQcStatus::clear_crane_type() {
  crane_type_ = 0;
}
inline ::common::CraneType UniqueQcStatus::crane_type() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.crane_type)
  return static_cast< ::common::CraneType >(crane_type_);
}
inline void UniqueQcStatus::set_crane_type(::common::CraneType value) {
  
  crane_type_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.crane_type)
}

// double crane_yaw = 22;
inline void UniqueQcStatus::clear_crane_yaw() {
  crane_yaw_ = 0;
}
inline double UniqueQcStatus::crane_yaw() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.crane_yaw)
  return crane_yaw_;
}
inline void UniqueQcStatus::set_crane_yaw(double value) {
  
  crane_yaw_ = value;
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.crane_yaw)
}

// string is_top = 23;
inline void UniqueQcStatus::clear_is_top() {
  is_top_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UniqueQcStatus::is_top() const {
  // @@protoc_insertion_point(field_get:common.UniqueQcStatus.is_top)
  return is_top_.GetNoArena();
}
inline void UniqueQcStatus::set_is_top(const std::string& value) {
  
  is_top_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.UniqueQcStatus.is_top)
}
inline void UniqueQcStatus::set_is_top(std::string&& value) {
  
  is_top_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.UniqueQcStatus.is_top)
}
inline void UniqueQcStatus::set_is_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  is_top_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.UniqueQcStatus.is_top)
}
inline void UniqueQcStatus::set_is_top(const char* value, size_t size) {
  
  is_top_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.UniqueQcStatus.is_top)
}
inline std::string* UniqueQcStatus::mutable_is_top() {
  
  // @@protoc_insertion_point(field_mutable:common.UniqueQcStatus.is_top)
  return is_top_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueQcStatus::release_is_top() {
  // @@protoc_insertion_point(field_release:common.UniqueQcStatus.is_top)
  
  return is_top_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueQcStatus::set_allocated_is_top(std::string* is_top) {
  if (is_top != nullptr) {
    
  } else {
    
  }
  is_top_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), is_top);
  // @@protoc_insertion_point(field_set_allocated:common.UniqueQcStatus.is_top)
}

// -------------------------------------------------------------------

// QcStatus

// .common.Header header = 1;
inline bool QcStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& QcStatus::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.QcStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* QcStatus::release_header() {
  // @@protoc_insertion_point(field_release:common.QcStatus.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* QcStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.QcStatus.header)
  return header_;
}
inline void QcStatus::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.QcStatus.header)
}

// .google.protobuf.Timestamp updated = 2;
inline bool QcStatus::has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& QcStatus::updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  // @@protoc_insertion_point(field_get:common.QcStatus.updated)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* QcStatus::release_updated() {
  // @@protoc_insertion_point(field_release:common.QcStatus.updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* QcStatus::mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.QcStatus.updated)
  return updated_;
}
inline void QcStatus::set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:common.QcStatus.updated)
}

// repeated .common.UniqueQcStatus qc_status = 3;
inline int QcStatus::qc_status_size() const {
  return qc_status_.size();
}
inline void QcStatus::clear_qc_status() {
  qc_status_.Clear();
}
inline ::common::UniqueQcStatus* QcStatus::mutable_qc_status(int index) {
  // @@protoc_insertion_point(field_mutable:common.QcStatus.qc_status)
  return qc_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::UniqueQcStatus >*
QcStatus::mutable_qc_status() {
  // @@protoc_insertion_point(field_mutable_list:common.QcStatus.qc_status)
  return &qc_status_;
}
inline const ::common::UniqueQcStatus& QcStatus::qc_status(int index) const {
  // @@protoc_insertion_point(field_get:common.QcStatus.qc_status)
  return qc_status_.Get(index);
}
inline ::common::UniqueQcStatus* QcStatus::add_qc_status() {
  // @@protoc_insertion_point(field_add:common.QcStatus.qc_status)
  return qc_status_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::UniqueQcStatus >&
QcStatus::qc_status() const {
  // @@protoc_insertion_point(field_list:common.QcStatus.qc_status)
  return qc_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fqc_5fstatus_2eproto
