// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/act_status.proto

#include "./act_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2ffault_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaultInfo_common_2ffault_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace common {
class ActStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActStatus> _instance;
} _ActStatus_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_ActStatus_common_2fact_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_ActStatus_default_instance_;
    new (ptr) ::common::ActStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::ActStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActStatus_common_2fact_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ActStatus_common_2fact_5fstatus_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Point_common_2fpoint_2eproto.base,
      &scc_info_FaultInfo_common_2ffault_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fact_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fact_5fstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fact_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fact_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, header_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, created_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, updated_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, state_flow_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, task_mode_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, trace_id_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, task_id_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, navi_id_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, target_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, sub_target_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, last_location_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, location_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, next_location_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, is_attendance_tos_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, point_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, yaw_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, estop_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, chassis_total_hour_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, gear_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, is_charging_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, motion_mode_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, drv_direction_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, speed_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, soh_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, soc_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, empty_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, turn_light_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, firm_error_status_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, vehicle_error_status_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, faults_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, technical_status_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, mileage_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, operational_status_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, hinge_angle_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, distance_to_target_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, offset_l_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, offset_t_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, offset_yaw_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, in_high_voltage_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, host_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, port_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, task_type_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, crane_id_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, act_type_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, rt_speed_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, frame_ts_),
  PROTOBUF_FIELD_OFFSET(::common::ActStatus, trailer_angle_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::ActStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ActStatus_default_instance_),
};

const char descriptor_table_protodef_common_2fact_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027common/act_status.proto\022\006common\032\022commo"
  "n/point.proto\032\022common/enums.proto\032\023commo"
  "n/header.proto\032\027common/fault_info.proto\032"
  "\037google/protobuf/timestamp.proto\"\316\t\n\tAct"
  "Status\022\036\n\006header\030\001 \001(\0132\016.common.Header\022+"
  "\n\007created\030\002 \001(\0132\032.google.protobuf.Timest"
  "amp\022+\n\007updated\030\003 \001(\0132\032.google.protobuf.T"
  "imestamp\022%\n\nstate_flow\030\004 \001(\0162\021.common.St"
  "ateFlow\022#\n\ttask_mode\030\005 \001(\0162\020.common.Task"
  "Mode\022\020\n\010trace_id\030\006 \001(\t\022\017\n\007task_id\030\007 \001(\t\022"
  "\017\n\007navi_id\030\010 \001(\t\022\016\n\006target\030\t \001(\t\022\022\n\nsub_"
  "target\030\n \001(\t\022\025\n\rlast_location\030\013 \001(\t\022\020\n\010l"
  "ocation\030\014 \001(\t\022\025\n\rnext_location\030\r \001(\t\022\031\n\021"
  "is_attendance_tos\030\016 \001(\010\022\034\n\005point\030\017 \001(\0132\r"
  ".common.Point\022\013\n\003yaw\030\020 \001(\001\022\r\n\005estop\030\021 \001("
  "\010\022\032\n\022chassis_total_hour\030\022 \001(\005\022\032\n\004gear\030\023 "
  "\001(\0162\014.common.Gear\022\023\n\013is_charging\030\024 \001(\010\022)"
  "\n\013motion_mode\030\025 \001(\0162\024.common.SteeringMod"
  "e\022-\n\rdrv_direction\030\026 \001(\0162\026.common.DriveD"
  "irection\022\r\n\005speed\030\027 \001(\002\022\013\n\003soh\030\030 \001(\005\022\013\n\003"
  "soc\030\031 \001(\005\022\r\n\005empty\030\032 \001(\010\022%\n\nturn_light\030\033"
  " \001(\0162\021.common.TurnLight\022\031\n\021firm_error_st"
  "atus\030\034 \001(\005\022\034\n\024vehicle_error_status\030\035 \001(\005"
  "\022!\n\006faults\030\036 \003(\0132\021.common.FaultInfo\0221\n\020t"
  "echnical_status\030\037 \001(\0162\027.common.Technical"
  "Status\022\017\n\007mileage\030  \001(\002\0225\n\022operational_s"
  "tatus\030! \001(\0162\031.common.OperationalStatus\022\023"
  "\n\013hinge_angle\030\" \001(\002\022\032\n\022distance_to_targe"
  "t\030# \001(\002\022\020\n\010offset_l\030$ \001(\001\022\020\n\010offset_t\030% "
  "\001(\001\022\022\n\noffset_yaw\030& \001(\001\022\027\n\017in_high_volta"
  "ge\030\' \001(\010\022\014\n\004host\030( \001(\t\022\014\n\004port\030) \001(\t\022#\n\t"
  "task_type\030* \001(\0162\020.common.TaskType\022\020\n\010cra"
  "ne_id\030+ \001(\t\022!\n\010act_type\030, \001(\0162\017.common.A"
  "ctType\022\020\n\010rt_speed\030- \001(\002\022\020\n\010frame_ts\030. \001"
  "(\001\022\025\n\rtrailer_angle\030/ \001(\001B\tZ\007/commonb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fact_5fstatus_2eproto_deps[5] = {
  &::descriptor_table_common_2fenums_2eproto,
  &::descriptor_table_common_2ffault_5finfo_2eproto,
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_common_2fpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fact_5fstatus_2eproto_sccs[1] = {
  &scc_info_ActStatus_common_2fact_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fact_5fstatus_2eproto_once;
static bool descriptor_table_common_2fact_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fact_5fstatus_2eproto = {
  &descriptor_table_common_2fact_5fstatus_2eproto_initialized, descriptor_table_protodef_common_2fact_5fstatus_2eproto, "common/act_status.proto", 1404,
  &descriptor_table_common_2fact_5fstatus_2eproto_once, descriptor_table_common_2fact_5fstatus_2eproto_sccs, descriptor_table_common_2fact_5fstatus_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_common_2fact_5fstatus_2eproto::offsets,
  file_level_metadata_common_2fact_5fstatus_2eproto, 1, file_level_enum_descriptors_common_2fact_5fstatus_2eproto, file_level_service_descriptors_common_2fact_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fact_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fact_5fstatus_2eproto), true);
namespace common {

// ===================================================================

void ActStatus::InitAsDefaultInstance() {
  ::common::_ActStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::common::_ActStatus_default_instance_._instance.get_mutable()->created_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::common::_ActStatus_default_instance_._instance.get_mutable()->updated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::common::_ActStatus_default_instance_._instance.get_mutable()->point_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
}
class ActStatus::_Internal {
 public:
  static const ::common::Header& header(const ActStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const ActStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated(const ActStatus* msg);
  static const ::common::Point& point(const ActStatus* msg);
};

const ::common::Header&
ActStatus::_Internal::header(const ActStatus* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ActStatus::_Internal::created(const ActStatus* msg) {
  return *msg->created_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ActStatus::_Internal::updated(const ActStatus* msg) {
  return *msg->updated_;
}
const ::common::Point&
ActStatus::_Internal::point(const ActStatus* msg) {
  return *msg->point_;
}
void ActStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ActStatus::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void ActStatus::clear_updated() {
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
void ActStatus::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
void ActStatus::clear_faults() {
  faults_.Clear();
}
ActStatus::ActStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ActStatus)
}
ActStatus::ActStatus(const ActStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      faults_(from.faults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trace_id().empty()) {
    trace_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  navi_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.navi_id().empty()) {
    navi_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.navi_id_);
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_target().empty()) {
    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  last_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.last_location().empty()) {
    last_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_location_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.location().empty()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  next_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.next_location().empty()) {
    next_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_location_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.port().empty()) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.crane_id().empty()) {
    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from.has_updated()) {
    updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  if (from.has_point()) {
    point_ = new ::common::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&state_flow_, &from.state_flow_,
    static_cast<size_t>(reinterpret_cast<char*>(&trailer_angle_) -
    reinterpret_cast<char*>(&state_flow_)) + sizeof(trailer_angle_));
  // @@protoc_insertion_point(copy_constructor:common.ActStatus)
}

void ActStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActStatus_common_2fact_5fstatus_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailer_angle_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trailer_angle_));
}

ActStatus::~ActStatus() {
  // @@protoc_insertion_point(destructor:common.ActStatus)
  SharedDtor();
}

void ActStatus::SharedDtor() {
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete updated_;
  if (this != internal_default_instance()) delete point_;
}

void ActStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActStatus& ActStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActStatus_common_2fact_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ActStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ActStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faults_.Clear();
  trace_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  ::memset(&state_flow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailer_angle_) -
      reinterpret_cast<char*>(&state_flow_)) + sizeof(trailer_angle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.StateFlow state_flow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state_flow(static_cast<::common::StateFlow>(val));
        } else goto handle_unusual;
        continue;
      // .common.TaskMode task_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_task_mode(static_cast<::common::TaskMode>(val));
        } else goto handle_unusual;
        continue;
      // string trace_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trace_id(), ptr, ctx, "common.ActStatus.trace_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "common.ActStatus.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string navi_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_navi_id(), ptr, ctx, "common.ActStatus.navi_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_target(), ptr, ctx, "common.ActStatus.target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_target = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_target(), ptr, ctx, "common.ActStatus.sub_target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_location = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_last_location(), ptr, ctx, "common.ActStatus.last_location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_location(), ptr, ctx, "common.ActStatus.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_location = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_next_location(), ptr, ctx, "common.ActStatus.next_location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_attendance_tos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_attendance_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point point = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double yaw = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool estop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chassis_total_hour = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          chassis_total_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Gear gear = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gear(static_cast<::common::Gear>(val));
        } else goto handle_unusual;
        continue;
      // bool is_charging = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.SteeringMode motion_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_motion_mode(static_cast<::common::SteeringMode>(val));
        } else goto handle_unusual;
        continue;
      // .common.DriveDirection drv_direction = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_drv_direction(static_cast<::common::DriveDirection>(val));
        } else goto handle_unusual;
        continue;
      // float speed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 soh = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          soh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 soc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          soc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool empty = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TurnLight turn_light = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_turn_light(static_cast<::common::TurnLight>(val));
        } else goto handle_unusual;
        continue;
      // int32 firm_error_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          firm_error_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_error_status = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          vehicle_error_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.FaultInfo faults = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_faults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // .common.TechnicalStatus technical_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_technical_status(static_cast<::common::TechnicalStatus>(val));
        } else goto handle_unusual;
        continue;
      // float mileage = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .common.OperationalStatus operational_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_operational_status(static_cast<::common::OperationalStatus>(val));
        } else goto handle_unusual;
        continue;
      // float hinge_angle = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hinge_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance_to_target = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          distance_to_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double offset_l = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          offset_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset_t = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          offset_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset_yaw = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          offset_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool in_high_voltage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          in_high_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_host(), ptr, ctx, "common.ActStatus.host");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_port(), ptr, ctx, "common.ActStatus.port");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TaskType task_type = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_task_type(static_cast<::common::TaskType>(val));
        } else goto handle_unusual;
        continue;
      // string crane_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crane_id(), ptr, ctx, "common.ActStatus.crane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ActType act_type = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_act_type(static_cast<::common::ActType>(val));
        } else goto handle_unusual;
        continue;
      // float rt_speed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          rt_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double frame_ts = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          frame_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double trailer_angle = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          trailer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ActStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.StateFlow state_flow = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state_flow(static_cast< ::common::StateFlow >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TaskMode task_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_mode(static_cast< ::common::TaskMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), static_cast<int>(this->trace_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string navi_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_navi_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->navi_id().data(), static_cast<int>(this->navi_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.navi_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_target = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_target().data(), static_cast<int>(this->sub_target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.sub_target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_location = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->last_location().data(), static_cast<int>(this->last_location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.last_location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_location = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_next_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->next_location().data(), static_cast<int>(this->next_location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.next_location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attendance_tos = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attendance_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point point = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool estop = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chassis_total_hour = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_total_hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Gear gear = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::common::Gear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_charging = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_charging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.SteeringMode motion_mode = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_mode(static_cast< ::common::SteeringMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.DriveDirection drv_direction = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drv_direction(static_cast< ::common::DriveDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soh = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &soh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soc = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &soc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool empty = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TurnLight turn_light = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_light(static_cast< ::common::TurnLight >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 firm_error_status = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &firm_error_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicle_error_status = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_error_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.FaultInfo faults = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_faults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TechnicalStatus technical_status = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_technical_status(static_cast< ::common::TechnicalStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mileage = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (261 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.OperationalStatus operational_status = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operational_status(static_cast< ::common::OperationalStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hinge_angle = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (277 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hinge_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance_to_target = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (285 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_to_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset_l = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (289 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset_t = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (297 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset_yaw = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (305 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_high_voltage = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_high_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TaskType task_type = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_type(static_cast< ::common::TaskType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crane_id = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crane_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crane_id().data(), static_cast<int>(this->crane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ActStatus.crane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.ActType act_type = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_act_type(static_cast< ::common::ActType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rt_speed = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (365 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rt_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frame_ts = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (369 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frame_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trailer_angle = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (377 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trailer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ActStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ActStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ActStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::created(this), output);
  }

  // .google.protobuf.Timestamp updated = 3;
  if (this->has_updated()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::updated(this), output);
  }

  // .common.StateFlow state_flow = 4;
  if (this->state_flow() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->state_flow(), output);
  }

  // .common.TaskMode task_mode = 5;
  if (this->task_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->task_mode(), output);
  }

  // string trace_id = 6;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), static_cast<int>(this->trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.trace_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trace_id(), output);
  }

  // string task_id = 7;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->task_id(), output);
  }

  // string navi_id = 8;
  if (this->navi_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->navi_id().data(), static_cast<int>(this->navi_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.navi_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->navi_id(), output);
  }

  // string target = 9;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->target(), output);
  }

  // string sub_target = 10;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.sub_target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sub_target(), output);
  }

  // string last_location = 11;
  if (this->last_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_location().data(), static_cast<int>(this->last_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.last_location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->last_location(), output);
  }

  // string location = 12;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->location(), output);
  }

  // string next_location = 13;
  if (this->next_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_location().data(), static_cast<int>(this->next_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.next_location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->next_location(), output);
  }

  // bool is_attendance_tos = 14;
  if (this->is_attendance_tos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->is_attendance_tos(), output);
  }

  // .common.Point point = 15;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::point(this), output);
  }

  // double yaw = 16;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->yaw(), output);
  }

  // bool estop = 17;
  if (this->estop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->estop(), output);
  }

  // int32 chassis_total_hour = 18;
  if (this->chassis_total_hour() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->chassis_total_hour(), output);
  }

  // .common.Gear gear = 19;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->gear(), output);
  }

  // bool is_charging = 20;
  if (this->is_charging() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->is_charging(), output);
  }

  // .common.SteeringMode motion_mode = 21;
  if (this->motion_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->motion_mode(), output);
  }

  // .common.DriveDirection drv_direction = 22;
  if (this->drv_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->drv_direction(), output);
  }

  // float speed = 23;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(23, this->speed(), output);
  }

  // int32 soh = 24;
  if (this->soh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->soh(), output);
  }

  // int32 soc = 25;
  if (this->soc() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->soc(), output);
  }

  // bool empty = 26;
  if (this->empty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->empty(), output);
  }

  // .common.TurnLight turn_light = 27;
  if (this->turn_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->turn_light(), output);
  }

  // int32 firm_error_status = 28;
  if (this->firm_error_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->firm_error_status(), output);
  }

  // int32 vehicle_error_status = 29;
  if (this->vehicle_error_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->vehicle_error_status(), output);
  }

  // repeated .common.FaultInfo faults = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->faults_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30,
      this->faults(static_cast<int>(i)),
      output);
  }

  // .common.TechnicalStatus technical_status = 31;
  if (this->technical_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->technical_status(), output);
  }

  // float mileage = 32;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(32, this->mileage(), output);
  }

  // .common.OperationalStatus operational_status = 33;
  if (this->operational_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      33, this->operational_status(), output);
  }

  // float hinge_angle = 34;
  if (!(this->hinge_angle() <= 0 && this->hinge_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(34, this->hinge_angle(), output);
  }

  // float distance_to_target = 35;
  if (!(this->distance_to_target() <= 0 && this->distance_to_target() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(35, this->distance_to_target(), output);
  }

  // double offset_l = 36;
  if (!(this->offset_l() <= 0 && this->offset_l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(36, this->offset_l(), output);
  }

  // double offset_t = 37;
  if (!(this->offset_t() <= 0 && this->offset_t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(37, this->offset_t(), output);
  }

  // double offset_yaw = 38;
  if (!(this->offset_yaw() <= 0 && this->offset_yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(38, this->offset_yaw(), output);
  }

  // bool in_high_voltage = 39;
  if (this->in_high_voltage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(39, this->in_high_voltage(), output);
  }

  // string host = 40;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.host");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->host(), output);
  }

  // string port = 41;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.port");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->port(), output);
  }

  // .common.TaskType task_type = 42;
  if (this->task_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      42, this->task_type(), output);
  }

  // string crane_id = 43;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.crane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->crane_id(), output);
  }

  // .common.ActType act_type = 44;
  if (this->act_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      44, this->act_type(), output);
  }

  // float rt_speed = 45;
  if (!(this->rt_speed() <= 0 && this->rt_speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(45, this->rt_speed(), output);
  }

  // double frame_ts = 46;
  if (!(this->frame_ts() <= 0 && this->frame_ts() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(46, this->frame_ts(), output);
  }

  // double trailer_angle = 47;
  if (!(this->trailer_angle() <= 0 && this->trailer_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(47, this->trailer_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ActStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ActStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::created(this), target);
  }

  // .google.protobuf.Timestamp updated = 3;
  if (this->has_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::updated(this), target);
  }

  // .common.StateFlow state_flow = 4;
  if (this->state_flow() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->state_flow(), target);
  }

  // .common.TaskMode task_mode = 5;
  if (this->task_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->task_mode(), target);
  }

  // string trace_id = 6;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), static_cast<int>(this->trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.trace_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->trace_id(), target);
  }

  // string task_id = 7;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->task_id(), target);
  }

  // string navi_id = 8;
  if (this->navi_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->navi_id().data(), static_cast<int>(this->navi_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.navi_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->navi_id(), target);
  }

  // string target = 9;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->target(), target);
  }

  // string sub_target = 10;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.sub_target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->sub_target(), target);
  }

  // string last_location = 11;
  if (this->last_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_location().data(), static_cast<int>(this->last_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.last_location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->last_location(), target);
  }

  // string location = 12;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->location(), target);
  }

  // string next_location = 13;
  if (this->next_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_location().data(), static_cast<int>(this->next_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.next_location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->next_location(), target);
  }

  // bool is_attendance_tos = 14;
  if (this->is_attendance_tos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->is_attendance_tos(), target);
  }

  // .common.Point point = 15;
  if (this->has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::point(this), target);
  }

  // double yaw = 16;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->yaw(), target);
  }

  // bool estop = 17;
  if (this->estop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->estop(), target);
  }

  // int32 chassis_total_hour = 18;
  if (this->chassis_total_hour() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->chassis_total_hour(), target);
  }

  // .common.Gear gear = 19;
  if (this->gear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->gear(), target);
  }

  // bool is_charging = 20;
  if (this->is_charging() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->is_charging(), target);
  }

  // .common.SteeringMode motion_mode = 21;
  if (this->motion_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->motion_mode(), target);
  }

  // .common.DriveDirection drv_direction = 22;
  if (this->drv_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->drv_direction(), target);
  }

  // float speed = 23;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->speed(), target);
  }

  // int32 soh = 24;
  if (this->soh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->soh(), target);
  }

  // int32 soc = 25;
  if (this->soc() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->soc(), target);
  }

  // bool empty = 26;
  if (this->empty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->empty(), target);
  }

  // .common.TurnLight turn_light = 27;
  if (this->turn_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->turn_light(), target);
  }

  // int32 firm_error_status = 28;
  if (this->firm_error_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->firm_error_status(), target);
  }

  // int32 vehicle_error_status = 29;
  if (this->vehicle_error_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->vehicle_error_status(), target);
  }

  // repeated .common.FaultInfo faults = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->faults_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->faults(static_cast<int>(i)), target);
  }

  // .common.TechnicalStatus technical_status = 31;
  if (this->technical_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->technical_status(), target);
  }

  // float mileage = 32;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->mileage(), target);
  }

  // .common.OperationalStatus operational_status = 33;
  if (this->operational_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->operational_status(), target);
  }

  // float hinge_angle = 34;
  if (!(this->hinge_angle() <= 0 && this->hinge_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->hinge_angle(), target);
  }

  // float distance_to_target = 35;
  if (!(this->distance_to_target() <= 0 && this->distance_to_target() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->distance_to_target(), target);
  }

  // double offset_l = 36;
  if (!(this->offset_l() <= 0 && this->offset_l() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->offset_l(), target);
  }

  // double offset_t = 37;
  if (!(this->offset_t() <= 0 && this->offset_t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->offset_t(), target);
  }

  // double offset_yaw = 38;
  if (!(this->offset_yaw() <= 0 && this->offset_yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->offset_yaw(), target);
  }

  // bool in_high_voltage = 39;
  if (this->in_high_voltage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->in_high_voltage(), target);
  }

  // string host = 40;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.host");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        40, this->host(), target);
  }

  // string port = 41;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.port");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        41, this->port(), target);
  }

  // .common.TaskType task_type = 42;
  if (this->task_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      42, this->task_type(), target);
  }

  // string crane_id = 43;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ActStatus.crane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        43, this->crane_id(), target);
  }

  // .common.ActType act_type = 44;
  if (this->act_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      44, this->act_type(), target);
  }

  // float rt_speed = 45;
  if (!(this->rt_speed() <= 0 && this->rt_speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->rt_speed(), target);
  }

  // double frame_ts = 46;
  if (!(this->frame_ts() <= 0 && this->frame_ts() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->frame_ts(), target);
  }

  // double trailer_angle = 47;
  if (!(this->trailer_angle() <= 0 && this->trailer_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->trailer_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ActStatus)
  return target;
}

size_t ActStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ActStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.FaultInfo faults = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->faults_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->faults(static_cast<int>(i)));
    }
  }

  // string trace_id = 6;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  // string task_id = 7;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // string navi_id = 8;
  if (this->navi_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->navi_id());
  }

  // string target = 9;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->target());
  }

  // string sub_target = 10;
  if (this->sub_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_target());
  }

  // string last_location = 11;
  if (this->last_location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->last_location());
  }

  // string location = 12;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string next_location = 13;
  if (this->next_location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->next_location());
  }

  // string host = 40;
  if (this->host().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string port = 41;
  if (this->port().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->port());
  }

  // string crane_id = 43;
  if (this->crane_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crane_id());
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp updated = 3;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .common.Point point = 15;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .common.StateFlow state_flow = 4;
  if (this->state_flow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state_flow());
  }

  // .common.TaskMode task_mode = 5;
  if (this->task_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->task_mode());
  }

  // double yaw = 16;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 chassis_total_hour = 18;
  if (this->chassis_total_hour() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->chassis_total_hour());
  }

  // .common.Gear gear = 19;
  if (this->gear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
  }

  // bool is_attendance_tos = 14;
  if (this->is_attendance_tos() != 0) {
    total_size += 1 + 1;
  }

  // bool estop = 17;
  if (this->estop() != 0) {
    total_size += 2 + 1;
  }

  // bool is_charging = 20;
  if (this->is_charging() != 0) {
    total_size += 2 + 1;
  }

  // bool empty = 26;
  if (this->empty() != 0) {
    total_size += 2 + 1;
  }

  // .common.SteeringMode motion_mode = 21;
  if (this->motion_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->motion_mode());
  }

  // .common.DriveDirection drv_direction = 22;
  if (this->drv_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->drv_direction());
  }

  // float speed = 23;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 soh = 24;
  if (this->soh() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->soh());
  }

  // int32 soc = 25;
  if (this->soc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->soc());
  }

  // .common.TurnLight turn_light = 27;
  if (this->turn_light() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->turn_light());
  }

  // int32 firm_error_status = 28;
  if (this->firm_error_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->firm_error_status());
  }

  // int32 vehicle_error_status = 29;
  if (this->vehicle_error_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->vehicle_error_status());
  }

  // .common.TechnicalStatus technical_status = 31;
  if (this->technical_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->technical_status());
  }

  // float mileage = 32;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    total_size += 2 + 4;
  }

  // .common.OperationalStatus operational_status = 33;
  if (this->operational_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operational_status());
  }

  // float hinge_angle = 34;
  if (!(this->hinge_angle() <= 0 && this->hinge_angle() >= 0)) {
    total_size += 2 + 4;
  }

  // float distance_to_target = 35;
  if (!(this->distance_to_target() <= 0 && this->distance_to_target() >= 0)) {
    total_size += 2 + 4;
  }

  // double offset_l = 36;
  if (!(this->offset_l() <= 0 && this->offset_l() >= 0)) {
    total_size += 2 + 8;
  }

  // double offset_t = 37;
  if (!(this->offset_t() <= 0 && this->offset_t() >= 0)) {
    total_size += 2 + 8;
  }

  // double offset_yaw = 38;
  if (!(this->offset_yaw() <= 0 && this->offset_yaw() >= 0)) {
    total_size += 2 + 8;
  }

  // bool in_high_voltage = 39;
  if (this->in_high_voltage() != 0) {
    total_size += 2 + 1;
  }

  // .common.TaskType task_type = 42;
  if (this->task_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->task_type());
  }

  // .common.ActType act_type = 44;
  if (this->act_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->act_type());
  }

  // float rt_speed = 45;
  if (!(this->rt_speed() <= 0 && this->rt_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // double frame_ts = 46;
  if (!(this->frame_ts() <= 0 && this->frame_ts() >= 0)) {
    total_size += 2 + 8;
  }

  // double trailer_angle = 47;
  if (!(this->trailer_angle() <= 0 && this->trailer_angle() >= 0)) {
    total_size += 2 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ActStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ActStatus)
    MergeFrom(*source);
  }
}

void ActStatus::MergeFrom(const ActStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faults_.MergeFrom(from.faults_);
  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.navi_id().size() > 0) {

    navi_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.navi_id_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.sub_target().size() > 0) {

    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  if (from.last_location().size() > 0) {

    last_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_location_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.next_location().size() > 0) {

    next_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_location_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.crane_id().size() > 0) {

    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_created()) {
    mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.created());
  }
  if (from.has_updated()) {
    mutable_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.updated());
  }
  if (from.has_point()) {
    mutable_point()->::common::Point::MergeFrom(from.point());
  }
  if (from.state_flow() != 0) {
    set_state_flow(from.state_flow());
  }
  if (from.task_mode() != 0) {
    set_task_mode(from.task_mode());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
  if (from.chassis_total_hour() != 0) {
    set_chassis_total_hour(from.chassis_total_hour());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.is_attendance_tos() != 0) {
    set_is_attendance_tos(from.is_attendance_tos());
  }
  if (from.estop() != 0) {
    set_estop(from.estop());
  }
  if (from.is_charging() != 0) {
    set_is_charging(from.is_charging());
  }
  if (from.empty() != 0) {
    set_empty(from.empty());
  }
  if (from.motion_mode() != 0) {
    set_motion_mode(from.motion_mode());
  }
  if (from.drv_direction() != 0) {
    set_drv_direction(from.drv_direction());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (from.soh() != 0) {
    set_soh(from.soh());
  }
  if (from.soc() != 0) {
    set_soc(from.soc());
  }
  if (from.turn_light() != 0) {
    set_turn_light(from.turn_light());
  }
  if (from.firm_error_status() != 0) {
    set_firm_error_status(from.firm_error_status());
  }
  if (from.vehicle_error_status() != 0) {
    set_vehicle_error_status(from.vehicle_error_status());
  }
  if (from.technical_status() != 0) {
    set_technical_status(from.technical_status());
  }
  if (!(from.mileage() <= 0 && from.mileage() >= 0)) {
    set_mileage(from.mileage());
  }
  if (from.operational_status() != 0) {
    set_operational_status(from.operational_status());
  }
  if (!(from.hinge_angle() <= 0 && from.hinge_angle() >= 0)) {
    set_hinge_angle(from.hinge_angle());
  }
  if (!(from.distance_to_target() <= 0 && from.distance_to_target() >= 0)) {
    set_distance_to_target(from.distance_to_target());
  }
  if (!(from.offset_l() <= 0 && from.offset_l() >= 0)) {
    set_offset_l(from.offset_l());
  }
  if (!(from.offset_t() <= 0 && from.offset_t() >= 0)) {
    set_offset_t(from.offset_t());
  }
  if (!(from.offset_yaw() <= 0 && from.offset_yaw() >= 0)) {
    set_offset_yaw(from.offset_yaw());
  }
  if (from.in_high_voltage() != 0) {
    set_in_high_voltage(from.in_high_voltage());
  }
  if (from.task_type() != 0) {
    set_task_type(from.task_type());
  }
  if (from.act_type() != 0) {
    set_act_type(from.act_type());
  }
  if (!(from.rt_speed() <= 0 && from.rt_speed() >= 0)) {
    set_rt_speed(from.rt_speed());
  }
  if (!(from.frame_ts() <= 0 && from.frame_ts() >= 0)) {
    set_frame_ts(from.frame_ts());
  }
  if (!(from.trailer_angle() <= 0 && from.trailer_angle() >= 0)) {
    set_trailer_angle(from.trailer_angle());
  }
}

void ActStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActStatus::CopyFrom(const ActStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActStatus::IsInitialized() const {
  return true;
}

void ActStatus::InternalSwap(ActStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&faults_)->InternalSwap(CastToBase(&other->faults_));
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  navi_id_.Swap(&other->navi_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_target_.Swap(&other->sub_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_location_.Swap(&other->last_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_location_.Swap(&other->next_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crane_id_.Swap(&other->crane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(created_, other->created_);
  swap(updated_, other->updated_);
  swap(point_, other->point_);
  swap(state_flow_, other->state_flow_);
  swap(task_mode_, other->task_mode_);
  swap(yaw_, other->yaw_);
  swap(chassis_total_hour_, other->chassis_total_hour_);
  swap(gear_, other->gear_);
  swap(is_attendance_tos_, other->is_attendance_tos_);
  swap(estop_, other->estop_);
  swap(is_charging_, other->is_charging_);
  swap(empty_, other->empty_);
  swap(motion_mode_, other->motion_mode_);
  swap(drv_direction_, other->drv_direction_);
  swap(speed_, other->speed_);
  swap(soh_, other->soh_);
  swap(soc_, other->soc_);
  swap(turn_light_, other->turn_light_);
  swap(firm_error_status_, other->firm_error_status_);
  swap(vehicle_error_status_, other->vehicle_error_status_);
  swap(technical_status_, other->technical_status_);
  swap(mileage_, other->mileage_);
  swap(operational_status_, other->operational_status_);
  swap(hinge_angle_, other->hinge_angle_);
  swap(distance_to_target_, other->distance_to_target_);
  swap(offset_l_, other->offset_l_);
  swap(offset_t_, other->offset_t_);
  swap(offset_yaw_, other->offset_yaw_);
  swap(in_high_voltage_, other->in_high_voltage_);
  swap(task_type_, other->task_type_);
  swap(act_type_, other->act_type_);
  swap(rt_speed_, other->rt_speed_);
  swap(frame_ts_, other->frame_ts_);
  swap(trailer_angle_, other->trailer_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ActStatus* Arena::CreateMaybeMessage< ::common::ActStatus >(Arena* arena) {
  return Arena::CreateInternal< ::common::ActStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
