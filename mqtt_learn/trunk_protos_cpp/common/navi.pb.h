// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/navi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fnavi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fnavi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "./enums.pb.h"
#include "./point.pb.h"
#include "./header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fnavi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fnavi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fnavi_2eproto;
namespace common {
class AdvisorySpeeds;
class AdvisorySpeedsDefaultTypeInternal;
extern AdvisorySpeedsDefaultTypeInternal _AdvisorySpeeds_default_instance_;
class Navi;
class NaviDefaultTypeInternal;
extern NaviDefaultTypeInternal _Navi_default_instance_;
class TimeWindow;
class TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
class WayPoint;
class WayPointDefaultTypeInternal;
extern WayPointDefaultTypeInternal _WayPoint_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::AdvisorySpeeds* Arena::CreateMaybeMessage<::common::AdvisorySpeeds>(Arena*);
template<> ::common::Navi* Arena::CreateMaybeMessage<::common::Navi>(Arena*);
template<> ::common::TimeWindow* Arena::CreateMaybeMessage<::common::TimeWindow>(Arena*);
template<> ::common::WayPoint* Arena::CreateMaybeMessage<::common::WayPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class AdvisorySpeeds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.AdvisorySpeeds) */ {
 public:
  AdvisorySpeeds();
  virtual ~AdvisorySpeeds();

  AdvisorySpeeds(const AdvisorySpeeds& from);
  AdvisorySpeeds(AdvisorySpeeds&& from) noexcept
    : AdvisorySpeeds() {
    *this = ::std::move(from);
  }

  inline AdvisorySpeeds& operator=(const AdvisorySpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvisorySpeeds& operator=(AdvisorySpeeds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvisorySpeeds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvisorySpeeds* internal_default_instance() {
    return reinterpret_cast<const AdvisorySpeeds*>(
               &_AdvisorySpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdvisorySpeeds& a, AdvisorySpeeds& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvisorySpeeds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvisorySpeeds* New() const final {
    return CreateMaybeMessage<AdvisorySpeeds>(nullptr);
  }

  AdvisorySpeeds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvisorySpeeds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvisorySpeeds& from);
  void MergeFrom(const AdvisorySpeeds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvisorySpeeds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.AdvisorySpeeds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fnavi_2eproto);
    return ::descriptor_table_common_2fnavi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVmaxFieldNumber = 1,
    kVmaxDevFieldNumber = 2,
  };
  // float vmax = 1;
  void clear_vmax();
  float vmax() const;
  void set_vmax(float value);

  // float vmax_dev = 2;
  void clear_vmax_dev();
  float vmax_dev() const;
  void set_vmax_dev(float value);

  // @@protoc_insertion_point(class_scope:common.AdvisorySpeeds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float vmax_;
  float vmax_dev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fnavi_2eproto;
};
// -------------------------------------------------------------------

class TimeWindow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TimeWindow) */ {
 public:
  TimeWindow();
  virtual ~TimeWindow();

  TimeWindow(const TimeWindow& from);
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeWindow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeWindow* New() const final {
    return CreateMaybeMessage<TimeWindow>(nullptr);
  }

  TimeWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeWindow& from);
  void MergeFrom(const TimeWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TimeWindow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fnavi_2eproto);
    return ::descriptor_table_common_2fnavi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTimeDevFieldNumber = 2,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);

  // int32 time_dev = 2;
  void clear_time_dev();
  ::PROTOBUF_NAMESPACE_ID::int32 time_dev() const;
  void set_time_dev(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:common.TimeWindow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_dev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fnavi_2eproto;
};
// -------------------------------------------------------------------

class WayPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.WayPoint) */ {
 public:
  WayPoint();
  virtual ~WayPoint();

  WayPoint(const WayPoint& from);
  WayPoint(WayPoint&& from) noexcept
    : WayPoint() {
    *this = ::std::move(from);
  }

  inline WayPoint& operator=(const WayPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline WayPoint& operator=(WayPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WayPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WayPoint* internal_default_instance() {
    return reinterpret_cast<const WayPoint*>(
               &_WayPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WayPoint& a, WayPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(WayPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WayPoint* New() const final {
    return CreateMaybeMessage<WayPoint>(nullptr);
  }

  WayPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WayPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WayPoint& from);
  void MergeFrom(const WayPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WayPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.WayPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fnavi_2eproto);
    return ::descriptor_table_common_2fnavi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 7,
    kPosFieldNumber = 1,
    kSpeedsFieldNumber = 3,
    kTimeWindowFieldNumber = 4,
    kHeadingFieldNumber = 2,
    kTypeFieldNumber = 5,
    kDrivingDirectionFieldNumber = 6,
  };
  // string id = 7;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // .common.Point pos = 1;
  bool has_pos() const;
  void clear_pos();
  const ::common::Point& pos() const;
  ::common::Point* release_pos();
  ::common::Point* mutable_pos();
  void set_allocated_pos(::common::Point* pos);

  // .common.AdvisorySpeeds speeds = 3;
  bool has_speeds() const;
  void clear_speeds();
  const ::common::AdvisorySpeeds& speeds() const;
  ::common::AdvisorySpeeds* release_speeds();
  ::common::AdvisorySpeeds* mutable_speeds();
  void set_allocated_speeds(::common::AdvisorySpeeds* speeds);

  // .common.TimeWindow time_window = 4;
  bool has_time_window() const;
  void clear_time_window();
  const ::common::TimeWindow& time_window() const;
  ::common::TimeWindow* release_time_window();
  ::common::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::common::TimeWindow* time_window);

  // double heading = 2;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // .common.PointType type = 5;
  void clear_type();
  ::common::PointType type() const;
  void set_type(::common::PointType value);

  // .common.DriveDirection driving_direction = 6;
  void clear_driving_direction();
  ::common::DriveDirection driving_direction() const;
  void set_driving_direction(::common::DriveDirection value);

  // @@protoc_insertion_point(class_scope:common.WayPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::common::Point* pos_;
  ::common::AdvisorySpeeds* speeds_;
  ::common::TimeWindow* time_window_;
  double heading_;
  int type_;
  int driving_direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fnavi_2eproto;
};
// -------------------------------------------------------------------

class Navi :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Navi) */ {
 public:
  Navi();
  virtual ~Navi();

  Navi(const Navi& from);
  Navi(Navi&& from) noexcept
    : Navi() {
    *this = ::std::move(from);
  }

  inline Navi& operator=(const Navi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navi& operator=(Navi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Navi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Navi* internal_default_instance() {
    return reinterpret_cast<const Navi*>(
               &_Navi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Navi& a, Navi& b) {
    a.Swap(&b);
  }
  inline void Swap(Navi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Navi* New() const final {
    return CreateMaybeMessage<Navi>(nullptr);
  }

  Navi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Navi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Navi& from);
  void MergeFrom(const Navi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Navi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fnavi_2eproto);
    return ::descriptor_table_common_2fnavi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 11,
    kTaskIdFieldNumber = 2,
    kNaviIdFieldNumber = 3,
    kUpVpbFieldNumber = 8,
    kDownVpbFieldNumber = 9,
    kHeaderFieldNumber = 1,
    kSeqNumFieldNumber = 4,
    kRouteDirectionFieldNumber = 5,
    kDestTypeFieldNumber = 6,
    kModeFieldNumber = 7,
    kRouteUpdateFieldNumber = 10,
    kIsFinalNaviFieldNumber = 13,
    kSafeDistanceLevelFieldNumber = 12,
  };
  // repeated .common.WayPoint waypoints = 11;
  int waypoints_size() const;
  void clear_waypoints();
  ::common::WayPoint* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::WayPoint >*
      mutable_waypoints();
  const ::common::WayPoint& waypoints(int index) const;
  ::common::WayPoint* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::WayPoint >&
      waypoints() const;

  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // string navi_id = 3;
  void clear_navi_id();
  const std::string& navi_id() const;
  void set_navi_id(const std::string& value);
  void set_navi_id(std::string&& value);
  void set_navi_id(const char* value);
  void set_navi_id(const char* value, size_t size);
  std::string* mutable_navi_id();
  std::string* release_navi_id();
  void set_allocated_navi_id(std::string* navi_id);

  // string up_vpb = 8;
  void clear_up_vpb();
  const std::string& up_vpb() const;
  void set_up_vpb(const std::string& value);
  void set_up_vpb(std::string&& value);
  void set_up_vpb(const char* value);
  void set_up_vpb(const char* value, size_t size);
  std::string* mutable_up_vpb();
  std::string* release_up_vpb();
  void set_allocated_up_vpb(std::string* up_vpb);

  // string down_vpb = 9;
  void clear_down_vpb();
  const std::string& down_vpb() const;
  void set_down_vpb(const std::string& value);
  void set_down_vpb(std::string&& value);
  void set_down_vpb(const char* value);
  void set_down_vpb(const char* value, size_t size);
  std::string* mutable_down_vpb();
  std::string* release_down_vpb();
  void set_allocated_down_vpb(std::string* down_vpb);

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // uint32 seq_num = 4;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .common.WorkCycleDirection route_direction = 5;
  void clear_route_direction();
  ::common::WorkCycleDirection route_direction() const;
  void set_route_direction(::common::WorkCycleDirection value);

  // .common.DestType dest_type = 6;
  void clear_dest_type();
  ::common::DestType dest_type() const;
  void set_dest_type(::common::DestType value);

  // .common.WayPointsMode mode = 7;
  void clear_mode();
  ::common::WayPointsMode mode() const;
  void set_mode(::common::WayPointsMode value);

  // bool route_update = 10;
  void clear_route_update();
  bool route_update() const;
  void set_route_update(bool value);

  // bool is_final_navi = 13;
  void clear_is_final_navi();
  bool is_final_navi() const;
  void set_is_final_navi(bool value);

  // .common.SafeDistanceLevel safe_distance_level = 12;
  void clear_safe_distance_level();
  ::common::SafeDistanceLevel safe_distance_level() const;
  void set_safe_distance_level(::common::SafeDistanceLevel value);

  // @@protoc_insertion_point(class_scope:common.Navi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::WayPoint > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr navi_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr up_vpb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr down_vpb_;
  ::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_num_;
  int route_direction_;
  int dest_type_;
  int mode_;
  bool route_update_;
  bool is_final_navi_;
  int safe_distance_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fnavi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdvisorySpeeds

// float vmax = 1;
inline void AdvisorySpeeds::clear_vmax() {
  vmax_ = 0;
}
inline float AdvisorySpeeds::vmax() const {
  // @@protoc_insertion_point(field_get:common.AdvisorySpeeds.vmax)
  return vmax_;
}
inline void AdvisorySpeeds::set_vmax(float value) {
  
  vmax_ = value;
  // @@protoc_insertion_point(field_set:common.AdvisorySpeeds.vmax)
}

// float vmax_dev = 2;
inline void AdvisorySpeeds::clear_vmax_dev() {
  vmax_dev_ = 0;
}
inline float AdvisorySpeeds::vmax_dev() const {
  // @@protoc_insertion_point(field_get:common.AdvisorySpeeds.vmax_dev)
  return vmax_dev_;
}
inline void AdvisorySpeeds::set_vmax_dev(float value) {
  
  vmax_dev_ = value;
  // @@protoc_insertion_point(field_set:common.AdvisorySpeeds.vmax_dev)
}

// -------------------------------------------------------------------

// TimeWindow

// .google.protobuf.Timestamp time = 1;
inline bool TimeWindow::has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeWindow::time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:common.TimeWindow.time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::release_time() {
  // @@protoc_insertion_point(field_release:common.TimeWindow.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.TimeWindow.time)
  return time_;
}
inline void TimeWindow::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:common.TimeWindow.time)
}

// int32 time_dev = 2;
inline void TimeWindow::clear_time_dev() {
  time_dev_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeWindow::time_dev() const {
  // @@protoc_insertion_point(field_get:common.TimeWindow.time_dev)
  return time_dev_;
}
inline void TimeWindow::set_time_dev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_dev_ = value;
  // @@protoc_insertion_point(field_set:common.TimeWindow.time_dev)
}

// -------------------------------------------------------------------

// WayPoint

// .common.Point pos = 1;
inline bool WayPoint::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline const ::common::Point& WayPoint::pos() const {
  const ::common::Point* p = pos_;
  // @@protoc_insertion_point(field_get:common.WayPoint.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Point*>(
      &::common::_Point_default_instance_);
}
inline ::common::Point* WayPoint::release_pos() {
  // @@protoc_insertion_point(field_release:common.WayPoint.pos)
  
  ::common::Point* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::common::Point* WayPoint::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Point>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.WayPoint.pos)
  return pos_;
}
inline void WayPoint::set_allocated_pos(::common::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:common.WayPoint.pos)
}

// double heading = 2;
inline void WayPoint::clear_heading() {
  heading_ = 0;
}
inline double WayPoint::heading() const {
  // @@protoc_insertion_point(field_get:common.WayPoint.heading)
  return heading_;
}
inline void WayPoint::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:common.WayPoint.heading)
}

// .common.AdvisorySpeeds speeds = 3;
inline bool WayPoint::has_speeds() const {
  return this != internal_default_instance() && speeds_ != nullptr;
}
inline void WayPoint::clear_speeds() {
  if (GetArenaNoVirtual() == nullptr && speeds_ != nullptr) {
    delete speeds_;
  }
  speeds_ = nullptr;
}
inline const ::common::AdvisorySpeeds& WayPoint::speeds() const {
  const ::common::AdvisorySpeeds* p = speeds_;
  // @@protoc_insertion_point(field_get:common.WayPoint.speeds)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::AdvisorySpeeds*>(
      &::common::_AdvisorySpeeds_default_instance_);
}
inline ::common::AdvisorySpeeds* WayPoint::release_speeds() {
  // @@protoc_insertion_point(field_release:common.WayPoint.speeds)
  
  ::common::AdvisorySpeeds* temp = speeds_;
  speeds_ = nullptr;
  return temp;
}
inline ::common::AdvisorySpeeds* WayPoint::mutable_speeds() {
  
  if (speeds_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::AdvisorySpeeds>(GetArenaNoVirtual());
    speeds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.WayPoint.speeds)
  return speeds_;
}
inline void WayPoint::set_allocated_speeds(::common::AdvisorySpeeds* speeds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speeds_;
  }
  if (speeds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speeds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speeds, submessage_arena);
    }
    
  } else {
    
  }
  speeds_ = speeds;
  // @@protoc_insertion_point(field_set_allocated:common.WayPoint.speeds)
}

// .common.TimeWindow time_window = 4;
inline bool WayPoint::has_time_window() const {
  return this != internal_default_instance() && time_window_ != nullptr;
}
inline void WayPoint::clear_time_window() {
  if (GetArenaNoVirtual() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
}
inline const ::common::TimeWindow& WayPoint::time_window() const {
  const ::common::TimeWindow* p = time_window_;
  // @@protoc_insertion_point(field_get:common.WayPoint.time_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::TimeWindow*>(
      &::common::_TimeWindow_default_instance_);
}
inline ::common::TimeWindow* WayPoint::release_time_window() {
  // @@protoc_insertion_point(field_release:common.WayPoint.time_window)
  
  ::common::TimeWindow* temp = time_window_;
  time_window_ = nullptr;
  return temp;
}
inline ::common::TimeWindow* WayPoint::mutable_time_window() {
  
  if (time_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TimeWindow>(GetArenaNoVirtual());
    time_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.WayPoint.time_window)
  return time_window_;
}
inline void WayPoint::set_allocated_time_window(::common::TimeWindow* time_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_window_;
  }
  if (time_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:common.WayPoint.time_window)
}

// .common.PointType type = 5;
inline void WayPoint::clear_type() {
  type_ = 0;
}
inline ::common::PointType WayPoint::type() const {
  // @@protoc_insertion_point(field_get:common.WayPoint.type)
  return static_cast< ::common::PointType >(type_);
}
inline void WayPoint::set_type(::common::PointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:common.WayPoint.type)
}

// .common.DriveDirection driving_direction = 6;
inline void WayPoint::clear_driving_direction() {
  driving_direction_ = 0;
}
inline ::common::DriveDirection WayPoint::driving_direction() const {
  // @@protoc_insertion_point(field_get:common.WayPoint.driving_direction)
  return static_cast< ::common::DriveDirection >(driving_direction_);
}
inline void WayPoint::set_driving_direction(::common::DriveDirection value) {
  
  driving_direction_ = value;
  // @@protoc_insertion_point(field_set:common.WayPoint.driving_direction)
}

// string id = 7;
inline void WayPoint::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WayPoint::id() const {
  // @@protoc_insertion_point(field_get:common.WayPoint.id)
  return id_.GetNoArena();
}
inline void WayPoint::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.WayPoint.id)
}
inline void WayPoint::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.WayPoint.id)
}
inline void WayPoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.WayPoint.id)
}
inline void WayPoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.WayPoint.id)
}
inline std::string* WayPoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:common.WayPoint.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WayPoint::release_id() {
  // @@protoc_insertion_point(field_release:common.WayPoint.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WayPoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:common.WayPoint.id)
}

// -------------------------------------------------------------------

// Navi

// .common.Header header = 1;
inline bool Navi::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& Navi::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.Navi.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* Navi::release_header() {
  // @@protoc_insertion_point(field_release:common.Navi.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* Navi::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Navi.header)
  return header_;
}
inline void Navi::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.Navi.header)
}

// string task_id = 2;
inline void Navi::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Navi::task_id() const {
  // @@protoc_insertion_point(field_get:common.Navi.task_id)
  return task_id_.GetNoArena();
}
inline void Navi::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Navi.task_id)
}
inline void Navi::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Navi.task_id)
}
inline void Navi::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Navi.task_id)
}
inline void Navi::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Navi.task_id)
}
inline std::string* Navi::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Navi.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Navi::release_task_id() {
  // @@protoc_insertion_point(field_release:common.Navi.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Navi::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:common.Navi.task_id)
}

// string navi_id = 3;
inline void Navi::clear_navi_id() {
  navi_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Navi::navi_id() const {
  // @@protoc_insertion_point(field_get:common.Navi.navi_id)
  return navi_id_.GetNoArena();
}
inline void Navi::set_navi_id(const std::string& value) {
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Navi.navi_id)
}
inline void Navi::set_navi_id(std::string&& value) {
  
  navi_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Navi.navi_id)
}
inline void Navi::set_navi_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Navi.navi_id)
}
inline void Navi::set_navi_id(const char* value, size_t size) {
  
  navi_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Navi.navi_id)
}
inline std::string* Navi::mutable_navi_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Navi.navi_id)
  return navi_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Navi::release_navi_id() {
  // @@protoc_insertion_point(field_release:common.Navi.navi_id)
  
  return navi_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Navi::set_allocated_navi_id(std::string* navi_id) {
  if (navi_id != nullptr) {
    
  } else {
    
  }
  navi_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), navi_id);
  // @@protoc_insertion_point(field_set_allocated:common.Navi.navi_id)
}

// uint32 seq_num = 4;
inline void Navi::clear_seq_num() {
  seq_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Navi::seq_num() const {
  // @@protoc_insertion_point(field_get:common.Navi.seq_num)
  return seq_num_;
}
inline void Navi::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.seq_num)
}

// .common.WorkCycleDirection route_direction = 5;
inline void Navi::clear_route_direction() {
  route_direction_ = 0;
}
inline ::common::WorkCycleDirection Navi::route_direction() const {
  // @@protoc_insertion_point(field_get:common.Navi.route_direction)
  return static_cast< ::common::WorkCycleDirection >(route_direction_);
}
inline void Navi::set_route_direction(::common::WorkCycleDirection value) {
  
  route_direction_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.route_direction)
}

// .common.DestType dest_type = 6;
inline void Navi::clear_dest_type() {
  dest_type_ = 0;
}
inline ::common::DestType Navi::dest_type() const {
  // @@protoc_insertion_point(field_get:common.Navi.dest_type)
  return static_cast< ::common::DestType >(dest_type_);
}
inline void Navi::set_dest_type(::common::DestType value) {
  
  dest_type_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.dest_type)
}

// .common.WayPointsMode mode = 7;
inline void Navi::clear_mode() {
  mode_ = 0;
}
inline ::common::WayPointsMode Navi::mode() const {
  // @@protoc_insertion_point(field_get:common.Navi.mode)
  return static_cast< ::common::WayPointsMode >(mode_);
}
inline void Navi::set_mode(::common::WayPointsMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.mode)
}

// string up_vpb = 8;
inline void Navi::clear_up_vpb() {
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Navi::up_vpb() const {
  // @@protoc_insertion_point(field_get:common.Navi.up_vpb)
  return up_vpb_.GetNoArena();
}
inline void Navi::set_up_vpb(const std::string& value) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Navi.up_vpb)
}
inline void Navi::set_up_vpb(std::string&& value) {
  
  up_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Navi.up_vpb)
}
inline void Navi::set_up_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Navi.up_vpb)
}
inline void Navi::set_up_vpb(const char* value, size_t size) {
  
  up_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Navi.up_vpb)
}
inline std::string* Navi::mutable_up_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.Navi.up_vpb)
  return up_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Navi::release_up_vpb() {
  // @@protoc_insertion_point(field_release:common.Navi.up_vpb)
  
  return up_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Navi::set_allocated_up_vpb(std::string* up_vpb) {
  if (up_vpb != nullptr) {
    
  } else {
    
  }
  up_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), up_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.Navi.up_vpb)
}

// string down_vpb = 9;
inline void Navi::clear_down_vpb() {
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Navi::down_vpb() const {
  // @@protoc_insertion_point(field_get:common.Navi.down_vpb)
  return down_vpb_.GetNoArena();
}
inline void Navi::set_down_vpb(const std::string& value) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Navi.down_vpb)
}
inline void Navi::set_down_vpb(std::string&& value) {
  
  down_vpb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Navi.down_vpb)
}
inline void Navi::set_down_vpb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Navi.down_vpb)
}
inline void Navi::set_down_vpb(const char* value, size_t size) {
  
  down_vpb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Navi.down_vpb)
}
inline std::string* Navi::mutable_down_vpb() {
  
  // @@protoc_insertion_point(field_mutable:common.Navi.down_vpb)
  return down_vpb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Navi::release_down_vpb() {
  // @@protoc_insertion_point(field_release:common.Navi.down_vpb)
  
  return down_vpb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Navi::set_allocated_down_vpb(std::string* down_vpb) {
  if (down_vpb != nullptr) {
    
  } else {
    
  }
  down_vpb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), down_vpb);
  // @@protoc_insertion_point(field_set_allocated:common.Navi.down_vpb)
}

// bool route_update = 10;
inline void Navi::clear_route_update() {
  route_update_ = false;
}
inline bool Navi::route_update() const {
  // @@protoc_insertion_point(field_get:common.Navi.route_update)
  return route_update_;
}
inline void Navi::set_route_update(bool value) {
  
  route_update_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.route_update)
}

// repeated .common.WayPoint waypoints = 11;
inline int Navi::waypoints_size() const {
  return waypoints_.size();
}
inline void Navi::clear_waypoints() {
  waypoints_.Clear();
}
inline ::common::WayPoint* Navi::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:common.Navi.waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::WayPoint >*
Navi::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:common.Navi.waypoints)
  return &waypoints_;
}
inline const ::common::WayPoint& Navi::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:common.Navi.waypoints)
  return waypoints_.Get(index);
}
inline ::common::WayPoint* Navi::add_waypoints() {
  // @@protoc_insertion_point(field_add:common.Navi.waypoints)
  return waypoints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::WayPoint >&
Navi::waypoints() const {
  // @@protoc_insertion_point(field_list:common.Navi.waypoints)
  return waypoints_;
}

// .common.SafeDistanceLevel safe_distance_level = 12;
inline void Navi::clear_safe_distance_level() {
  safe_distance_level_ = 0;
}
inline ::common::SafeDistanceLevel Navi::safe_distance_level() const {
  // @@protoc_insertion_point(field_get:common.Navi.safe_distance_level)
  return static_cast< ::common::SafeDistanceLevel >(safe_distance_level_);
}
inline void Navi::set_safe_distance_level(::common::SafeDistanceLevel value) {
  
  safe_distance_level_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.safe_distance_level)
}

// bool is_final_navi = 13;
inline void Navi::clear_is_final_navi() {
  is_final_navi_ = false;
}
inline bool Navi::is_final_navi() const {
  // @@protoc_insertion_point(field_get:common.Navi.is_final_navi)
  return is_final_navi_;
}
inline void Navi::set_is_final_navi(bool value) {
  
  is_final_navi_ = value;
  // @@protoc_insertion_point(field_set:common.Navi.is_final_navi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fnavi_2eproto
