// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/align.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2falign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2falign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "./enums.pb.h"
#include "./header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2falign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2falign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2falign_2eproto;
namespace common {
class Align;
class AlignDefaultTypeInternal;
extern AlignDefaultTypeInternal _Align_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::Align* Arena::CreateMaybeMessage<::common::Align>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class Align :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Align) */ {
 public:
  Align();
  virtual ~Align();

  Align(const Align& from);
  Align(Align&& from) noexcept
    : Align() {
    *this = ::std::move(from);
  }

  inline Align& operator=(const Align& from) {
    CopyFrom(from);
    return *this;
  }
  inline Align& operator=(Align&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Align& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Align* internal_default_instance() {
    return reinterpret_cast<const Align*>(
               &_Align_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Align& a, Align& b) {
    a.Swap(&b);
  }
  inline void Swap(Align* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Align* New() const final {
    return CreateMaybeMessage<Align>(nullptr);
  }

  Align* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Align>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Align& from);
  void MergeFrom(const Align& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Align* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Align";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2falign_2eproto);
    return ::descriptor_table_common_2falign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 3,
    kCraneIdFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kCreatedFieldNumber = 2,
    kOffsetFieldNumber = 5,
    kInpositionTypeFieldNumber = 6,
    kCpsOffsetFieldNumber = 7,
    kDestTypeFieldNumber = 8,
  };
  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // string crane_id = 4;
  void clear_crane_id();
  const std::string& crane_id() const;
  void set_crane_id(const std::string& value);
  void set_crane_id(std::string&& value);
  void set_crane_id(const char* value);
  void set_crane_id(const char* value, size_t size);
  std::string* mutable_crane_id();
  std::string* release_crane_id();
  void set_allocated_crane_id(std::string* crane_id);

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // .google.protobuf.Timestamp created = 2;
  bool has_created() const;
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);

  // float offset = 5;
  void clear_offset();
  float offset() const;
  void set_offset(float value);

  // .common.InpositionType inposition_type = 6;
  void clear_inposition_type();
  ::common::InpositionType inposition_type() const;
  void set_inposition_type(::common::InpositionType value);

  // float cps_offset = 7;
  void clear_cps_offset();
  float cps_offset() const;
  void set_cps_offset(float value);

  // .common.DestType dest_type = 8;
  void clear_dest_type();
  ::common::DestType dest_type() const;
  void set_dest_type(::common::DestType value);

  // @@protoc_insertion_point(class_scope:common.Align)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crane_id_;
  ::common::Header* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  float offset_;
  int inposition_type_;
  float cps_offset_;
  int dest_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2falign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Align

// .common.Header header = 1;
inline bool Align::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& Align::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.Align.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* Align::release_header() {
  // @@protoc_insertion_point(field_release:common.Align.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* Align::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Align.header)
  return header_;
}
inline void Align::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.Align.header)
}

// .google.protobuf.Timestamp created = 2;
inline bool Align::has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Align::created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:common.Align.created)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Align::release_created() {
  // @@protoc_insertion_point(field_release:common.Align.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Align::mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.Align.created)
  return created_;
}
inline void Align::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:common.Align.created)
}

// string task_id = 3;
inline void Align::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Align::task_id() const {
  // @@protoc_insertion_point(field_get:common.Align.task_id)
  return task_id_.GetNoArena();
}
inline void Align::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Align.task_id)
}
inline void Align::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Align.task_id)
}
inline void Align::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Align.task_id)
}
inline void Align::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Align.task_id)
}
inline std::string* Align::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Align.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Align::release_task_id() {
  // @@protoc_insertion_point(field_release:common.Align.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Align::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:common.Align.task_id)
}

// string crane_id = 4;
inline void Align::clear_crane_id() {
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Align::crane_id() const {
  // @@protoc_insertion_point(field_get:common.Align.crane_id)
  return crane_id_.GetNoArena();
}
inline void Align::set_crane_id(const std::string& value) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Align.crane_id)
}
inline void Align::set_crane_id(std::string&& value) {
  
  crane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Align.crane_id)
}
inline void Align::set_crane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Align.crane_id)
}
inline void Align::set_crane_id(const char* value, size_t size) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Align.crane_id)
}
inline std::string* Align::mutable_crane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.Align.crane_id)
  return crane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Align::release_crane_id() {
  // @@protoc_insertion_point(field_release:common.Align.crane_id)
  
  return crane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Align::set_allocated_crane_id(std::string* crane_id) {
  if (crane_id != nullptr) {
    
  } else {
    
  }
  crane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crane_id);
  // @@protoc_insertion_point(field_set_allocated:common.Align.crane_id)
}

// float offset = 5;
inline void Align::clear_offset() {
  offset_ = 0;
}
inline float Align::offset() const {
  // @@protoc_insertion_point(field_get:common.Align.offset)
  return offset_;
}
inline void Align::set_offset(float value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:common.Align.offset)
}

// .common.InpositionType inposition_type = 6;
inline void Align::clear_inposition_type() {
  inposition_type_ = 0;
}
inline ::common::InpositionType Align::inposition_type() const {
  // @@protoc_insertion_point(field_get:common.Align.inposition_type)
  return static_cast< ::common::InpositionType >(inposition_type_);
}
inline void Align::set_inposition_type(::common::InpositionType value) {
  
  inposition_type_ = value;
  // @@protoc_insertion_point(field_set:common.Align.inposition_type)
}

// float cps_offset = 7;
inline void Align::clear_cps_offset() {
  cps_offset_ = 0;
}
inline float Align::cps_offset() const {
  // @@protoc_insertion_point(field_get:common.Align.cps_offset)
  return cps_offset_;
}
inline void Align::set_cps_offset(float value) {
  
  cps_offset_ = value;
  // @@protoc_insertion_point(field_set:common.Align.cps_offset)
}

// .common.DestType dest_type = 8;
inline void Align::clear_dest_type() {
  dest_type_ = 0;
}
inline ::common::DestType Align::dest_type() const {
  // @@protoc_insertion_point(field_get:common.Align.dest_type)
  return static_cast< ::common::DestType >(dest_type_);
}
inline void Align::set_dest_type(::common::DestType value) {
  
  dest_type_ = value;
  // @@protoc_insertion_point(field_set:common.Align.dest_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2falign_2eproto
