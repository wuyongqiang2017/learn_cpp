// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/charger_info.proto

#include "./charger_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcharger_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaserVisionData_common_2fcharger_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fpoint_2eproto;
namespace common {
class ChargerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChargerInfo> _instance;
} _ChargerInfo_default_instance_;
class LaserVisionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaserVisionData> _instance;
} _LaserVisionData_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_ChargerInfo_common_2fcharger_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_ChargerInfo_default_instance_;
    new (ptr) ::common::ChargerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::ChargerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChargerInfo_common_2fcharger_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ChargerInfo_common_2fcharger_5finfo_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_LaserVisionData_common_2fcharger_5finfo_2eproto.base,
      &scc_info_Point_common_2fpoint_2eproto.base,}};

static void InitDefaultsscc_info_LaserVisionData_common_2fcharger_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_LaserVisionData_default_instance_;
    new (ptr) ::common::LaserVisionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::LaserVisionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaserVisionData_common_2fcharger_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaserVisionData_common_2fcharger_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fcharger_5finfo_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fcharger_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fcharger_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fcharger_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, header_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, laser_data_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, vision_data_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, sub_laser_msg_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, sub_vision_msg_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, invalid_laser_msg_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, invalid_vision_msg_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, laser_offset_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, vision_offset_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, use_type_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, charger_num_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, offset_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, real_offset_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, pnc_offset_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, standard_value_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, arrived_point_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, align_point_),
  PROTOBUF_FIELD_OFFSET(::common::ChargerInfo, align_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::LaserVisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::LaserVisionData, offset_),
  PROTOBUF_FIELD_OFFSET(::common::LaserVisionData, invalid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::ChargerInfo)},
  { 23, -1, sizeof(::common::LaserVisionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ChargerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_LaserVisionData_default_instance_),
};

const char descriptor_table_protodef_common_2fcharger_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031common/charger_info.proto\022\006common\032\023com"
  "mon/header.proto\032\022common/point.proto\"\205\004\n"
  "\013ChargerInfo\022\036\n\006header\030\001 \001(\0132\016.common.He"
  "ader\022+\n\nlaser_data\030\002 \003(\0132\027.common.LaserV"
  "isionData\022,\n\013vision_data\030\003 \003(\0132\027.common."
  "LaserVisionData\022\025\n\rsub_laser_msg\030\004 \001(\010\022\026"
  "\n\016sub_vision_msg\030\005 \001(\010\022\031\n\021invalid_laser_"
  "msg\030\006 \001(\010\022\032\n\022invalid_vision_msg\030\007 \001(\010\022\024\n"
  "\014laser_offset\030\010 \001(\002\022\025\n\rvision_offset\030\t \001"
  "(\002\022!\n\010use_type\030\n \001(\0162\017.common.UseType\022\023\n"
  "\013charger_num\030\013 \001(\t\022\016\n\006offset\030\014 \001(\002\022\023\n\013re"
  "al_offset\030\r \001(\002\022\022\n\npnc_offset\030\016 \001(\002\022\026\n\016s"
  "tandard_value\030\017 \001(\002\022$\n\rarrived_point\030\020 \001"
  "(\0132\r.common.Point\022\"\n\013align_point\030\021 \001(\0132\r"
  ".common.Point\022\025\n\ralign_timeout\030\022 \001(\010\"2\n\017"
  "LaserVisionData\022\016\n\006offset\030\001 \001(\002\022\017\n\007inval"
  "id\030\002 \001(\010* \n\007UseType\022\t\n\005LASER\020\000\022\n\n\006VISION"
  "\020\001B\tZ\007/commonb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fcharger_5finfo_2eproto_deps[2] = {
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_common_2fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fcharger_5finfo_2eproto_sccs[2] = {
  &scc_info_ChargerInfo_common_2fcharger_5finfo_2eproto.base,
  &scc_info_LaserVisionData_common_2fcharger_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fcharger_5finfo_2eproto_once;
static bool descriptor_table_common_2fcharger_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcharger_5finfo_2eproto = {
  &descriptor_table_common_2fcharger_5finfo_2eproto_initialized, descriptor_table_protodef_common_2fcharger_5finfo_2eproto, "common/charger_info.proto", 701,
  &descriptor_table_common_2fcharger_5finfo_2eproto_once, descriptor_table_common_2fcharger_5finfo_2eproto_sccs, descriptor_table_common_2fcharger_5finfo_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_common_2fcharger_5finfo_2eproto::offsets,
  file_level_metadata_common_2fcharger_5finfo_2eproto, 2, file_level_enum_descriptors_common_2fcharger_5finfo_2eproto, file_level_service_descriptors_common_2fcharger_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fcharger_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fcharger_5finfo_2eproto), true);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcharger_5finfo_2eproto);
  return file_level_enum_descriptors_common_2fcharger_5finfo_2eproto[0];
}
bool UseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ChargerInfo::InitAsDefaultInstance() {
  ::common::_ChargerInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::common::_ChargerInfo_default_instance_._instance.get_mutable()->arrived_point_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_ChargerInfo_default_instance_._instance.get_mutable()->align_point_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
}
class ChargerInfo::_Internal {
 public:
  static const ::common::Header& header(const ChargerInfo* msg);
  static const ::common::Point& arrived_point(const ChargerInfo* msg);
  static const ::common::Point& align_point(const ChargerInfo* msg);
};

const ::common::Header&
ChargerInfo::_Internal::header(const ChargerInfo* msg) {
  return *msg->header_;
}
const ::common::Point&
ChargerInfo::_Internal::arrived_point(const ChargerInfo* msg) {
  return *msg->arrived_point_;
}
const ::common::Point&
ChargerInfo::_Internal::align_point(const ChargerInfo* msg) {
  return *msg->align_point_;
}
void ChargerInfo::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ChargerInfo::clear_arrived_point() {
  if (GetArenaNoVirtual() == nullptr && arrived_point_ != nullptr) {
    delete arrived_point_;
  }
  arrived_point_ = nullptr;
}
void ChargerInfo::clear_align_point() {
  if (GetArenaNoVirtual() == nullptr && align_point_ != nullptr) {
    delete align_point_;
  }
  align_point_ = nullptr;
}
ChargerInfo::ChargerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ChargerInfo)
}
ChargerInfo::ChargerInfo(const ChargerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      laser_data_(from.laser_data_),
      vision_data_(from.vision_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charger_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.charger_num().empty()) {
    charger_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charger_num_);
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_arrived_point()) {
    arrived_point_ = new ::common::Point(*from.arrived_point_);
  } else {
    arrived_point_ = nullptr;
  }
  if (from.has_align_point()) {
    align_point_ = new ::common::Point(*from.align_point_);
  } else {
    align_point_ = nullptr;
  }
  ::memcpy(&sub_laser_msg_, &from.sub_laser_msg_,
    static_cast<size_t>(reinterpret_cast<char*>(&align_timeout_) -
    reinterpret_cast<char*>(&sub_laser_msg_)) + sizeof(align_timeout_));
  // @@protoc_insertion_point(copy_constructor:common.ChargerInfo)
}

void ChargerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChargerInfo_common_2fcharger_5finfo_2eproto.base);
  charger_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&align_timeout_) -
      reinterpret_cast<char*>(&header_)) + sizeof(align_timeout_));
}

ChargerInfo::~ChargerInfo() {
  // @@protoc_insertion_point(destructor:common.ChargerInfo)
  SharedDtor();
}

void ChargerInfo::SharedDtor() {
  charger_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete arrived_point_;
  if (this != internal_default_instance()) delete align_point_;
}

void ChargerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChargerInfo& ChargerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChargerInfo_common_2fcharger_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ChargerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChargerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laser_data_.Clear();
  vision_data_.Clear();
  charger_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && arrived_point_ != nullptr) {
    delete arrived_point_;
  }
  arrived_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && align_point_ != nullptr) {
    delete align_point_;
  }
  align_point_ = nullptr;
  ::memset(&sub_laser_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&align_timeout_) -
      reinterpret_cast<char*>(&sub_laser_msg_)) + sizeof(align_timeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChargerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.LaserVisionData laser_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_laser_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .common.LaserVisionData vision_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vision_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // bool sub_laser_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sub_laser_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sub_vision_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sub_vision_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invalid_laser_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          invalid_laser_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invalid_vision_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          invalid_vision_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float laser_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          laser_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vision_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          vision_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .common.UseType use_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_use_type(static_cast<::common::UseType>(val));
        } else goto handle_unusual;
        continue;
      // string charger_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_charger_num(), ptr, ctx, "common.ChargerInfo.charger_num");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float real_offset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          real_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pnc_offset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          pnc_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float standard_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          standard_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .common.Point arrived_point = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_arrived_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point align_point = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_align_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool align_timeout = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          align_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChargerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ChargerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.LaserVisionData laser_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_laser_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.LaserVisionData vision_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vision_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sub_laser_msg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_laser_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sub_vision_msg = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_vision_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invalid_laser_msg = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalid_laser_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invalid_vision_msg = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalid_vision_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float laser_offset = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_offset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.UseType use_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_use_type(static_cast< ::common::UseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string charger_num = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_charger_num()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->charger_num().data(), static_cast<int>(this->charger_num().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ChargerInfo.charger_num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float real_offset = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pnc_offset = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pnc_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float standard_value = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &standard_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point arrived_point = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arrived_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point align_point = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_align_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool align_timeout = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &align_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ChargerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ChargerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChargerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ChargerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .common.LaserVisionData laser_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->laser_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->laser_data(static_cast<int>(i)),
      output);
  }

  // repeated .common.LaserVisionData vision_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->vision_data(static_cast<int>(i)),
      output);
  }

  // bool sub_laser_msg = 4;
  if (this->sub_laser_msg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->sub_laser_msg(), output);
  }

  // bool sub_vision_msg = 5;
  if (this->sub_vision_msg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->sub_vision_msg(), output);
  }

  // bool invalid_laser_msg = 6;
  if (this->invalid_laser_msg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->invalid_laser_msg(), output);
  }

  // bool invalid_vision_msg = 7;
  if (this->invalid_vision_msg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->invalid_vision_msg(), output);
  }

  // float laser_offset = 8;
  if (!(this->laser_offset() <= 0 && this->laser_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->laser_offset(), output);
  }

  // float vision_offset = 9;
  if (!(this->vision_offset() <= 0 && this->vision_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->vision_offset(), output);
  }

  // .common.UseType use_type = 10;
  if (this->use_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->use_type(), output);
  }

  // string charger_num = 11;
  if (this->charger_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->charger_num().data(), static_cast<int>(this->charger_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ChargerInfo.charger_num");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->charger_num(), output);
  }

  // float offset = 12;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->offset(), output);
  }

  // float real_offset = 13;
  if (!(this->real_offset() <= 0 && this->real_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->real_offset(), output);
  }

  // float pnc_offset = 14;
  if (!(this->pnc_offset() <= 0 && this->pnc_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->pnc_offset(), output);
  }

  // float standard_value = 15;
  if (!(this->standard_value() <= 0 && this->standard_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->standard_value(), output);
  }

  // .common.Point arrived_point = 16;
  if (this->has_arrived_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::arrived_point(this), output);
  }

  // .common.Point align_point = 17;
  if (this->has_align_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::align_point(this), output);
  }

  // bool align_timeout = 18;
  if (this->align_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->align_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ChargerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChargerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChargerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .common.LaserVisionData laser_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->laser_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->laser_data(static_cast<int>(i)), target);
  }

  // repeated .common.LaserVisionData vision_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->vision_data(static_cast<int>(i)), target);
  }

  // bool sub_laser_msg = 4;
  if (this->sub_laser_msg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->sub_laser_msg(), target);
  }

  // bool sub_vision_msg = 5;
  if (this->sub_vision_msg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->sub_vision_msg(), target);
  }

  // bool invalid_laser_msg = 6;
  if (this->invalid_laser_msg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->invalid_laser_msg(), target);
  }

  // bool invalid_vision_msg = 7;
  if (this->invalid_vision_msg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->invalid_vision_msg(), target);
  }

  // float laser_offset = 8;
  if (!(this->laser_offset() <= 0 && this->laser_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->laser_offset(), target);
  }

  // float vision_offset = 9;
  if (!(this->vision_offset() <= 0 && this->vision_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->vision_offset(), target);
  }

  // .common.UseType use_type = 10;
  if (this->use_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->use_type(), target);
  }

  // string charger_num = 11;
  if (this->charger_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->charger_num().data(), static_cast<int>(this->charger_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ChargerInfo.charger_num");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->charger_num(), target);
  }

  // float offset = 12;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->offset(), target);
  }

  // float real_offset = 13;
  if (!(this->real_offset() <= 0 && this->real_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->real_offset(), target);
  }

  // float pnc_offset = 14;
  if (!(this->pnc_offset() <= 0 && this->pnc_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->pnc_offset(), target);
  }

  // float standard_value = 15;
  if (!(this->standard_value() <= 0 && this->standard_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->standard_value(), target);
  }

  // .common.Point arrived_point = 16;
  if (this->has_arrived_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::arrived_point(this), target);
  }

  // .common.Point align_point = 17;
  if (this->has_align_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::align_point(this), target);
  }

  // bool align_timeout = 18;
  if (this->align_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->align_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChargerInfo)
  return target;
}

size_t ChargerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChargerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.LaserVisionData laser_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->laser_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->laser_data(static_cast<int>(i)));
    }
  }

  // repeated .common.LaserVisionData vision_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->vision_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vision_data(static_cast<int>(i)));
    }
  }

  // string charger_num = 11;
  if (this->charger_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->charger_num());
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .common.Point arrived_point = 16;
  if (this->has_arrived_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arrived_point_);
  }

  // .common.Point align_point = 17;
  if (this->has_align_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *align_point_);
  }

  // bool sub_laser_msg = 4;
  if (this->sub_laser_msg() != 0) {
    total_size += 1 + 1;
  }

  // bool sub_vision_msg = 5;
  if (this->sub_vision_msg() != 0) {
    total_size += 1 + 1;
  }

  // bool invalid_laser_msg = 6;
  if (this->invalid_laser_msg() != 0) {
    total_size += 1 + 1;
  }

  // bool invalid_vision_msg = 7;
  if (this->invalid_vision_msg() != 0) {
    total_size += 1 + 1;
  }

  // float laser_offset = 8;
  if (!(this->laser_offset() <= 0 && this->laser_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float vision_offset = 9;
  if (!(this->vision_offset() <= 0 && this->vision_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // .common.UseType use_type = 10;
  if (this->use_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->use_type());
  }

  // float offset = 12;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float real_offset = 13;
  if (!(this->real_offset() <= 0 && this->real_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float pnc_offset = 14;
  if (!(this->pnc_offset() <= 0 && this->pnc_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float standard_value = 15;
  if (!(this->standard_value() <= 0 && this->standard_value() >= 0)) {
    total_size += 1 + 4;
  }

  // bool align_timeout = 18;
  if (this->align_timeout() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChargerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ChargerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChargerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChargerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ChargerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ChargerInfo)
    MergeFrom(*source);
  }
}

void ChargerInfo::MergeFrom(const ChargerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChargerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  laser_data_.MergeFrom(from.laser_data_);
  vision_data_.MergeFrom(from.vision_data_);
  if (from.charger_num().size() > 0) {

    charger_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charger_num_);
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_arrived_point()) {
    mutable_arrived_point()->::common::Point::MergeFrom(from.arrived_point());
  }
  if (from.has_align_point()) {
    mutable_align_point()->::common::Point::MergeFrom(from.align_point());
  }
  if (from.sub_laser_msg() != 0) {
    set_sub_laser_msg(from.sub_laser_msg());
  }
  if (from.sub_vision_msg() != 0) {
    set_sub_vision_msg(from.sub_vision_msg());
  }
  if (from.invalid_laser_msg() != 0) {
    set_invalid_laser_msg(from.invalid_laser_msg());
  }
  if (from.invalid_vision_msg() != 0) {
    set_invalid_vision_msg(from.invalid_vision_msg());
  }
  if (!(from.laser_offset() <= 0 && from.laser_offset() >= 0)) {
    set_laser_offset(from.laser_offset());
  }
  if (!(from.vision_offset() <= 0 && from.vision_offset() >= 0)) {
    set_vision_offset(from.vision_offset());
  }
  if (from.use_type() != 0) {
    set_use_type(from.use_type());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (!(from.real_offset() <= 0 && from.real_offset() >= 0)) {
    set_real_offset(from.real_offset());
  }
  if (!(from.pnc_offset() <= 0 && from.pnc_offset() >= 0)) {
    set_pnc_offset(from.pnc_offset());
  }
  if (!(from.standard_value() <= 0 && from.standard_value() >= 0)) {
    set_standard_value(from.standard_value());
  }
  if (from.align_timeout() != 0) {
    set_align_timeout(from.align_timeout());
  }
}

void ChargerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ChargerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargerInfo::CopyFrom(const ChargerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChargerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargerInfo::IsInitialized() const {
  return true;
}

void ChargerInfo::InternalSwap(ChargerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&laser_data_)->InternalSwap(CastToBase(&other->laser_data_));
  CastToBase(&vision_data_)->InternalSwap(CastToBase(&other->vision_data_));
  charger_num_.Swap(&other->charger_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(arrived_point_, other->arrived_point_);
  swap(align_point_, other->align_point_);
  swap(sub_laser_msg_, other->sub_laser_msg_);
  swap(sub_vision_msg_, other->sub_vision_msg_);
  swap(invalid_laser_msg_, other->invalid_laser_msg_);
  swap(invalid_vision_msg_, other->invalid_vision_msg_);
  swap(laser_offset_, other->laser_offset_);
  swap(vision_offset_, other->vision_offset_);
  swap(use_type_, other->use_type_);
  swap(offset_, other->offset_);
  swap(real_offset_, other->real_offset_);
  swap(pnc_offset_, other->pnc_offset_);
  swap(standard_value_, other->standard_value_);
  swap(align_timeout_, other->align_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChargerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaserVisionData::InitAsDefaultInstance() {
}
class LaserVisionData::_Internal {
 public:
};

LaserVisionData::LaserVisionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.LaserVisionData)
}
LaserVisionData::LaserVisionData(const LaserVisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalid_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(invalid_));
  // @@protoc_insertion_point(copy_constructor:common.LaserVisionData)
}

void LaserVisionData::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(invalid_));
}

LaserVisionData::~LaserVisionData() {
  // @@protoc_insertion_point(destructor:common.LaserVisionData)
  SharedDtor();
}

void LaserVisionData::SharedDtor() {
}

void LaserVisionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserVisionData& LaserVisionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaserVisionData_common_2fcharger_5finfo_2eproto.base);
  return *internal_default_instance();
}


void LaserVisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:common.LaserVisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(invalid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaserVisionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool invalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaserVisionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.LaserVisionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float offset = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invalid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.LaserVisionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.LaserVisionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaserVisionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.LaserVisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float offset = 1;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // bool invalid = 2;
  if (this->invalid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->invalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.LaserVisionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaserVisionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.LaserVisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float offset = 1;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // bool invalid = 2;
  if (this->invalid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->invalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.LaserVisionData)
  return target;
}

size_t LaserVisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.LaserVisionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float offset = 1;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // bool invalid = 2;
  if (this->invalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserVisionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.LaserVisionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserVisionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaserVisionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.LaserVisionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.LaserVisionData)
    MergeFrom(*source);
  }
}

void LaserVisionData::MergeFrom(const LaserVisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.LaserVisionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (from.invalid() != 0) {
    set_invalid(from.invalid());
  }
}

void LaserVisionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.LaserVisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserVisionData::CopyFrom(const LaserVisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.LaserVisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserVisionData::IsInitialized() const {
  return true;
}

void LaserVisionData::InternalSwap(LaserVisionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(offset_, other->offset_);
  swap(invalid_, other->invalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserVisionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ChargerInfo* Arena::CreateMaybeMessage< ::common::ChargerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::common::ChargerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::LaserVisionData* Arena::CreateMaybeMessage< ::common::LaserVisionData >(Arena* arena) {
  return Arena::CreateInternal< ::common::LaserVisionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
