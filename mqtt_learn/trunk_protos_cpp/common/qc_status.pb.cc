// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/qc_status.proto

#include "./qc_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fqc_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace common {
class UniqueQcStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniqueQcStatus> _instance;
} _UniqueQcStatus_default_instance_;
class QcStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QcStatus> _instance;
} _QcStatus_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_QcStatus_common_2fqc_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_QcStatus_default_instance_;
    new (ptr) ::common::QcStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::QcStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_QcStatus_common_2fqc_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_QcStatus_common_2fqc_5fstatus_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_UniqueQcStatus_default_instance_;
    new (ptr) ::common::UniqueQcStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::UniqueQcStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto}, {
      &scc_info_Point_common_2fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fqc_5fstatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fqc_5fstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fqc_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fqc_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, crane_id_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, technical_status_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, technical_details_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, gantry_offset_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, trolley_offset_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, spreader_height_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, gantry_pos_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, trolley_pos_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, land_left_leg_pos_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, land_right_leg_pos_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, lane_id_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, qc_move_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, qc_bay_arrived_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, up_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, down_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, berth_name_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, route_direction_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, vessel_direction_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, lock_status_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, trolley_model_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, crane_type_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, crane_yaw_),
  PROTOBUF_FIELD_OFFSET(::common::UniqueQcStatus, is_top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::QcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::QcStatus, header_),
  PROTOBUF_FIELD_OFFSET(::common::QcStatus, updated_),
  PROTOBUF_FIELD_OFFSET(::common::QcStatus, qc_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::UniqueQcStatus)},
  { 28, -1, sizeof(::common::QcStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_UniqueQcStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_QcStatus_default_instance_),
};

const char descriptor_table_protodef_common_2fqc_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026common/qc_status.proto\022\006common\032\037google"
  "/protobuf/timestamp.proto\032\023common/header"
  ".proto\032\022common/enums.proto\032\022common/point"
  ".proto\"\270\005\n\016UniqueQcStatus\022\020\n\010crane_id\030\001 "
  "\001(\t\0221\n\020technical_status\030\002 \001(\0162\027.common.T"
  "echnicalStatus\022\031\n\021technical_details\030\003 \001("
  "\t\022\025\n\rgantry_offset\030\004 \001(\005\022\026\n\016trolley_offs"
  "et\030\005 \001(\005\022\027\n\017spreader_height\030\006 \001(\005\022!\n\ngan"
  "try_pos\030\007 \001(\0132\r.common.Point\022\"\n\013trolley_"
  "pos\030\010 \001(\0132\r.common.Point\022(\n\021land_left_le"
  "g_pos\030\t \001(\0132\r.common.Point\022)\n\022land_right"
  "_leg_pos\030\n \001(\0132\r.common.Point\022\017\n\007lane_id"
  "\030\013 \001(\t\022%\n\007qc_move\030\014 \001(\0162\024.common.MotionS"
  "tatus\022\026\n\016qc_bay_arrived\030\r \001(\010\022\016\n\006up_vpb\030"
  "\016 \001(\t\022\020\n\010down_vpb\030\017 \001(\t\022\022\n\nberth_name\030\020 "
  "\001(\t\0223\n\017route_direction\030\021 \001(\0162\032.common.Wo"
  "rkCycleDirection\0221\n\020vessel_direction\030\022 \001"
  "(\0162\027.common.VesselDirection\022\023\n\013lock_stat"
  "us\030\023 \001(\005\022\025\n\rtrolley_model\030\024 \001(\005\022%\n\ncrane"
  "_type\030\025 \001(\0162\021.common.CraneType\022\021\n\tcrane_"
  "yaw\030\026 \001(\001\022\016\n\006is_top\030\027 \001(\t\"\202\001\n\010QcStatus\022\036"
  "\n\006header\030\001 \001(\0132\016.common.Header\022+\n\007update"
  "d\030\002 \001(\0132\032.google.protobuf.Timestamp\022)\n\tq"
  "c_status\030\003 \003(\0132\026.common.UniqueQcStatusB\t"
  "Z\007/commonb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fqc_5fstatus_2eproto_deps[4] = {
  &::descriptor_table_common_2fenums_2eproto,
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_common_2fpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fqc_5fstatus_2eproto_sccs[2] = {
  &scc_info_QcStatus_common_2fqc_5fstatus_2eproto.base,
  &scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fqc_5fstatus_2eproto_once;
static bool descriptor_table_common_2fqc_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fqc_5fstatus_2eproto = {
  &descriptor_table_common_2fqc_5fstatus_2eproto_initialized, descriptor_table_protodef_common_2fqc_5fstatus_2eproto, "common/qc_status.proto", 977,
  &descriptor_table_common_2fqc_5fstatus_2eproto_once, descriptor_table_common_2fqc_5fstatus_2eproto_sccs, descriptor_table_common_2fqc_5fstatus_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_common_2fqc_5fstatus_2eproto::offsets,
  file_level_metadata_common_2fqc_5fstatus_2eproto, 2, file_level_enum_descriptors_common_2fqc_5fstatus_2eproto, file_level_service_descriptors_common_2fqc_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fqc_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fqc_5fstatus_2eproto), true);
namespace common {

// ===================================================================

void UniqueQcStatus::InitAsDefaultInstance() {
  ::common::_UniqueQcStatus_default_instance_._instance.get_mutable()->gantry_pos_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_UniqueQcStatus_default_instance_._instance.get_mutable()->trolley_pos_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_UniqueQcStatus_default_instance_._instance.get_mutable()->land_left_leg_pos_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_UniqueQcStatus_default_instance_._instance.get_mutable()->land_right_leg_pos_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
}
class UniqueQcStatus::_Internal {
 public:
  static const ::common::Point& gantry_pos(const UniqueQcStatus* msg);
  static const ::common::Point& trolley_pos(const UniqueQcStatus* msg);
  static const ::common::Point& land_left_leg_pos(const UniqueQcStatus* msg);
  static const ::common::Point& land_right_leg_pos(const UniqueQcStatus* msg);
};

const ::common::Point&
UniqueQcStatus::_Internal::gantry_pos(const UniqueQcStatus* msg) {
  return *msg->gantry_pos_;
}
const ::common::Point&
UniqueQcStatus::_Internal::trolley_pos(const UniqueQcStatus* msg) {
  return *msg->trolley_pos_;
}
const ::common::Point&
UniqueQcStatus::_Internal::land_left_leg_pos(const UniqueQcStatus* msg) {
  return *msg->land_left_leg_pos_;
}
const ::common::Point&
UniqueQcStatus::_Internal::land_right_leg_pos(const UniqueQcStatus* msg) {
  return *msg->land_right_leg_pos_;
}
void UniqueQcStatus::clear_gantry_pos() {
  if (GetArenaNoVirtual() == nullptr && gantry_pos_ != nullptr) {
    delete gantry_pos_;
  }
  gantry_pos_ = nullptr;
}
void UniqueQcStatus::clear_trolley_pos() {
  if (GetArenaNoVirtual() == nullptr && trolley_pos_ != nullptr) {
    delete trolley_pos_;
  }
  trolley_pos_ = nullptr;
}
void UniqueQcStatus::clear_land_left_leg_pos() {
  if (GetArenaNoVirtual() == nullptr && land_left_leg_pos_ != nullptr) {
    delete land_left_leg_pos_;
  }
  land_left_leg_pos_ = nullptr;
}
void UniqueQcStatus::clear_land_right_leg_pos() {
  if (GetArenaNoVirtual() == nullptr && land_right_leg_pos_ != nullptr) {
    delete land_right_leg_pos_;
  }
  land_right_leg_pos_ = nullptr;
}
UniqueQcStatus::UniqueQcStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.UniqueQcStatus)
}
UniqueQcStatus::UniqueQcStatus(const UniqueQcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.crane_id().empty()) {
    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  technical_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.technical_details().empty()) {
    technical_details_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.technical_details_);
  }
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.lane_id().empty()) {
    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.up_vpb().empty()) {
    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.down_vpb().empty()) {
    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  berth_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.berth_name().empty()) {
    berth_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.berth_name_);
  }
  is_top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.is_top().empty()) {
    is_top_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.is_top_);
  }
  if (from.has_gantry_pos()) {
    gantry_pos_ = new ::common::Point(*from.gantry_pos_);
  } else {
    gantry_pos_ = nullptr;
  }
  if (from.has_trolley_pos()) {
    trolley_pos_ = new ::common::Point(*from.trolley_pos_);
  } else {
    trolley_pos_ = nullptr;
  }
  if (from.has_land_left_leg_pos()) {
    land_left_leg_pos_ = new ::common::Point(*from.land_left_leg_pos_);
  } else {
    land_left_leg_pos_ = nullptr;
  }
  if (from.has_land_right_leg_pos()) {
    land_right_leg_pos_ = new ::common::Point(*from.land_right_leg_pos_);
  } else {
    land_right_leg_pos_ = nullptr;
  }
  ::memcpy(&technical_status_, &from.technical_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&crane_type_) -
    reinterpret_cast<char*>(&technical_status_)) + sizeof(crane_type_));
  // @@protoc_insertion_point(copy_constructor:common.UniqueQcStatus)
}

void UniqueQcStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto.base);
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  berth_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gantry_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crane_type_) -
      reinterpret_cast<char*>(&gantry_pos_)) + sizeof(crane_type_));
}

UniqueQcStatus::~UniqueQcStatus() {
  // @@protoc_insertion_point(destructor:common.UniqueQcStatus)
  SharedDtor();
}

void UniqueQcStatus::SharedDtor() {
  crane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  berth_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gantry_pos_;
  if (this != internal_default_instance()) delete trolley_pos_;
  if (this != internal_default_instance()) delete land_left_leg_pos_;
  if (this != internal_default_instance()) delete land_right_leg_pos_;
}

void UniqueQcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniqueQcStatus& UniqueQcStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniqueQcStatus_common_2fqc_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void UniqueQcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:common.UniqueQcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_details_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  berth_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_top_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gantry_pos_ != nullptr) {
    delete gantry_pos_;
  }
  gantry_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trolley_pos_ != nullptr) {
    delete trolley_pos_;
  }
  trolley_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && land_left_leg_pos_ != nullptr) {
    delete land_left_leg_pos_;
  }
  land_left_leg_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && land_right_leg_pos_ != nullptr) {
    delete land_right_leg_pos_;
  }
  land_right_leg_pos_ = nullptr;
  ::memset(&technical_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crane_type_) -
      reinterpret_cast<char*>(&technical_status_)) + sizeof(crane_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UniqueQcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string crane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crane_id(), ptr, ctx, "common.UniqueQcStatus.crane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TechnicalStatus technical_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_technical_status(static_cast<::common::TechnicalStatus>(val));
        } else goto handle_unusual;
        continue;
      // string technical_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_technical_details(), ptr, ctx, "common.UniqueQcStatus.technical_details");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gantry_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gantry_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trolley_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trolley_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spreader_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spreader_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point gantry_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_gantry_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point trolley_pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_trolley_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point land_left_leg_pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_land_left_leg_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point land_right_leg_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_land_right_leg_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lane_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lane_id(), ptr, ctx, "common.UniqueQcStatus.lane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.MotionStatus qc_move = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_qc_move(static_cast<::common::MotionStatus>(val));
        } else goto handle_unusual;
        continue;
      // bool qc_bay_arrived = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          qc_bay_arrived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string up_vpb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_up_vpb(), ptr, ctx, "common.UniqueQcStatus.up_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string down_vpb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_down_vpb(), ptr, ctx, "common.UniqueQcStatus.down_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string berth_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_berth_name(), ptr, ctx, "common.UniqueQcStatus.berth_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.WorkCycleDirection route_direction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_route_direction(static_cast<::common::WorkCycleDirection>(val));
        } else goto handle_unusual;
        continue;
      // .common.VesselDirection vessel_direction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vessel_direction(static_cast<::common::VesselDirection>(val));
        } else goto handle_unusual;
        continue;
      // int32 lock_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          lock_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trolley_model = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          trolley_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.CraneType crane_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_crane_type(static_cast<::common::CraneType>(val));
        } else goto handle_unusual;
        continue;
      // double crane_yaw = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          crane_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string is_top = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_is_top(), ptr, ctx, "common.UniqueQcStatus.is_top");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UniqueQcStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.UniqueQcStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string crane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crane_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crane_id().data(), static_cast<int>(this->crane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.crane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TechnicalStatus technical_status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_technical_status(static_cast< ::common::TechnicalStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string technical_details = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_details()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->technical_details().data(), static_cast<int>(this->technical_details().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.technical_details"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gantry_offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gantry_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trolley_offset = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trolley_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spreader_height = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &spreader_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point gantry_pos = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gantry_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point trolley_pos = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trolley_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point land_left_leg_pos = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_land_left_leg_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point land_right_leg_pos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_land_right_leg_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.MotionStatus qc_move = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_qc_move(static_cast< ::common::MotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool qc_bay_arrived = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qc_bay_arrived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string up_vpb = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_up_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.up_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string down_vpb = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_down_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.down_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string berth_name = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_berth_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->berth_name().data(), static_cast<int>(this->berth_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.berth_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.WorkCycleDirection route_direction = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_direction(static_cast< ::common::WorkCycleDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.VesselDirection vessel_direction = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vessel_direction(static_cast< ::common::VesselDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lock_status = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trolley_model = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trolley_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.CraneType crane_type = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_crane_type(static_cast< ::common::CraneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double crane_yaw = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crane_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string is_top = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_is_top()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->is_top().data(), static_cast<int>(this->is_top().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.UniqueQcStatus.is_top"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.UniqueQcStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.UniqueQcStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UniqueQcStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.UniqueQcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crane_id = 1;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.crane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crane_id(), output);
  }

  // .common.TechnicalStatus technical_status = 2;
  if (this->technical_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->technical_status(), output);
  }

  // string technical_details = 3;
  if (this->technical_details().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->technical_details().data(), static_cast<int>(this->technical_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.technical_details");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->technical_details(), output);
  }

  // int32 gantry_offset = 4;
  if (this->gantry_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->gantry_offset(), output);
  }

  // int32 trolley_offset = 5;
  if (this->trolley_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->trolley_offset(), output);
  }

  // int32 spreader_height = 6;
  if (this->spreader_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->spreader_height(), output);
  }

  // .common.Point gantry_pos = 7;
  if (this->has_gantry_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::gantry_pos(this), output);
  }

  // .common.Point trolley_pos = 8;
  if (this->has_trolley_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::trolley_pos(this), output);
  }

  // .common.Point land_left_leg_pos = 9;
  if (this->has_land_left_leg_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::land_left_leg_pos(this), output);
  }

  // .common.Point land_right_leg_pos = 10;
  if (this->has_land_right_leg_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::land_right_leg_pos(this), output);
  }

  // string lane_id = 11;
  if (this->lane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.lane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lane_id(), output);
  }

  // .common.MotionStatus qc_move = 12;
  if (this->qc_move() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->qc_move(), output);
  }

  // bool qc_bay_arrived = 13;
  if (this->qc_bay_arrived() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->qc_bay_arrived(), output);
  }

  // string up_vpb = 14;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.up_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->up_vpb(), output);
  }

  // string down_vpb = 15;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.down_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->down_vpb(), output);
  }

  // string berth_name = 16;
  if (this->berth_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->berth_name().data(), static_cast<int>(this->berth_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.berth_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->berth_name(), output);
  }

  // .common.WorkCycleDirection route_direction = 17;
  if (this->route_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->route_direction(), output);
  }

  // .common.VesselDirection vessel_direction = 18;
  if (this->vessel_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->vessel_direction(), output);
  }

  // int32 lock_status = 19;
  if (this->lock_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->lock_status(), output);
  }

  // int32 trolley_model = 20;
  if (this->trolley_model() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->trolley_model(), output);
  }

  // .common.CraneType crane_type = 21;
  if (this->crane_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->crane_type(), output);
  }

  // double crane_yaw = 22;
  if (!(this->crane_yaw() <= 0 && this->crane_yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->crane_yaw(), output);
  }

  // string is_top = 23;
  if (this->is_top().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->is_top().data(), static_cast<int>(this->is_top().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.is_top");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->is_top(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.UniqueQcStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* UniqueQcStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.UniqueQcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crane_id = 1;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.crane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->crane_id(), target);
  }

  // .common.TechnicalStatus technical_status = 2;
  if (this->technical_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->technical_status(), target);
  }

  // string technical_details = 3;
  if (this->technical_details().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->technical_details().data(), static_cast<int>(this->technical_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.technical_details");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->technical_details(), target);
  }

  // int32 gantry_offset = 4;
  if (this->gantry_offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->gantry_offset(), target);
  }

  // int32 trolley_offset = 5;
  if (this->trolley_offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->trolley_offset(), target);
  }

  // int32 spreader_height = 6;
  if (this->spreader_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->spreader_height(), target);
  }

  // .common.Point gantry_pos = 7;
  if (this->has_gantry_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::gantry_pos(this), target);
  }

  // .common.Point trolley_pos = 8;
  if (this->has_trolley_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::trolley_pos(this), target);
  }

  // .common.Point land_left_leg_pos = 9;
  if (this->has_land_left_leg_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::land_left_leg_pos(this), target);
  }

  // .common.Point land_right_leg_pos = 10;
  if (this->has_land_right_leg_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::land_right_leg_pos(this), target);
  }

  // string lane_id = 11;
  if (this->lane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.lane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->lane_id(), target);
  }

  // .common.MotionStatus qc_move = 12;
  if (this->qc_move() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->qc_move(), target);
  }

  // bool qc_bay_arrived = 13;
  if (this->qc_bay_arrived() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->qc_bay_arrived(), target);
  }

  // string up_vpb = 14;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.up_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->up_vpb(), target);
  }

  // string down_vpb = 15;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.down_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->down_vpb(), target);
  }

  // string berth_name = 16;
  if (this->berth_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->berth_name().data(), static_cast<int>(this->berth_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.berth_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->berth_name(), target);
  }

  // .common.WorkCycleDirection route_direction = 17;
  if (this->route_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->route_direction(), target);
  }

  // .common.VesselDirection vessel_direction = 18;
  if (this->vessel_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->vessel_direction(), target);
  }

  // int32 lock_status = 19;
  if (this->lock_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->lock_status(), target);
  }

  // int32 trolley_model = 20;
  if (this->trolley_model() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->trolley_model(), target);
  }

  // .common.CraneType crane_type = 21;
  if (this->crane_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->crane_type(), target);
  }

  // double crane_yaw = 22;
  if (!(this->crane_yaw() <= 0 && this->crane_yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->crane_yaw(), target);
  }

  // string is_top = 23;
  if (this->is_top().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->is_top().data(), static_cast<int>(this->is_top().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UniqueQcStatus.is_top");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->is_top(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.UniqueQcStatus)
  return target;
}

size_t UniqueQcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.UniqueQcStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crane_id = 1;
  if (this->crane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crane_id());
  }

  // string technical_details = 3;
  if (this->technical_details().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->technical_details());
  }

  // string lane_id = 11;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // string up_vpb = 14;
  if (this->up_vpb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->up_vpb());
  }

  // string down_vpb = 15;
  if (this->down_vpb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->down_vpb());
  }

  // string berth_name = 16;
  if (this->berth_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->berth_name());
  }

  // string is_top = 23;
  if (this->is_top().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->is_top());
  }

  // .common.Point gantry_pos = 7;
  if (this->has_gantry_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gantry_pos_);
  }

  // .common.Point trolley_pos = 8;
  if (this->has_trolley_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trolley_pos_);
  }

  // .common.Point land_left_leg_pos = 9;
  if (this->has_land_left_leg_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *land_left_leg_pos_);
  }

  // .common.Point land_right_leg_pos = 10;
  if (this->has_land_right_leg_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *land_right_leg_pos_);
  }

  // .common.TechnicalStatus technical_status = 2;
  if (this->technical_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->technical_status());
  }

  // int32 gantry_offset = 4;
  if (this->gantry_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gantry_offset());
  }

  // int32 trolley_offset = 5;
  if (this->trolley_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trolley_offset());
  }

  // int32 spreader_height = 6;
  if (this->spreader_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->spreader_height());
  }

  // .common.MotionStatus qc_move = 12;
  if (this->qc_move() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->qc_move());
  }

  // bool qc_bay_arrived = 13;
  if (this->qc_bay_arrived() != 0) {
    total_size += 1 + 1;
  }

  // .common.WorkCycleDirection route_direction = 17;
  if (this->route_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->route_direction());
  }

  // .common.VesselDirection vessel_direction = 18;
  if (this->vessel_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vessel_direction());
  }

  // int32 lock_status = 19;
  if (this->lock_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lock_status());
  }

  // int32 trolley_model = 20;
  if (this->trolley_model() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trolley_model());
  }

  // double crane_yaw = 22;
  if (!(this->crane_yaw() <= 0 && this->crane_yaw() >= 0)) {
    total_size += 2 + 8;
  }

  // .common.CraneType crane_type = 21;
  if (this->crane_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->crane_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniqueQcStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.UniqueQcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueQcStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniqueQcStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.UniqueQcStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.UniqueQcStatus)
    MergeFrom(*source);
  }
}

void UniqueQcStatus::MergeFrom(const UniqueQcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.UniqueQcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.crane_id().size() > 0) {

    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  if (from.technical_details().size() > 0) {

    technical_details_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.technical_details_);
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.up_vpb().size() > 0) {

    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  if (from.down_vpb().size() > 0) {

    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  if (from.berth_name().size() > 0) {

    berth_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.berth_name_);
  }
  if (from.is_top().size() > 0) {

    is_top_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.is_top_);
  }
  if (from.has_gantry_pos()) {
    mutable_gantry_pos()->::common::Point::MergeFrom(from.gantry_pos());
  }
  if (from.has_trolley_pos()) {
    mutable_trolley_pos()->::common::Point::MergeFrom(from.trolley_pos());
  }
  if (from.has_land_left_leg_pos()) {
    mutable_land_left_leg_pos()->::common::Point::MergeFrom(from.land_left_leg_pos());
  }
  if (from.has_land_right_leg_pos()) {
    mutable_land_right_leg_pos()->::common::Point::MergeFrom(from.land_right_leg_pos());
  }
  if (from.technical_status() != 0) {
    set_technical_status(from.technical_status());
  }
  if (from.gantry_offset() != 0) {
    set_gantry_offset(from.gantry_offset());
  }
  if (from.trolley_offset() != 0) {
    set_trolley_offset(from.trolley_offset());
  }
  if (from.spreader_height() != 0) {
    set_spreader_height(from.spreader_height());
  }
  if (from.qc_move() != 0) {
    set_qc_move(from.qc_move());
  }
  if (from.qc_bay_arrived() != 0) {
    set_qc_bay_arrived(from.qc_bay_arrived());
  }
  if (from.route_direction() != 0) {
    set_route_direction(from.route_direction());
  }
  if (from.vessel_direction() != 0) {
    set_vessel_direction(from.vessel_direction());
  }
  if (from.lock_status() != 0) {
    set_lock_status(from.lock_status());
  }
  if (from.trolley_model() != 0) {
    set_trolley_model(from.trolley_model());
  }
  if (!(from.crane_yaw() <= 0 && from.crane_yaw() >= 0)) {
    set_crane_yaw(from.crane_yaw());
  }
  if (from.crane_type() != 0) {
    set_crane_type(from.crane_type());
  }
}

void UniqueQcStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.UniqueQcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueQcStatus::CopyFrom(const UniqueQcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.UniqueQcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueQcStatus::IsInitialized() const {
  return true;
}

void UniqueQcStatus::InternalSwap(UniqueQcStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  crane_id_.Swap(&other->crane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  technical_details_.Swap(&other->technical_details_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  up_vpb_.Swap(&other->up_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  down_vpb_.Swap(&other->down_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  berth_name_.Swap(&other->berth_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  is_top_.Swap(&other->is_top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gantry_pos_, other->gantry_pos_);
  swap(trolley_pos_, other->trolley_pos_);
  swap(land_left_leg_pos_, other->land_left_leg_pos_);
  swap(land_right_leg_pos_, other->land_right_leg_pos_);
  swap(technical_status_, other->technical_status_);
  swap(gantry_offset_, other->gantry_offset_);
  swap(trolley_offset_, other->trolley_offset_);
  swap(spreader_height_, other->spreader_height_);
  swap(qc_move_, other->qc_move_);
  swap(qc_bay_arrived_, other->qc_bay_arrived_);
  swap(route_direction_, other->route_direction_);
  swap(vessel_direction_, other->vessel_direction_);
  swap(lock_status_, other->lock_status_);
  swap(trolley_model_, other->trolley_model_);
  swap(crane_yaw_, other->crane_yaw_);
  swap(crane_type_, other->crane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueQcStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QcStatus::InitAsDefaultInstance() {
  ::common::_QcStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::common::_QcStatus_default_instance_._instance.get_mutable()->updated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class QcStatus::_Internal {
 public:
  static const ::common::Header& header(const QcStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated(const QcStatus* msg);
};

const ::common::Header&
QcStatus::_Internal::header(const QcStatus* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
QcStatus::_Internal::updated(const QcStatus* msg) {
  return *msg->updated_;
}
void QcStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void QcStatus::clear_updated() {
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
QcStatus::QcStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.QcStatus)
}
QcStatus::QcStatus(const QcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      qc_status_(from.qc_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_updated()) {
    updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.QcStatus)
}

void QcStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QcStatus_common_2fqc_5fstatus_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_) -
      reinterpret_cast<char*>(&header_)) + sizeof(updated_));
}

QcStatus::~QcStatus() {
  // @@protoc_insertion_point(destructor:common.QcStatus)
  SharedDtor();
}

void QcStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete updated_;
}

void QcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QcStatus& QcStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QcStatus_common_2fqc_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void QcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:common.QcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qc_status_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.UniqueQcStatus qc_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_qc_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QcStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.QcStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.UniqueQcStatus qc_status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_qc_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.QcStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.QcStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QcStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.QcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::updated(this), output);
  }

  // repeated .common.UniqueQcStatus qc_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qc_status_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->qc_status(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.QcStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* QcStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.QcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::updated(this), target);
  }

  // repeated .common.UniqueQcStatus qc_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qc_status_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->qc_status(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.QcStatus)
  return target;
}

size_t QcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.QcStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.UniqueQcStatus qc_status = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->qc_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->qc_status(static_cast<int>(i)));
    }
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QcStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.QcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const QcStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QcStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.QcStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.QcStatus)
    MergeFrom(*source);
  }
}

void QcStatus::MergeFrom(const QcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.QcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qc_status_.MergeFrom(from.qc_status_);
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_updated()) {
    mutable_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.updated());
  }
}

void QcStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.QcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QcStatus::CopyFrom(const QcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.QcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QcStatus::IsInitialized() const {
  return true;
}

void QcStatus::InternalSwap(QcStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&qc_status_)->InternalSwap(CastToBase(&other->qc_status_));
  swap(header_, other->header_);
  swap(updated_, other->updated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QcStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::UniqueQcStatus* Arena::CreateMaybeMessage< ::common::UniqueQcStatus >(Arena* arena) {
  return Arena::CreateInternal< ::common::UniqueQcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::common::QcStatus* Arena::CreateMaybeMessage< ::common::QcStatus >(Arena* arena) {
  return Arena::CreateInternal< ::common::QcStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
