// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/task.proto

#include "./task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fcontainer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_common_2fcontainer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace common {
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_Task_common_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_Task_default_instance_;
    new (ptr) ::common::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Task_common_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Task_common_2ftask_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Container_common_2fcontainer_2eproto.base,
      &scc_info_Point_common_2fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ftask_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2ftask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ftask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Task, header_),
  PROTOBUF_FIELD_OFFSET(::common::Task, updated_),
  PROTOBUF_FIELD_OFFSET(::common::Task, trace_id_),
  PROTOBUF_FIELD_OFFSET(::common::Task, order_version_),
  PROTOBUF_FIELD_OFFSET(::common::Task, task_id_),
  PROTOBUF_FIELD_OFFSET(::common::Task, task_version_),
  PROTOBUF_FIELD_OFFSET(::common::Task, status_),
  PROTOBUF_FIELD_OFFSET(::common::Task, containers_),
  PROTOBUF_FIELD_OFFSET(::common::Task, act_order_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, act_business_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, dest_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, plan_destination_),
  PROTOBUF_FIELD_OFFSET(::common::Task, actual_destination_),
  PROTOBUF_FIELD_OFFSET(::common::Task, loc_point_),
  PROTOBUF_FIELD_OFFSET(::common::Task, dest_point_),
  PROTOBUF_FIELD_OFFSET(::common::Task, task_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, task_mode_),
  PROTOBUF_FIELD_OFFSET(::common::Task, guide_stop_),
  PROTOBUF_FIELD_OFFSET(::common::Task, guide_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, target_),
  PROTOBUF_FIELD_OFFSET(::common::Task, sub_target_),
  PROTOBUF_FIELD_OFFSET(::common::Task, active_cps_),
  PROTOBUF_FIELD_OFFSET(::common::Task, active_cps_type_),
  PROTOBUF_FIELD_OFFSET(::common::Task, bypass_sequence_),
  PROTOBUF_FIELD_OFFSET(::common::Task, problem_code_),
  PROTOBUF_FIELD_OFFSET(::common::Task, problem_description_),
  PROTOBUF_FIELD_OFFSET(::common::Task, route_direction_),
  PROTOBUF_FIELD_OFFSET(::common::Task, up_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::Task, down_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::Task, guide_cps_),
  PROTOBUF_FIELD_OFFSET(::common::Task, crane_id_),
  PROTOBUF_FIELD_OFFSET(::common::Task, has_navi_),
  PROTOBUF_FIELD_OFFSET(::common::Task, need_manual_),
  PROTOBUF_FIELD_OFFSET(::common::Task, tos_id_),
  PROTOBUF_FIELD_OFFSET(::common::Task, wait_point_),
  PROTOBUF_FIELD_OFFSET(::common::Task, twin_flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::Task)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Task_default_instance_),
};

const char descriptor_table_protodef_common_2ftask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021common/task.proto\022\006common\032\022common/enum"
  "s.proto\032\023common/header.proto\032\026common/con"
  "tainer.proto\032\022common/point.proto\032\037google"
  "/protobuf/timestamp.proto\"\267\010\n\004Task\022\036\n\006he"
  "ader\030\001 \001(\0132\016.common.Header\022+\n\007updated\030\002 "
  "\001(\0132\032.google.protobuf.Timestamp\022\020\n\010trace"
  "_id\030\003 \001(\t\022\025\n\rorder_version\030\004 \001(\r\022\017\n\007task"
  "_id\030\005 \001(\t\022\024\n\014task_version\030\006 \001(\r\022#\n\006statu"
  "s\030\007 \001(\0162\023.common.OrderStatus\022%\n\ncontaine"
  "rs\030\010 \003(\0132\021.common.Container\022)\n\016act_order"
  "_type\030\t \001(\0162\021.common.OrderType\022/\n\021act_bu"
  "siness_type\030\n \001(\0162\024.common.BusinessType\022"
  "#\n\tdest_type\030\013 \001(\0162\020.common.DestType\022\030\n\020"
  "plan_destination\030\014 \001(\t\022\032\n\022actual_destina"
  "tion\030\r \001(\t\022 \n\tloc_point\030\016 \001(\0132\r.common.P"
  "oint\022!\n\ndest_point\030\017 \001(\0132\r.common.Point\022"
  "#\n\ttask_type\030\020 \001(\0162\020.common.TaskType\022#\n\t"
  "task_mode\030\021 \001(\0162\020.common.TaskMode\022\022\n\ngui"
  "de_stop\030\022 \001(\010\022%\n\nguide_type\030\023 \001(\0162\021.comm"
  "on.GuideType\022\016\n\006target\030\024 \001(\t\022\022\n\nsub_targ"
  "et\030\025 \001(\t\022\022\n\nactive_cps\030\026 \001(\010\022*\n\017active_c"
  "ps_type\030\027 \001(\0162\021.common.GuideType\022/\n\017bypa"
  "ss_sequence\030\030 \001(\0162\026.common.BypassSequenc"
  "e\022\024\n\014problem_code\030\031 \001(\t\022\033\n\023problem_descr"
  "iption\030\032 \001(\t\0223\n\017route_direction\030\033 \001(\0162\032."
  "common.WorkCycleDirection\022\016\n\006up_vpb\030\035 \001("
  "\t\022\020\n\010down_vpb\030\036 \001(\t\022\021\n\tguide_cps\030\037 \001(\010\022\020"
  "\n\010crane_id\030  \001(\t\022\020\n\010has_navi\030! \001(\010\022\023\n\013ne"
  "ed_manual\030\" \001(\010\022\016\n\006tos_id\030# \001(\t\022%\n\nwait_"
  "point\030$ \001(\0162\021.common.WaitPoint\022#\n\ttwin_f"
  "lag\030% \001(\0162\020.common.TwinFlagB\tZ\007/commonb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ftask_2eproto_deps[5] = {
  &::descriptor_table_common_2fcontainer_2eproto,
  &::descriptor_table_common_2fenums_2eproto,
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_common_2fpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2ftask_2eproto_sccs[1] = {
  &scc_info_Task_common_2ftask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ftask_2eproto_once;
static bool descriptor_table_common_2ftask_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftask_2eproto = {
  &descriptor_table_common_2ftask_2eproto_initialized, descriptor_table_protodef_common_2ftask_2eproto, "common/task.proto", 1246,
  &descriptor_table_common_2ftask_2eproto_once, descriptor_table_common_2ftask_2eproto_sccs, descriptor_table_common_2ftask_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_common_2ftask_2eproto::offsets,
  file_level_metadata_common_2ftask_2eproto, 1, file_level_enum_descriptors_common_2ftask_2eproto, file_level_service_descriptors_common_2ftask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2ftask_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2ftask_2eproto), true);
namespace common {

// ===================================================================

void Task::InitAsDefaultInstance() {
  ::common::_Task_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::common::_Task_default_instance_._instance.get_mutable()->updated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::common::_Task_default_instance_._instance.get_mutable()->loc_point_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_Task_default_instance_._instance.get_mutable()->dest_point_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
}
class Task::_Internal {
 public:
  static const ::common::Header& header(const Task* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated(const Task* msg);
  static const ::common::Point& loc_point(const Task* msg);
  static const ::common::Point& dest_point(const Task* msg);
};

const ::common::Header&
Task::_Internal::header(const Task* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Task::_Internal::updated(const Task* msg) {
  return *msg->updated_;
}
const ::common::Point&
Task::_Internal::loc_point(const Task* msg) {
  return *msg->loc_point_;
}
const ::common::Point&
Task::_Internal::dest_point(const Task* msg) {
  return *msg->dest_point_;
}
void Task::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Task::clear_updated() {
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
void Task::clear_containers() {
  containers_.Clear();
}
void Task::clear_loc_point() {
  if (GetArenaNoVirtual() == nullptr && loc_point_ != nullptr) {
    delete loc_point_;
  }
  loc_point_ = nullptr;
}
void Task::clear_dest_point() {
  if (GetArenaNoVirtual() == nullptr && dest_point_ != nullptr) {
    delete dest_point_;
  }
  dest_point_ = nullptr;
}
Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trace_id().empty()) {
    trace_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  plan_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.plan_destination().empty()) {
    plan_destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_destination_);
  }
  actual_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.actual_destination().empty()) {
    actual_destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_destination_);
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_target().empty()) {
    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  problem_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.problem_code().empty()) {
    problem_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.problem_code_);
  }
  problem_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.problem_description().empty()) {
    problem_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.problem_description_);
  }
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.up_vpb().empty()) {
    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.down_vpb().empty()) {
    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.crane_id().empty()) {
    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  tos_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tos_id().empty()) {
    tos_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tos_id_);
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_updated()) {
    updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  if (from.has_loc_point()) {
    loc_point_ = new ::common::Point(*from.loc_point_);
  } else {
    loc_point_ = nullptr;
  }
  if (from.has_dest_point()) {
    dest_point_ = new ::common::Point(*from.dest_point_);
  } else {
    dest_point_ = nullptr;
  }
  ::memcpy(&order_version_, &from.order_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&twin_flag_) -
    reinterpret_cast<char*>(&order_version_)) + sizeof(twin_flag_));
  // @@protoc_insertion_point(copy_constructor:common.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_common_2ftask_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tos_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twin_flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(twin_flag_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:common.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tos_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete updated_;
  if (this != internal_default_instance()) delete loc_point_;
  if (this != internal_default_instance()) delete dest_point_;
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_common_2ftask_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  trace_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  problem_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tos_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && loc_point_ != nullptr) {
    delete loc_point_;
  }
  loc_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dest_point_ != nullptr) {
    delete dest_point_;
  }
  dest_point_ = nullptr;
  ::memset(&order_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twin_flag_) -
      reinterpret_cast<char*>(&order_version_)) + sizeof(twin_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trace_id(), ptr, ctx, "common.Task.trace_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 order_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          order_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "common.Task.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          task_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::common::OrderStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .common.Container containers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .common.OrderType act_order_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_act_order_type(static_cast<::common::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // .common.BusinessType act_business_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_act_business_type(static_cast<::common::BusinessType>(val));
        } else goto handle_unusual;
        continue;
      // .common.DestType dest_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dest_type(static_cast<::common::DestType>(val));
        } else goto handle_unusual;
        continue;
      // string plan_destination = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_plan_destination(), ptr, ctx, "common.Task.plan_destination");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actual_destination = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_actual_destination(), ptr, ctx, "common.Task.actual_destination");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point loc_point = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_loc_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Point dest_point = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_dest_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TaskType task_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_task_type(static_cast<::common::TaskType>(val));
        } else goto handle_unusual;
        continue;
      // .common.TaskMode task_mode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_task_mode(static_cast<::common::TaskMode>(val));
        } else goto handle_unusual;
        continue;
      // bool guide_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          guide_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.GuideType guide_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_guide_type(static_cast<::common::GuideType>(val));
        } else goto handle_unusual;
        continue;
      // string target = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_target(), ptr, ctx, "common.Task.target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_target = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_target(), ptr, ctx, "common.Task.sub_target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active_cps = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          active_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.GuideType active_cps_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_active_cps_type(static_cast<::common::GuideType>(val));
        } else goto handle_unusual;
        continue;
      // .common.BypassSequence bypass_sequence = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_bypass_sequence(static_cast<::common::BypassSequence>(val));
        } else goto handle_unusual;
        continue;
      // string problem_code = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_problem_code(), ptr, ctx, "common.Task.problem_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string problem_description = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_problem_description(), ptr, ctx, "common.Task.problem_description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.WorkCycleDirection route_direction = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_route_direction(static_cast<::common::WorkCycleDirection>(val));
        } else goto handle_unusual;
        continue;
      // string up_vpb = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_up_vpb(), ptr, ctx, "common.Task.up_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string down_vpb = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_down_vpb(), ptr, ctx, "common.Task.down_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guide_cps = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          guide_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string crane_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crane_id(), ptr, ctx, "common.Task.crane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_navi = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_navi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool need_manual = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          need_manual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tos_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tos_id(), ptr, ctx, "common.Task.tos_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.WaitPoint wait_point = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_wait_point(static_cast<::common::WaitPoint>(val));
        } else goto handle_unusual;
        continue;
      // .common.TwinFlag twin_flag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_twin_flag(static_cast<::common::TwinFlag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), static_cast<int>(this->trace_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 order_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.OrderStatus status = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::common::OrderStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.Container containers = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.OrderType act_order_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_act_order_type(static_cast< ::common::OrderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.BusinessType act_business_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_act_business_type(static_cast< ::common::BusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.DestType dest_type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dest_type(static_cast< ::common::DestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plan_destination = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plan_destination()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->plan_destination().data(), static_cast<int>(this->plan_destination().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.plan_destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string actual_destination = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_actual_destination()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->actual_destination().data(), static_cast<int>(this->actual_destination().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.actual_destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point loc_point = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point dest_point = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dest_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TaskType task_type = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_type(static_cast< ::common::TaskType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TaskMode task_mode = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_mode(static_cast< ::common::TaskMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool guide_stop = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guide_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.GuideType guide_type = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_guide_type(static_cast< ::common::GuideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_target = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_target().data(), static_cast<int>(this->sub_target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.sub_target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active_cps = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_cps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.GuideType active_cps_type = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_active_cps_type(static_cast< ::common::GuideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.BypassSequence bypass_sequence = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bypass_sequence(static_cast< ::common::BypassSequence >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string problem_code = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_problem_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->problem_code().data(), static_cast<int>(this->problem_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.problem_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string problem_description = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_problem_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->problem_description().data(), static_cast<int>(this->problem_description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.problem_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.WorkCycleDirection route_direction = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_direction(static_cast< ::common::WorkCycleDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string up_vpb = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_up_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.up_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string down_vpb = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_down_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.down_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool guide_cps = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guide_cps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crane_id = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crane_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crane_id().data(), static_cast<int>(this->crane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.crane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_navi = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_navi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool need_manual = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_manual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tos_id = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tos_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tos_id().data(), static_cast<int>(this->tos_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Task.tos_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.WaitPoint wait_point = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wait_point(static_cast< ::common::WaitPoint >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TwinFlag twin_flag = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_twin_flag(static_cast< ::common::TwinFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::updated(this), output);
  }

  // string trace_id = 3;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), static_cast<int>(this->trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.trace_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trace_id(), output);
  }

  // uint32 order_version = 4;
  if (this->order_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->order_version(), output);
  }

  // string task_id = 5;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_id(), output);
  }

  // uint32 task_version = 6;
  if (this->task_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->task_version(), output);
  }

  // .common.OrderStatus status = 7;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // repeated .common.Container containers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->containers(static_cast<int>(i)),
      output);
  }

  // .common.OrderType act_order_type = 9;
  if (this->act_order_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->act_order_type(), output);
  }

  // .common.BusinessType act_business_type = 10;
  if (this->act_business_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->act_business_type(), output);
  }

  // .common.DestType dest_type = 11;
  if (this->dest_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->dest_type(), output);
  }

  // string plan_destination = 12;
  if (this->plan_destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->plan_destination().data(), static_cast<int>(this->plan_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.plan_destination");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->plan_destination(), output);
  }

  // string actual_destination = 13;
  if (this->actual_destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->actual_destination().data(), static_cast<int>(this->actual_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.actual_destination");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->actual_destination(), output);
  }

  // .common.Point loc_point = 14;
  if (this->has_loc_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::loc_point(this), output);
  }

  // .common.Point dest_point = 15;
  if (this->has_dest_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::dest_point(this), output);
  }

  // .common.TaskType task_type = 16;
  if (this->task_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->task_type(), output);
  }

  // .common.TaskMode task_mode = 17;
  if (this->task_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->task_mode(), output);
  }

  // bool guide_stop = 18;
  if (this->guide_stop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->guide_stop(), output);
  }

  // .common.GuideType guide_type = 19;
  if (this->guide_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->guide_type(), output);
  }

  // string target = 20;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->target(), output);
  }

  // string sub_target = 21;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.sub_target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->sub_target(), output);
  }

  // bool active_cps = 22;
  if (this->active_cps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->active_cps(), output);
  }

  // .common.GuideType active_cps_type = 23;
  if (this->active_cps_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->active_cps_type(), output);
  }

  // .common.BypassSequence bypass_sequence = 24;
  if (this->bypass_sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      24, this->bypass_sequence(), output);
  }

  // string problem_code = 25;
  if (this->problem_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->problem_code().data(), static_cast<int>(this->problem_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.problem_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->problem_code(), output);
  }

  // string problem_description = 26;
  if (this->problem_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->problem_description().data(), static_cast<int>(this->problem_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.problem_description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->problem_description(), output);
  }

  // .common.WorkCycleDirection route_direction = 27;
  if (this->route_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->route_direction(), output);
  }

  // string up_vpb = 29;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.up_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->up_vpb(), output);
  }

  // string down_vpb = 30;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.down_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->down_vpb(), output);
  }

  // bool guide_cps = 31;
  if (this->guide_cps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(31, this->guide_cps(), output);
  }

  // string crane_id = 32;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.crane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->crane_id(), output);
  }

  // bool has_navi = 33;
  if (this->has_navi() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(33, this->has_navi(), output);
  }

  // bool need_manual = 34;
  if (this->need_manual() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->need_manual(), output);
  }

  // string tos_id = 35;
  if (this->tos_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tos_id().data(), static_cast<int>(this->tos_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.tos_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->tos_id(), output);
  }

  // .common.WaitPoint wait_point = 36;
  if (this->wait_point() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      36, this->wait_point(), output);
  }

  // .common.TwinFlag twin_flag = 37;
  if (this->twin_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      37, this->twin_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.Task)
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::updated(this), target);
  }

  // string trace_id = 3;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), static_cast<int>(this->trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.trace_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trace_id(), target);
  }

  // uint32 order_version = 4;
  if (this->order_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->order_version(), target);
  }

  // string task_id = 5;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->task_id(), target);
  }

  // uint32 task_version = 6;
  if (this->task_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->task_version(), target);
  }

  // .common.OrderStatus status = 7;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // repeated .common.Container containers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->containers(static_cast<int>(i)), target);
  }

  // .common.OrderType act_order_type = 9;
  if (this->act_order_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->act_order_type(), target);
  }

  // .common.BusinessType act_business_type = 10;
  if (this->act_business_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->act_business_type(), target);
  }

  // .common.DestType dest_type = 11;
  if (this->dest_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->dest_type(), target);
  }

  // string plan_destination = 12;
  if (this->plan_destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->plan_destination().data(), static_cast<int>(this->plan_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.plan_destination");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->plan_destination(), target);
  }

  // string actual_destination = 13;
  if (this->actual_destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->actual_destination().data(), static_cast<int>(this->actual_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.actual_destination");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->actual_destination(), target);
  }

  // .common.Point loc_point = 14;
  if (this->has_loc_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::loc_point(this), target);
  }

  // .common.Point dest_point = 15;
  if (this->has_dest_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::dest_point(this), target);
  }

  // .common.TaskType task_type = 16;
  if (this->task_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->task_type(), target);
  }

  // .common.TaskMode task_mode = 17;
  if (this->task_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->task_mode(), target);
  }

  // bool guide_stop = 18;
  if (this->guide_stop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->guide_stop(), target);
  }

  // .common.GuideType guide_type = 19;
  if (this->guide_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->guide_type(), target);
  }

  // string target = 20;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->target(), target);
  }

  // string sub_target = 21;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.sub_target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->sub_target(), target);
  }

  // bool active_cps = 22;
  if (this->active_cps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->active_cps(), target);
  }

  // .common.GuideType active_cps_type = 23;
  if (this->active_cps_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->active_cps_type(), target);
  }

  // .common.BypassSequence bypass_sequence = 24;
  if (this->bypass_sequence() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->bypass_sequence(), target);
  }

  // string problem_code = 25;
  if (this->problem_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->problem_code().data(), static_cast<int>(this->problem_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.problem_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->problem_code(), target);
  }

  // string problem_description = 26;
  if (this->problem_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->problem_description().data(), static_cast<int>(this->problem_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.problem_description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        26, this->problem_description(), target);
  }

  // .common.WorkCycleDirection route_direction = 27;
  if (this->route_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->route_direction(), target);
  }

  // string up_vpb = 29;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.up_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        29, this->up_vpb(), target);
  }

  // string down_vpb = 30;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.down_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->down_vpb(), target);
  }

  // bool guide_cps = 31;
  if (this->guide_cps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->guide_cps(), target);
  }

  // string crane_id = 32;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.crane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        32, this->crane_id(), target);
  }

  // bool has_navi = 33;
  if (this->has_navi() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->has_navi(), target);
  }

  // bool need_manual = 34;
  if (this->need_manual() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->need_manual(), target);
  }

  // string tos_id = 35;
  if (this->tos_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tos_id().data(), static_cast<int>(this->tos_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Task.tos_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        35, this->tos_id(), target);
  }

  // .common.WaitPoint wait_point = 36;
  if (this->wait_point() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->wait_point(), target);
  }

  // .common.TwinFlag twin_flag = 37;
  if (this->twin_flag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->twin_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.Container containers = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->containers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->containers(static_cast<int>(i)));
    }
  }

  // string trace_id = 3;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  // string task_id = 5;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // string plan_destination = 12;
  if (this->plan_destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->plan_destination());
  }

  // string actual_destination = 13;
  if (this->actual_destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->actual_destination());
  }

  // string target = 20;
  if (this->target().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->target());
  }

  // string sub_target = 21;
  if (this->sub_target().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_target());
  }

  // string problem_code = 25;
  if (this->problem_code().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->problem_code());
  }

  // string problem_description = 26;
  if (this->problem_description().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->problem_description());
  }

  // string up_vpb = 29;
  if (this->up_vpb().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->up_vpb());
  }

  // string down_vpb = 30;
  if (this->down_vpb().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->down_vpb());
  }

  // string crane_id = 32;
  if (this->crane_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crane_id());
  }

  // string tos_id = 35;
  if (this->tos_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tos_id());
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp updated = 2;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .common.Point loc_point = 14;
  if (this->has_loc_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loc_point_);
  }

  // .common.Point dest_point = 15;
  if (this->has_dest_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_point_);
  }

  // uint32 order_version = 4;
  if (this->order_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->order_version());
  }

  // uint32 task_version = 6;
  if (this->task_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->task_version());
  }

  // .common.OrderStatus status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // .common.OrderType act_order_type = 9;
  if (this->act_order_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->act_order_type());
  }

  // .common.BusinessType act_business_type = 10;
  if (this->act_business_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->act_business_type());
  }

  // .common.DestType dest_type = 11;
  if (this->dest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dest_type());
  }

  // .common.TaskType task_type = 16;
  if (this->task_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->task_type());
  }

  // .common.TaskMode task_mode = 17;
  if (this->task_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->task_mode());
  }

  // .common.GuideType guide_type = 19;
  if (this->guide_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->guide_type());
  }

  // .common.GuideType active_cps_type = 23;
  if (this->active_cps_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->active_cps_type());
  }

  // .common.BypassSequence bypass_sequence = 24;
  if (this->bypass_sequence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bypass_sequence());
  }

  // bool guide_stop = 18;
  if (this->guide_stop() != 0) {
    total_size += 2 + 1;
  }

  // bool active_cps = 22;
  if (this->active_cps() != 0) {
    total_size += 2 + 1;
  }

  // bool guide_cps = 31;
  if (this->guide_cps() != 0) {
    total_size += 2 + 1;
  }

  // bool has_navi = 33;
  if (this->has_navi() != 0) {
    total_size += 2 + 1;
  }

  // .common.WorkCycleDirection route_direction = 27;
  if (this->route_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->route_direction());
  }

  // bool need_manual = 34;
  if (this->need_manual() != 0) {
    total_size += 2 + 1;
  }

  // .common.WaitPoint wait_point = 36;
  if (this->wait_point() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wait_point());
  }

  // .common.TwinFlag twin_flag = 37;
  if (this->twin_flag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->twin_flag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.plan_destination().size() > 0) {

    plan_destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_destination_);
  }
  if (from.actual_destination().size() > 0) {

    actual_destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_destination_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.sub_target().size() > 0) {

    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  if (from.problem_code().size() > 0) {

    problem_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.problem_code_);
  }
  if (from.problem_description().size() > 0) {

    problem_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.problem_description_);
  }
  if (from.up_vpb().size() > 0) {

    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  if (from.down_vpb().size() > 0) {

    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  if (from.crane_id().size() > 0) {

    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  if (from.tos_id().size() > 0) {

    tos_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tos_id_);
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_updated()) {
    mutable_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.updated());
  }
  if (from.has_loc_point()) {
    mutable_loc_point()->::common::Point::MergeFrom(from.loc_point());
  }
  if (from.has_dest_point()) {
    mutable_dest_point()->::common::Point::MergeFrom(from.dest_point());
  }
  if (from.order_version() != 0) {
    set_order_version(from.order_version());
  }
  if (from.task_version() != 0) {
    set_task_version(from.task_version());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.act_order_type() != 0) {
    set_act_order_type(from.act_order_type());
  }
  if (from.act_business_type() != 0) {
    set_act_business_type(from.act_business_type());
  }
  if (from.dest_type() != 0) {
    set_dest_type(from.dest_type());
  }
  if (from.task_type() != 0) {
    set_task_type(from.task_type());
  }
  if (from.task_mode() != 0) {
    set_task_mode(from.task_mode());
  }
  if (from.guide_type() != 0) {
    set_guide_type(from.guide_type());
  }
  if (from.active_cps_type() != 0) {
    set_active_cps_type(from.active_cps_type());
  }
  if (from.bypass_sequence() != 0) {
    set_bypass_sequence(from.bypass_sequence());
  }
  if (from.guide_stop() != 0) {
    set_guide_stop(from.guide_stop());
  }
  if (from.active_cps() != 0) {
    set_active_cps(from.active_cps());
  }
  if (from.guide_cps() != 0) {
    set_guide_cps(from.guide_cps());
  }
  if (from.has_navi() != 0) {
    set_has_navi(from.has_navi());
  }
  if (from.route_direction() != 0) {
    set_route_direction(from.route_direction());
  }
  if (from.need_manual() != 0) {
    set_need_manual(from.need_manual());
  }
  if (from.wait_point() != 0) {
    set_wait_point(from.wait_point());
  }
  if (from.twin_flag() != 0) {
    set_twin_flag(from.twin_flag());
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&containers_)->InternalSwap(CastToBase(&other->containers_));
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plan_destination_.Swap(&other->plan_destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  actual_destination_.Swap(&other->actual_destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_target_.Swap(&other->sub_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  problem_code_.Swap(&other->problem_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  problem_description_.Swap(&other->problem_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  up_vpb_.Swap(&other->up_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  down_vpb_.Swap(&other->down_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crane_id_.Swap(&other->crane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tos_id_.Swap(&other->tos_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(updated_, other->updated_);
  swap(loc_point_, other->loc_point_);
  swap(dest_point_, other->dest_point_);
  swap(order_version_, other->order_version_);
  swap(task_version_, other->task_version_);
  swap(status_, other->status_);
  swap(act_order_type_, other->act_order_type_);
  swap(act_business_type_, other->act_business_type_);
  swap(dest_type_, other->dest_type_);
  swap(task_type_, other->task_type_);
  swap(task_mode_, other->task_mode_);
  swap(guide_type_, other->guide_type_);
  swap(active_cps_type_, other->active_cps_type_);
  swap(bypass_sequence_, other->bypass_sequence_);
  swap(guide_stop_, other->guide_stop_);
  swap(active_cps_, other->active_cps_);
  swap(guide_cps_, other->guide_cps_);
  swap(has_navi_, other->has_navi_);
  swap(route_direction_, other->route_direction_);
  swap(need_manual_, other->need_manual_);
  swap(wait_point_, other->wait_point_);
  swap(twin_flag_, other->twin_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::Task* Arena::CreateMaybeMessage< ::common::Task >(Arena* arena) {
  return Arena::CreateInternal< ::common::Task >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
