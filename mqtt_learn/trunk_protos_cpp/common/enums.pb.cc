// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/enums.proto

#include "./enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace common {
}  // namespace common
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_common_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fenums_2eproto[40];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_common_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022common/enums.proto\022\006common*\210\001\n\013OrderSt"
  "atus\022\030\n\024ORDER_STATUS_DEFAULT\020\000\022\013\n\007ENTERE"
  "D\020\001\022\r\n\tEXECUTING\020\002\022\r\n\tCOMPLETED\020\003\022\014\n\010REJ"
  "ECTED\020\004\022\014\n\010CANCELED\020\005\022\013\n\007ABORTED\020\006\022\013\n\007UP"
  "DATED\020\007*n\n\tOrderType\022\026\n\022ORDER_TYPE_DEFAU"
  "LT\020\000\022\010\n\004MOVE\020\001\022\013\n\007DELIVER\020\002\022\013\n\007RECEIVE\020\003"
  "\022\n\n\006CHARGE\020\004\022\017\n\013MAINTENANCE\020\005\022\010\n\004PARK\020\006*"
  "\203\001\n\014BusinessType\022\031\n\025BUSINESS_TYPE_DEFAUL"
  "T\020\000\022\010\n\004LOAD\020\001\022\010\n\004DSCH\020\002\022\r\n\tYARD_MOVE\020\003\022\017"
  "\n\013MANUAL_MOVE\020\004\022\013\n\007BT_PARK\020\005\022\r\n\tBT_CHARG"
  "E\020\006\022\010\n\004XRAY\020\007*V\n\017TechnicalStatus\022\027\n\023TECH"
  "_STATUS_DEFAULT\020\000\022\t\n\005GREEN\020\001\022\n\n\006YELLOW\020\002"
  "\022\n\n\006ORANGE\020\003\022\007\n\003RED\020\004*A\n\014MotionStatus\022\031\n"
  "\025MOTION_STATUS_DEFAULT\020\000\022\n\n\006MOTION\020\001\022\n\n\006"
  "STATIC\020\002*Y\n\022WorkCycleDirection\022 \n\034WORK_C"
  "YCLE_DIRECTION_DEFAULT\020\000\022\r\n\tCLOCKWISE\020\001\022"
  "\022\n\016ANTI_CLOCKWISE\020\002*D\n\017VesselDirection\022\034"
  "\n\030VESSEL_DIRECTION_DEFAULT\020\000\022\t\n\005RIGHT\020\001\022"
  "\010\n\004LEFT\020\002*\"\n\004Gear\022\005\n\001P\020\000\022\005\n\001R\020\001\022\005\n\001N\020\002\022\005"
  "\n\001D\020\003*\261\001\n\021OperationalStatus\022\034\n\030OPERATION"
  "_STATUS_DEFAULT\020\000\022\013\n\007OFFLINE\020\001\022\r\n\tAUTOMA"
  "TIC\020\002\022\021\n\rREMOTECONTROL\020\003\022\n\n\006MANUAL\020\004\022\014\n\010"
  "RECHARGE\020\005\022\017\n\013MAINTANANCE\020\006\022\t\n\005FAULT\020\007\022\017"
  "\n\013AUTOSTANDBY\020\010\022\010\n\004TEST\020\t*K\n\tTurnLight\022\025"
  "\n\021TRUNLIGHT_DEFAULT\020\000\022\022\n\016LEFT_DIRECTION\020"
  "\001\022\023\n\017RIGHT_DIRECTION\020\002*\223\002\n\tStateFlow\022\010\n\004"
  "IDLE\020\000\022\023\n\017EXECUTE_RUNNING\020\001\022\026\n\022EXECUTE_P"
  "NDARRIVED\020\002\022\030\n\024EXECUTE_AUTOALIGNING\020\003\022\023\n"
  "\017EXECUTE_ARRIVED\020\004\022\014\n\010STOPPING\020\005\022\020\n\014STOP"
  "_STOPPED\020\006\022\022\n\016ALIGN_ALIGNING\020\007\022\021\n\rALIGN_"
  "ALIGNED\020\010\022\013\n\007WORKING\020\t\022\t\n\005SLEEP\020\n\022\024\n\020CHA"
  "RGER_CHARGING\020\013\022\023\n\017CHARGER_CLOSEHV\020\014\022\026\n\022"
  "STATE_FLOW_OFFLINE\020c*_\n\014ContainerPos\022\031\n\025"
  "CONTAINER_POS_DEFAULT\020\000\022\021\n\rCON_POS_FRONT"
  "\020\001\022\017\n\013CON_POS_MID\020\002\022\020\n\014CON_POS_REAR\020\003*\353\001"
  "\n\010TaskType\022\025\n\021TASK_TYPE_DEFAULT\020\000\022\017\n\013EMP"
  "TY_TO_QC\020\001\022\016\n\nFULL_TO_QC\020\002\022\017\n\013EMPTY_TO_Y"
  "C\020\003\022\016\n\nFULL_TO_YC\020\004\022\020\n\014EMPTY_TO_ECY\020\005\022\017\n"
  "\013FULL_TO_ECY\020\006\022\r\n\tTO_BUFFER\020\007\022\020\n\014TO_LOCK"
  "_AREA\020\010\022\030\n\024EMPTY_TO_INTERACTION\020\t\022\027\n\023FUL"
  "L_TO_INTERACTION\020\n\022\017\n\013TRUCK_POWER\020\013*Y\n\010T"
  "askMode\022\025\n\021TASK_MODE_DEFAULT\020\000\022\010\n\004AUTO\020\001"
  "\022\007\n\003GUI\020\002\022\020\n\014ACTIVE_GUIDE\020\003\022\021\n\rPASSIVE_G"
  "UIDE\020\004*Y\n\014SteeringMode\022\031\n\025STEERING_MODE_"
  "DEFAULT\020\000\022\r\n\tCRAB_WALK\020\001\022\017\n\013FRONT_HALF8\020"
  "\002\022\016\n\nREAR_HALF8\020\003*F\n\017AttendanceState\022\034\n\030"
  "ATTENDANCE_STATE_DEFAULT\020\000\022\t\n\005LOGIN\020\001\022\n\n"
  "\006LOGOUT\020\002*\205\001\n\nLogoutType\022\027\n\023LOGOUT_TYPE_"
  "DEFAULT\020\000\022\r\n\tLT_NORMAL\020\001\022\035\n\031LT_FMS2TPA_H"
  "EART_TIME_OUT\020\002\022\035\n\031LT_TPA2FMS_HEART_TIME"
  "_OUT\020\003\022\021\n\rNETWORK_ERROR\020\004*p\n\021ArrivedStat"
  "usType\022\016\n\nAT_DEFAULT\020\000\022\t\n\005AT_TZ\020\001\022\t\n\005AT_"
  "TP\020\002\022\024\n\020ALIGNED_UNLOCKED\020\003\022\022\n\016ALIGNED_LO"
  "CKED\020\004\022\013\n\007STOPPED\020\005*{\n\016InpositionType\022\017\n"
  "\013IPT_DEFAULT\020\000\022\020\n\014LEAVE_SAFELY\020\001\022\r\n\tMAKE"
  "_LOCK\020\002\022\022\n\016MAKE_ALIGNMENT\020\003\022\017\n\013CPS_INVAL"
  "ID\020\004\022\022\n\016CRANE_UNSEATED\020\005*D\n\tGuideType\022\026\n"
  "\022GUIDE_TYPE_DEFAULT\020\000\022\n\n\006COLUMN\020\001\022\n\n\006GIR"
  "DER\020\002\022\007\n\003TAG\020\003*\314\001\n\010DestType\022\025\n\021DEST_TYPE"
  "_DEFAULT\020\000\022\010\n\004YCTP\020\001\022\010\n\004PSTP\020\002\022\006\n\002PB\020\003\022\014"
  "\n\010PSTP_HPB\020\004\022\014\n\010PSTP_QPB\020\005\022\010\n\004QCTP\020\006\022\n\n\006"
  "QCTP_1\020\007\022\n\n\006QCTP_2\020\010\022\n\n\006QCTP_3\020\t\022\n\n\006QCTP"
  "_4\020\n\022\n\n\006QCTP_5\020\013\022\010\n\004PCTP\020\014\022\014\n\010CHARGETP\020\r"
  "\022\n\n\006XRAYTP\020\016\022\007\n\003VPB\020\017*\226\001\n\rWayPointsMode\022"
  "\031\n\025WAYPOINT_MODE_DEFAULT\020\000\022\014\n\010WPM_NONE\020\001"
  "\022\016\n\nTRAJECTORY\020\002\022\013\n\007SECTION\020\003\022\027\n\023TURN_HA"
  "S_TRAJECTORY\020\004\022\026\n\022TURN_NO_TRAJECTORY\020\005\022\016"
  "\n\nOPEN_SPACE\020\006*]\n\021SafeDistanceLevel\022\032\n\026S"
  "AFE_DIS_LEVEL_DEFAULT\020\000\022\007\n\003FAR\020\001\022\010\n\004NEAR"
  "\020\002\022\t\n\005CLOSE\020\003\022\016\n\nIN_STATION\020\004*\374\001\n\tPointT"
  "ype\022\026\n\022POINT_TYPE_DEFAULT\020\000\022\014\n\010STRAIGHT\020"
  "\001\022\010\n\004TURN\020\002\022\026\n\022LANE_CHANGE_NORMAL\020\003\022\"\n\036L"
  "ANE_CHANGE_ENTER_WORKING_LANE\020\004\022\035\n\031LANE_"
  "CHANGE_ENTER_STATION\020\005\022!\n\035LANE_CHANGE_EN"
  "TER_CHARGE_LANE\020\006\022 \n\034LANE_CHANGE_OUT_WOR"
  "KING_LANE\020\007\022\037\n\033LANE_CHANGE_OUT_CHARGE_LA"
  "NE\020\010*H\n\016DriveDirection\022\033\n\027DRIVE_DIRECTIO"
  "N_DEFAULT\020\000\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002*\206"
  "\001\n\013ControlType\022\030\n\024CONTROL_TYPE_DEFAULT\020\000"
  "\022\t\n\005PAUSE\020\001\022\n\n\006FINISH\020\002\022\n\n\006CANCEL\020\003\022\t\n\005A"
  "BORT\020\004\022\n\n\006RESUME\020\005\022\010\n\004LOCK\020\006\022\n\n\006UNLOCK\020\007"
  "\022\r\n\tSLOW_STOP\020\010*;\n\016LaneChangeType\022\016\n\nLC_"
  "DEFAULT\020\000\022\013\n\007LEFT_LC\020\001\022\014\n\010RIGHT_LC\020\002*z\n\014"
  "DriveCmdType\022\032\n\026DRIVE_CMD_TYPE_DEFAULT\020\000"
  "\022\017\n\013LEFT_BYPASS\020\001\022\024\n\020LEFT_LANE_CHANGE\020\002\022"
  "\020\n\014RIGHT_BYPASS\020\003\022\025\n\021RIGHT_LANE_CHANGE\020\004"
  "*2\n\rPowerMgmtType\022\017\n\013PMT_DEFAULT\020\000\022\006\n\002UP"
  "\020\001\022\010\n\004DOWN\020\002*[\n\013ChargerType\022\030\n\024CHARGER_T"
  "YPE_DEFAULT\020\000\022\014\n\010CHARGING\020\001\022\023\n\017CHARGE_CO"
  "MPLETE\020\002\022\017\n\013CHARGE_FAIL\020\003*W\n\016BypassSeque"
  "nce\022\033\n\027BYPASS_SEQUENCE_DEFAULT\020\000\022\r\n\tFREE"
  "STYLE\020\001\022\r\n\tSELECTIVE\020\002\022\n\n\006STRICT\020\003*i\n\nAr"
  "eaStatus\022\027\n\023AREA_STATUS_DEFAULT\020\000\022\026\n\022ARE"
  "A_STATUS_CLOSED\020\001\022\024\n\020AREA_STATUS_IDLE\020\002\022"
  "\024\n\020AREA_STATUS_USED\020\003*\307\001\n\nPinsStatus\022\027\n\023"
  "PINS_STATUS_DEFAULT\020\000\022\025\n\021PINS_STATUS_REA"
  "DY\020\001\022\025\n\021PINS_STATUS_AT_TZ\020\002\022\025\n\021PINS_STAT"
  "US_AT_TP\020\003\022\024\n\020PINS_STATUS_LOCK\020\004\022\026\n\022PINS"
  "_STATUS_UNLOCK\020\005\022\027\n\023PINS_STATUS_LEAVING\020"
  "\006\022\024\n\020PINS_STATUS_IDLE\020\007**\n\007ActType\022\007\n\003AR"
  "T\020\000\022\t\n\005TRUCK\020\001\022\013\n\007STACKER\020\002*%\n\tCraneType"
  "\022\006\n\002QC\020\000\022\006\n\002YC\020\001\022\010\n\004DBYC\020\002*\216\001\n\tWorkState"
  "\022\026\n\022WORK_STATE_DEFAULT\020\000\022\r\n\tWORK_IDLE\020\001\022"
  "\022\n\016WORK_WAIT_NAVI\020\002\022\020\n\014WORK_RUNNING\020\003\022\020\n"
  "\014WORK_ARRIVED\020\004\022\021\n\rWORK_ALIGNING\020\005\022\017\n\013WO"
  "RK_LOCKED\020\006*c\n\tWaitPoint\022\026\n\022WAIT_POINT_D"
  "EFAULT\020\000\022\024\n\020WAIT_POINT_FRONT\020\001\022\023\n\017WAIT_P"
  "OINT_WORK\020\002\022\023\n\017WAIT_POINT_REAR\020\003*[\n\010Twin"
  "Flag\022\025\n\021TWIN_FLAG_DEFAULT\020\000\022\022\n\016TWIN_FLAG"
  "_BIND\020\001\022\024\n\020TWIN_FLAG_UNBIND\020\002\022\016\n\nALONE_F"
  "LAG\020\003*t\n\007ConShow\022\024\n\020CON_SHOW_DEFAULT\020\000\022\017"
  "\n\013CON_SHOW_FS\020\001\022\017\n\013CON_SHOW_RS\020\002\022\017\n\013CON_"
  "SHOW_MS\020\003\022\017\n\013CON_SHOW_MB\020\004\022\017\n\013CON_SHOW_T"
  "S\020\005*M\n\nSpeedLevel\022\016\n\nHIGH_SPEED\020\000\022\020\n\014MED"
  "IUM_SPEED\020\001\022\r\n\tLOW_SPEED\020\002\022\016\n\nWIND_SPEED"
  "\020\003B\tZ\007/commonb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fenums_2eproto_once;
static bool descriptor_table_common_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fenums_2eproto = {
  &descriptor_table_common_2fenums_2eproto_initialized, descriptor_table_protodef_common_2fenums_2eproto, "common/enums.proto", 4621,
  &descriptor_table_common_2fenums_2eproto_once, descriptor_table_common_2fenums_2eproto_sccs, descriptor_table_common_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_common_2fenums_2eproto::offsets,
  file_level_metadata_common_2fenums_2eproto, 0, file_level_enum_descriptors_common_2fenums_2eproto, file_level_service_descriptors_common_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fenums_2eproto), true);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[0];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[1];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusinessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[2];
}
bool BusinessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TechnicalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[3];
}
bool TechnicalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[4];
}
bool MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkCycleDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[5];
}
bool WorkCycleDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VesselDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[6];
}
bool VesselDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[7];
}
bool Gear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[8];
}
bool OperationalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnLight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[9];
}
bool TurnLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateFlow_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[10];
}
bool StateFlow_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerPos_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[11];
}
bool ContainerPos_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[12];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[13];
}
bool TaskMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SteeringMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[14];
}
bool SteeringMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttendanceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[15];
}
bool AttendanceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[16];
}
bool LogoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArrivedStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[17];
}
bool ArrivedStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InpositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[18];
}
bool InpositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[19];
}
bool GuideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[20];
}
bool DestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WayPointsMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[21];
}
bool WayPointsMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SafeDistanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[22];
}
bool SafeDistanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[23];
}
bool PointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[24];
}
bool DriveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[25];
}
bool ControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[26];
}
bool LaneChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveCmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[27];
}
bool DriveCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerMgmtType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[28];
}
bool PowerMgmtType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChargerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[29];
}
bool ChargerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BypassSequence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[30];
}
bool BypassSequence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AreaStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[31];
}
bool AreaStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[32];
}
bool PinsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[33];
}
bool ActType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CraneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[34];
}
bool CraneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[35];
}
bool WorkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaitPoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[36];
}
bool WaitPoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TwinFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[37];
}
bool TwinFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConShow_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[38];
}
bool ConShow_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenums_2eproto);
  return file_level_enum_descriptors_common_2fenums_2eproto[39];
}
bool SpeedLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
