// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/navi.proto

#include "./navi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fnavi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvisorySpeeds_common_2fnavi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fnavi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeWindow_common_2fnavi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fnavi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WayPoint_common_2fnavi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace common {
class AdvisorySpeedsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvisorySpeeds> _instance;
} _AdvisorySpeeds_default_instance_;
class TimeWindowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeWindow> _instance;
} _TimeWindow_default_instance_;
class WayPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WayPoint> _instance;
} _WayPoint_default_instance_;
class NaviDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Navi> _instance;
} _Navi_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_AdvisorySpeeds_common_2fnavi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_AdvisorySpeeds_default_instance_;
    new (ptr) ::common::AdvisorySpeeds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::AdvisorySpeeds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvisorySpeeds_common_2fnavi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AdvisorySpeeds_common_2fnavi_2eproto}, {}};

static void InitDefaultsscc_info_Navi_common_2fnavi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_Navi_default_instance_;
    new (ptr) ::common::Navi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::Navi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Navi_common_2fnavi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Navi_common_2fnavi_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_WayPoint_common_2fnavi_2eproto.base,}};

static void InitDefaultsscc_info_TimeWindow_common_2fnavi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_TimeWindow_default_instance_;
    new (ptr) ::common::TimeWindow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::TimeWindow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeWindow_common_2fnavi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TimeWindow_common_2fnavi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_WayPoint_common_2fnavi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_WayPoint_default_instance_;
    new (ptr) ::common::WayPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::WayPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WayPoint_common_2fnavi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_WayPoint_common_2fnavi_2eproto}, {
      &scc_info_Point_common_2fpoint_2eproto.base,
      &scc_info_AdvisorySpeeds_common_2fnavi_2eproto.base,
      &scc_info_TimeWindow_common_2fnavi_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fnavi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fnavi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fnavi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fnavi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::AdvisorySpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::AdvisorySpeeds, vmax_),
  PROTOBUF_FIELD_OFFSET(::common::AdvisorySpeeds, vmax_dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TimeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::TimeWindow, time_),
  PROTOBUF_FIELD_OFFSET(::common::TimeWindow, time_dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, pos_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, heading_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, speeds_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, time_window_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, type_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, driving_direction_),
  PROTOBUF_FIELD_OFFSET(::common::WayPoint, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Navi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Navi, header_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, task_id_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, navi_id_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, seq_num_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, route_direction_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, dest_type_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, mode_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, up_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, down_vpb_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, route_update_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, waypoints_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, safe_distance_level_),
  PROTOBUF_FIELD_OFFSET(::common::Navi, is_final_navi_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::AdvisorySpeeds)},
  { 7, -1, sizeof(::common::TimeWindow)},
  { 14, -1, sizeof(::common::WayPoint)},
  { 26, -1, sizeof(::common::Navi)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_AdvisorySpeeds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_TimeWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_WayPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Navi_default_instance_),
};

const char descriptor_table_protodef_common_2fnavi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021common/navi.proto\022\006common\032\022common/enum"
  "s.proto\032\022common/point.proto\032\023common/head"
  "er.proto\032\037google/protobuf/timestamp.prot"
  "o\"0\n\016AdvisorySpeeds\022\014\n\004vmax\030\001 \001(\002\022\020\n\010vma"
  "x_dev\030\002 \001(\002\"H\n\nTimeWindow\022(\n\004time\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\022\020\n\010time_dev\030"
  "\002 \001(\005\"\350\001\n\010WayPoint\022\032\n\003pos\030\001 \001(\0132\r.common"
  ".Point\022\017\n\007heading\030\002 \001(\001\022&\n\006speeds\030\003 \001(\0132"
  "\026.common.AdvisorySpeeds\022\'\n\013time_window\030\004"
  " \001(\0132\022.common.TimeWindow\022\037\n\004type\030\005 \001(\0162\021"
  ".common.PointType\0221\n\021driving_direction\030\006"
  " \001(\0162\026.common.DriveDirection\022\n\n\002id\030\007 \001(\t"
  "\"\204\003\n\004Navi\022\036\n\006header\030\001 \001(\0132\016.common.Heade"
  "r\022\017\n\007task_id\030\002 \001(\t\022\017\n\007navi_id\030\003 \001(\t\022\017\n\007s"
  "eq_num\030\004 \001(\r\0223\n\017route_direction\030\005 \001(\0162\032."
  "common.WorkCycleDirection\022#\n\tdest_type\030\006"
  " \001(\0162\020.common.DestType\022#\n\004mode\030\007 \001(\0162\025.c"
  "ommon.WayPointsMode\022\016\n\006up_vpb\030\010 \001(\t\022\020\n\010d"
  "own_vpb\030\t \001(\t\022\024\n\014route_update\030\n \001(\010\022#\n\tw"
  "aypoints\030\013 \003(\0132\020.common.WayPoint\0226\n\023safe"
  "_distance_level\030\014 \001(\0162\031.common.SafeDista"
  "nceLevel\022\025\n\ris_final_navi\030\r \001(\010B\tZ\007/comm"
  "onb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fnavi_2eproto_deps[4] = {
  &::descriptor_table_common_2fenums_2eproto,
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_common_2fpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fnavi_2eproto_sccs[4] = {
  &scc_info_AdvisorySpeeds_common_2fnavi_2eproto.base,
  &scc_info_Navi_common_2fnavi_2eproto.base,
  &scc_info_TimeWindow_common_2fnavi_2eproto.base,
  &scc_info_WayPoint_common_2fnavi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fnavi_2eproto_once;
static bool descriptor_table_common_2fnavi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fnavi_2eproto = {
  &descriptor_table_common_2fnavi_2eproto_initialized, descriptor_table_protodef_common_2fnavi_2eproto, "common/navi.proto", 890,
  &descriptor_table_common_2fnavi_2eproto_once, descriptor_table_common_2fnavi_2eproto_sccs, descriptor_table_common_2fnavi_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_common_2fnavi_2eproto::offsets,
  file_level_metadata_common_2fnavi_2eproto, 4, file_level_enum_descriptors_common_2fnavi_2eproto, file_level_service_descriptors_common_2fnavi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fnavi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fnavi_2eproto), true);
namespace common {

// ===================================================================

void AdvisorySpeeds::InitAsDefaultInstance() {
}
class AdvisorySpeeds::_Internal {
 public:
};

AdvisorySpeeds::AdvisorySpeeds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.AdvisorySpeeds)
}
AdvisorySpeeds::AdvisorySpeeds(const AdvisorySpeeds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vmax_, &from.vmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&vmax_dev_) -
    reinterpret_cast<char*>(&vmax_)) + sizeof(vmax_dev_));
  // @@protoc_insertion_point(copy_constructor:common.AdvisorySpeeds)
}

void AdvisorySpeeds::SharedCtor() {
  ::memset(&vmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vmax_dev_) -
      reinterpret_cast<char*>(&vmax_)) + sizeof(vmax_dev_));
}

AdvisorySpeeds::~AdvisorySpeeds() {
  // @@protoc_insertion_point(destructor:common.AdvisorySpeeds)
  SharedDtor();
}

void AdvisorySpeeds::SharedDtor() {
}

void AdvisorySpeeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvisorySpeeds& AdvisorySpeeds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvisorySpeeds_common_2fnavi_2eproto.base);
  return *internal_default_instance();
}


void AdvisorySpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:common.AdvisorySpeeds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vmax_dev_) -
      reinterpret_cast<char*>(&vmax_)) + sizeof(vmax_dev_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdvisorySpeeds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float vmax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          vmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vmax_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vmax_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdvisorySpeeds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.AdvisorySpeeds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float vmax = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vmax_dev = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vmax_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.AdvisorySpeeds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.AdvisorySpeeds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdvisorySpeeds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.AdvisorySpeeds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vmax = 1;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->vmax(), output);
  }

  // float vmax_dev = 2;
  if (!(this->vmax_dev() <= 0 && this->vmax_dev() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vmax_dev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.AdvisorySpeeds)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvisorySpeeds::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.AdvisorySpeeds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vmax = 1;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->vmax(), target);
  }

  // float vmax_dev = 2;
  if (!(this->vmax_dev() <= 0 && this->vmax_dev() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vmax_dev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.AdvisorySpeeds)
  return target;
}

size_t AdvisorySpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.AdvisorySpeeds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float vmax = 1;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    total_size += 1 + 4;
  }

  // float vmax_dev = 2;
  if (!(this->vmax_dev() <= 0 && this->vmax_dev() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvisorySpeeds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.AdvisorySpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvisorySpeeds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvisorySpeeds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.AdvisorySpeeds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.AdvisorySpeeds)
    MergeFrom(*source);
  }
}

void AdvisorySpeeds::MergeFrom(const AdvisorySpeeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.AdvisorySpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.vmax() <= 0 && from.vmax() >= 0)) {
    set_vmax(from.vmax());
  }
  if (!(from.vmax_dev() <= 0 && from.vmax_dev() >= 0)) {
    set_vmax_dev(from.vmax_dev());
  }
}

void AdvisorySpeeds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.AdvisorySpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvisorySpeeds::CopyFrom(const AdvisorySpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.AdvisorySpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvisorySpeeds::IsInitialized() const {
  return true;
}

void AdvisorySpeeds::InternalSwap(AdvisorySpeeds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vmax_, other->vmax_);
  swap(vmax_dev_, other->vmax_dev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvisorySpeeds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeWindow::InitAsDefaultInstance() {
  ::common::_TimeWindow_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimeWindow::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const TimeWindow* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeWindow::_Internal::time(const TimeWindow* msg) {
  return *msg->time_;
}
void TimeWindow::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
TimeWindow::TimeWindow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.TimeWindow)
}
TimeWindow::TimeWindow(const TimeWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  time_dev_ = from.time_dev_;
  // @@protoc_insertion_point(copy_constructor:common.TimeWindow)
}

void TimeWindow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeWindow_common_2fnavi_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_dev_) -
      reinterpret_cast<char*>(&time_)) + sizeof(time_dev_));
}

TimeWindow::~TimeWindow() {
  // @@protoc_insertion_point(destructor:common.TimeWindow)
  SharedDtor();
}

void TimeWindow::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void TimeWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeWindow& TimeWindow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeWindow_common_2fnavi_2eproto.base);
  return *internal_default_instance();
}


void TimeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TimeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  time_dev_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeWindow::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.TimeWindow)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_dev = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.TimeWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.TimeWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeWindow::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.TimeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::time(this), output);
  }

  // int32 time_dev = 2;
  if (this->time_dev() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->time_dev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.TimeWindow)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeWindow::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TimeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::time(this), target);
  }

  // int32 time_dev = 2;
  if (this->time_dev() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->time_dev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TimeWindow)
  return target;
}

size_t TimeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TimeWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // int32 time_dev = 2;
  if (this->time_dev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->time_dev());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.TimeWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.TimeWindow)
    MergeFrom(*source);
  }
}

void TimeWindow::MergeFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.time());
  }
  if (from.time_dev() != 0) {
    set_time_dev(from.time_dev());
  }
}

void TimeWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeWindow::CopyFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeWindow::IsInitialized() const {
  return true;
}

void TimeWindow::InternalSwap(TimeWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(time_dev_, other->time_dev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WayPoint::InitAsDefaultInstance() {
  ::common::_WayPoint_default_instance_._instance.get_mutable()->pos_ = const_cast< ::common::Point*>(
      ::common::Point::internal_default_instance());
  ::common::_WayPoint_default_instance_._instance.get_mutable()->speeds_ = const_cast< ::common::AdvisorySpeeds*>(
      ::common::AdvisorySpeeds::internal_default_instance());
  ::common::_WayPoint_default_instance_._instance.get_mutable()->time_window_ = const_cast< ::common::TimeWindow*>(
      ::common::TimeWindow::internal_default_instance());
}
class WayPoint::_Internal {
 public:
  static const ::common::Point& pos(const WayPoint* msg);
  static const ::common::AdvisorySpeeds& speeds(const WayPoint* msg);
  static const ::common::TimeWindow& time_window(const WayPoint* msg);
};

const ::common::Point&
WayPoint::_Internal::pos(const WayPoint* msg) {
  return *msg->pos_;
}
const ::common::AdvisorySpeeds&
WayPoint::_Internal::speeds(const WayPoint* msg) {
  return *msg->speeds_;
}
const ::common::TimeWindow&
WayPoint::_Internal::time_window(const WayPoint* msg) {
  return *msg->time_window_;
}
void WayPoint::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
WayPoint::WayPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.WayPoint)
}
WayPoint::WayPoint(const WayPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pos()) {
    pos_ = new ::common::Point(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from.has_speeds()) {
    speeds_ = new ::common::AdvisorySpeeds(*from.speeds_);
  } else {
    speeds_ = nullptr;
  }
  if (from.has_time_window()) {
    time_window_ = new ::common::TimeWindow(*from.time_window_);
  } else {
    time_window_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&driving_direction_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(driving_direction_));
  // @@protoc_insertion_point(copy_constructor:common.WayPoint)
}

void WayPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WayPoint_common_2fnavi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_direction_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(driving_direction_));
}

WayPoint::~WayPoint() {
  // @@protoc_insertion_point(destructor:common.WayPoint)
  SharedDtor();
}

void WayPoint::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete speeds_;
  if (this != internal_default_instance()) delete time_window_;
}

void WayPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WayPoint& WayPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WayPoint_common_2fnavi_2eproto.base);
  return *internal_default_instance();
}


void WayPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:common.WayPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speeds_ != nullptr) {
    delete speeds_;
  }
  speeds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_direction_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(driving_direction_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WayPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Point pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .common.AdvisorySpeeds speeds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_speeds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TimeWindow time_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_time_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.PointType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::common::PointType>(val));
        } else goto handle_unusual;
        continue;
      // .common.DriveDirection driving_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_driving_direction(static_cast<::common::DriveDirection>(val));
        } else goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "common.WayPoint.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WayPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.WayPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Point pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.AdvisorySpeeds speeds = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TimeWindow time_window = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.PointType type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::common::PointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.DriveDirection driving_direction = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driving_direction(static_cast< ::common::DriveDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.WayPoint.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.WayPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.WayPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WayPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.WayPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Point pos = 1;
  if (this->has_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pos(this), output);
  }

  // double heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  // .common.AdvisorySpeeds speeds = 3;
  if (this->has_speeds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::speeds(this), output);
  }

  // .common.TimeWindow time_window = 4;
  if (this->has_time_window()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::time_window(this), output);
  }

  // .common.PointType type = 5;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .common.DriveDirection driving_direction = 6;
  if (this->driving_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->driving_direction(), output);
  }

  // string id = 7;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.WayPoint.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.WayPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* WayPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.WayPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Point pos = 1;
  if (this->has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pos(this), target);
  }

  // double heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  // .common.AdvisorySpeeds speeds = 3;
  if (this->has_speeds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::speeds(this), target);
  }

  // .common.TimeWindow time_window = 4;
  if (this->has_time_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::time_window(this), target);
  }

  // .common.PointType type = 5;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // .common.DriveDirection driving_direction = 6;
  if (this->driving_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->driving_direction(), target);
  }

  // string id = 7;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.WayPoint.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.WayPoint)
  return target;
}

size_t WayPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.WayPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .common.Point pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .common.AdvisorySpeeds speeds = 3;
  if (this->has_speeds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speeds_);
  }

  // .common.TimeWindow time_window = 4;
  if (this->has_time_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_window_);
  }

  // double heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // .common.PointType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .common.DriveDirection driving_direction = 6;
  if (this->driving_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->driving_direction());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WayPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.WayPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const WayPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WayPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.WayPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.WayPoint)
    MergeFrom(*source);
  }
}

void WayPoint::MergeFrom(const WayPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.WayPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pos()) {
    mutable_pos()->::common::Point::MergeFrom(from.pos());
  }
  if (from.has_speeds()) {
    mutable_speeds()->::common::AdvisorySpeeds::MergeFrom(from.speeds());
  }
  if (from.has_time_window()) {
    mutable_time_window()->::common::TimeWindow::MergeFrom(from.time_window());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.driving_direction() != 0) {
    set_driving_direction(from.driving_direction());
  }
}

void WayPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.WayPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WayPoint::CopyFrom(const WayPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.WayPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WayPoint::IsInitialized() const {
  return true;
}

void WayPoint::InternalSwap(WayPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(speeds_, other->speeds_);
  swap(time_window_, other->time_window_);
  swap(heading_, other->heading_);
  swap(type_, other->type_);
  swap(driving_direction_, other->driving_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WayPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Navi::InitAsDefaultInstance() {
  ::common::_Navi_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
class Navi::_Internal {
 public:
  static const ::common::Header& header(const Navi* msg);
};

const ::common::Header&
Navi::_Internal::header(const Navi* msg) {
  return *msg->header_;
}
void Navi::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Navi::Navi()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Navi)
}
Navi::Navi(const Navi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  navi_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.navi_id().empty()) {
    navi_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.navi_id_);
  }
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.up_vpb().empty()) {
    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.down_vpb().empty()) {
    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&seq_num_, &from.seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_distance_level_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(safe_distance_level_));
  // @@protoc_insertion_point(copy_constructor:common.Navi)
}

void Navi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Navi_common_2fnavi_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_distance_level_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_distance_level_));
}

Navi::~Navi() {
  // @@protoc_insertion_point(destructor:common.Navi)
  SharedDtor();
}

void Navi::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Navi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Navi& Navi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Navi_common_2fnavi_2eproto.base);
  return *internal_default_instance();
}


void Navi::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Navi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  navi_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  up_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  down_vpb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_distance_level_) -
      reinterpret_cast<char*>(&seq_num_)) + sizeof(safe_distance_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Navi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "common.Navi.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string navi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_navi_id(), ptr, ctx, "common.Navi.navi_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.WorkCycleDirection route_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_route_direction(static_cast<::common::WorkCycleDirection>(val));
        } else goto handle_unusual;
        continue;
      // .common.DestType dest_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dest_type(static_cast<::common::DestType>(val));
        } else goto handle_unusual;
        continue;
      // .common.WayPointsMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::common::WayPointsMode>(val));
        } else goto handle_unusual;
        continue;
      // string up_vpb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_up_vpb(), ptr, ctx, "common.Navi.up_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string down_vpb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_down_vpb(), ptr, ctx, "common.Navi.down_vpb");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool route_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          route_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.WayPoint waypoints = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // .common.SafeDistanceLevel safe_distance_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_safe_distance_level(static_cast<::common::SafeDistanceLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool is_final_navi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_final_navi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Navi::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Navi)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Navi.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string navi_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_navi_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->navi_id().data(), static_cast<int>(this->navi_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Navi.navi_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq_num = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.WorkCycleDirection route_direction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_direction(static_cast< ::common::WorkCycleDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.DestType dest_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dest_type(static_cast< ::common::DestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.WayPointsMode mode = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::common::WayPointsMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string up_vpb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_up_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Navi.up_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string down_vpb = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_down_vpb()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.Navi.down_vpb"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool route_update = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.WayPoint waypoints = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.SafeDistanceLevel safe_distance_level = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_safe_distance_level(static_cast< ::common::SafeDistanceLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final_navi = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_navi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Navi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Navi)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Navi::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Navi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // string navi_id = 3;
  if (this->navi_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->navi_id().data(), static_cast<int>(this->navi_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.navi_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->navi_id(), output);
  }

  // uint32 seq_num = 4;
  if (this->seq_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->seq_num(), output);
  }

  // .common.WorkCycleDirection route_direction = 5;
  if (this->route_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->route_direction(), output);
  }

  // .common.DestType dest_type = 6;
  if (this->dest_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->dest_type(), output);
  }

  // .common.WayPointsMode mode = 7;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  // string up_vpb = 8;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.up_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->up_vpb(), output);
  }

  // string down_vpb = 9;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.down_vpb");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->down_vpb(), output);
  }

  // bool route_update = 10;
  if (this->route_update() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->route_update(), output);
  }

  // repeated .common.WayPoint waypoints = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->waypoints(static_cast<int>(i)),
      output);
  }

  // .common.SafeDistanceLevel safe_distance_level = 12;
  if (this->safe_distance_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->safe_distance_level(), output);
  }

  // bool is_final_navi = 13;
  if (this->is_final_navi() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->is_final_navi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.Navi)
}

::PROTOBUF_NAMESPACE_ID::uint8* Navi::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Navi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  // string navi_id = 3;
  if (this->navi_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->navi_id().data(), static_cast<int>(this->navi_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.navi_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->navi_id(), target);
  }

  // uint32 seq_num = 4;
  if (this->seq_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num(), target);
  }

  // .common.WorkCycleDirection route_direction = 5;
  if (this->route_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->route_direction(), target);
  }

  // .common.DestType dest_type = 6;
  if (this->dest_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->dest_type(), target);
  }

  // .common.WayPointsMode mode = 7;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  // string up_vpb = 8;
  if (this->up_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->up_vpb().data(), static_cast<int>(this->up_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.up_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->up_vpb(), target);
  }

  // string down_vpb = 9;
  if (this->down_vpb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->down_vpb().data(), static_cast<int>(this->down_vpb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Navi.down_vpb");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->down_vpb(), target);
  }

  // bool route_update = 10;
  if (this->route_update() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->route_update(), target);
  }

  // repeated .common.WayPoint waypoints = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->waypoints(static_cast<int>(i)), target);
  }

  // .common.SafeDistanceLevel safe_distance_level = 12;
  if (this->safe_distance_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->safe_distance_level(), target);
  }

  // bool is_final_navi = 13;
  if (this->is_final_navi() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->is_final_navi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Navi)
  return target;
}

size_t Navi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Navi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.WayPoint waypoints = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->waypoints(static_cast<int>(i)));
    }
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // string navi_id = 3;
  if (this->navi_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->navi_id());
  }

  // string up_vpb = 8;
  if (this->up_vpb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->up_vpb());
  }

  // string down_vpb = 9;
  if (this->down_vpb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->down_vpb());
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 seq_num = 4;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->seq_num());
  }

  // .common.WorkCycleDirection route_direction = 5;
  if (this->route_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->route_direction());
  }

  // .common.DestType dest_type = 6;
  if (this->dest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dest_type());
  }

  // .common.WayPointsMode mode = 7;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool route_update = 10;
  if (this->route_update() != 0) {
    total_size += 1 + 1;
  }

  // bool is_final_navi = 13;
  if (this->is_final_navi() != 0) {
    total_size += 1 + 1;
  }

  // .common.SafeDistanceLevel safe_distance_level = 12;
  if (this->safe_distance_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->safe_distance_level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Navi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Navi)
  GOOGLE_DCHECK_NE(&from, this);
  const Navi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Navi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Navi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Navi)
    MergeFrom(*source);
  }
}

void Navi::MergeFrom(const Navi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Navi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.navi_id().size() > 0) {

    navi_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.navi_id_);
  }
  if (from.up_vpb().size() > 0) {

    up_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.up_vpb_);
  }
  if (from.down_vpb().size() > 0) {

    down_vpb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.down_vpb_);
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.seq_num() != 0) {
    set_seq_num(from.seq_num());
  }
  if (from.route_direction() != 0) {
    set_route_direction(from.route_direction());
  }
  if (from.dest_type() != 0) {
    set_dest_type(from.dest_type());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.route_update() != 0) {
    set_route_update(from.route_update());
  }
  if (from.is_final_navi() != 0) {
    set_is_final_navi(from.is_final_navi());
  }
  if (from.safe_distance_level() != 0) {
    set_safe_distance_level(from.safe_distance_level());
  }
}

void Navi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Navi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Navi::CopyFrom(const Navi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Navi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navi::IsInitialized() const {
  return true;
}

void Navi::InternalSwap(Navi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&waypoints_)->InternalSwap(CastToBase(&other->waypoints_));
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  navi_id_.Swap(&other->navi_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  up_vpb_.Swap(&other->up_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  down_vpb_.Swap(&other->down_vpb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(seq_num_, other->seq_num_);
  swap(route_direction_, other->route_direction_);
  swap(dest_type_, other->dest_type_);
  swap(mode_, other->mode_);
  swap(route_update_, other->route_update_);
  swap(is_final_navi_, other->is_final_navi_);
  swap(safe_distance_level_, other->safe_distance_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Navi::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::AdvisorySpeeds* Arena::CreateMaybeMessage< ::common::AdvisorySpeeds >(Arena* arena) {
  return Arena::CreateInternal< ::common::AdvisorySpeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TimeWindow* Arena::CreateMaybeMessage< ::common::TimeWindow >(Arena* arena) {
  return Arena::CreateInternal< ::common::TimeWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::common::WayPoint* Arena::CreateMaybeMessage< ::common::WayPoint >(Arena* arena) {
  return Arena::CreateInternal< ::common::WayPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Navi* Arena::CreateMaybeMessage< ::common::Navi >(Arena* arena) {
  return Arena::CreateInternal< ::common::Navi >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
