// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/arrive_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2farrive_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2farrive_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "./header.pb.h"
#include "./enums.pb.h"
#include "./container.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2farrive_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2farrive_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2farrive_5fstatus_2eproto;
namespace common {
class ArriveStatus;
class ArriveStatusDefaultTypeInternal;
extern ArriveStatusDefaultTypeInternal _ArriveStatus_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ArriveStatus* Arena::CreateMaybeMessage<::common::ArriveStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class ArriveStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ArriveStatus) */ {
 public:
  ArriveStatus();
  virtual ~ArriveStatus();

  ArriveStatus(const ArriveStatus& from);
  ArriveStatus(ArriveStatus&& from) noexcept
    : ArriveStatus() {
    *this = ::std::move(from);
  }

  inline ArriveStatus& operator=(const ArriveStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArriveStatus& operator=(ArriveStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArriveStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArriveStatus* internal_default_instance() {
    return reinterpret_cast<const ArriveStatus*>(
               &_ArriveStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArriveStatus& a, ArriveStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ArriveStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArriveStatus* New() const final {
    return CreateMaybeMessage<ArriveStatus>(nullptr);
  }

  ArriveStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArriveStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArriveStatus& from);
  void MergeFrom(const ArriveStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArriveStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ArriveStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2farrive_5fstatus_2eproto);
    return ::descriptor_table_common_2farrive_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 9,
    kOrderIdFieldNumber = 3,
    kTaskIdFieldNumber = 4,
    kCraneIdFieldNumber = 5,
    kTargetFieldNumber = 6,
    kSubTargetFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kCreatedFieldNumber = 2,
    kStatusFieldNumber = 8,
    kEmptyFieldNumber = 10,
    kTwinFlagFieldNumber = 11,
  };
  // repeated .common.Container containers = 9;
  int containers_size() const;
  void clear_containers();
  ::common::Container* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >*
      mutable_containers();
  const ::common::Container& containers(int index) const;
  ::common::Container* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >&
      containers() const;

  // string order_id = 3;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);

  // string task_id = 4;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // string crane_id = 5;
  void clear_crane_id();
  const std::string& crane_id() const;
  void set_crane_id(const std::string& value);
  void set_crane_id(std::string&& value);
  void set_crane_id(const char* value);
  void set_crane_id(const char* value, size_t size);
  std::string* mutable_crane_id();
  std::string* release_crane_id();
  void set_allocated_crane_id(std::string* crane_id);

  // string target = 6;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // string sub_target = 7;
  void clear_sub_target();
  const std::string& sub_target() const;
  void set_sub_target(const std::string& value);
  void set_sub_target(std::string&& value);
  void set_sub_target(const char* value);
  void set_sub_target(const char* value, size_t size);
  std::string* mutable_sub_target();
  std::string* release_sub_target();
  void set_allocated_sub_target(std::string* sub_target);

  // .common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);

  // .google.protobuf.Timestamp created = 2;
  bool has_created() const;
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);

  // .common.ArrivedStatusType status = 8;
  void clear_status();
  ::common::ArrivedStatusType status() const;
  void set_status(::common::ArrivedStatusType value);

  // bool empty = 10;
  void clear_empty();
  bool empty() const;
  void set_empty(bool value);

  // .common.TwinFlag twin_flag = 11;
  void clear_twin_flag();
  ::common::TwinFlag twin_flag() const;
  void set_twin_flag(::common::TwinFlag value);

  // @@protoc_insertion_point(class_scope:common.ArriveStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container > containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crane_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_target_;
  ::common::Header* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  int status_;
  bool empty_;
  int twin_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2farrive_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArriveStatus

// .common.Header header = 1;
inline bool ArriveStatus::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::common::Header& ArriveStatus::header() const {
  const ::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:common.ArriveStatus.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline ::common::Header* ArriveStatus::release_header() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.header)
  
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* ArriveStatus::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.header)
  return header_;
}
inline void ArriveStatus::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.header)
}

// .google.protobuf.Timestamp created = 2;
inline bool ArriveStatus::has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ArriveStatus::created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:common.ArriveStatus.created)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArriveStatus::release_created() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArriveStatus::mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.created)
  return created_;
}
inline void ArriveStatus::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.created)
}

// string order_id = 3;
inline void ArriveStatus::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArriveStatus::order_id() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.order_id)
  return order_id_.GetNoArena();
}
inline void ArriveStatus::set_order_id(const std::string& value) {
  
  order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ArriveStatus.order_id)
}
inline void ArriveStatus::set_order_id(std::string&& value) {
  
  order_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ArriveStatus.order_id)
}
inline void ArriveStatus::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ArriveStatus.order_id)
}
inline void ArriveStatus::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ArriveStatus.order_id)
}
inline std::string* ArriveStatus::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.order_id)
  return order_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArriveStatus::release_order_id() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.order_id)
  
  return order_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArriveStatus::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.order_id)
}

// string task_id = 4;
inline void ArriveStatus::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArriveStatus::task_id() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.task_id)
  return task_id_.GetNoArena();
}
inline void ArriveStatus::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ArriveStatus.task_id)
}
inline void ArriveStatus::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ArriveStatus.task_id)
}
inline void ArriveStatus::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ArriveStatus.task_id)
}
inline void ArriveStatus::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ArriveStatus.task_id)
}
inline std::string* ArriveStatus::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArriveStatus::release_task_id() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArriveStatus::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.task_id)
}

// string crane_id = 5;
inline void ArriveStatus::clear_crane_id() {
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArriveStatus::crane_id() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.crane_id)
  return crane_id_.GetNoArena();
}
inline void ArriveStatus::set_crane_id(const std::string& value) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ArriveStatus.crane_id)
}
inline void ArriveStatus::set_crane_id(std::string&& value) {
  
  crane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ArriveStatus.crane_id)
}
inline void ArriveStatus::set_crane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ArriveStatus.crane_id)
}
inline void ArriveStatus::set_crane_id(const char* value, size_t size) {
  
  crane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ArriveStatus.crane_id)
}
inline std::string* ArriveStatus::mutable_crane_id() {
  
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.crane_id)
  return crane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArriveStatus::release_crane_id() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.crane_id)
  
  return crane_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArriveStatus::set_allocated_crane_id(std::string* crane_id) {
  if (crane_id != nullptr) {
    
  } else {
    
  }
  crane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crane_id);
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.crane_id)
}

// string target = 6;
inline void ArriveStatus::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArriveStatus::target() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.target)
  return target_.GetNoArena();
}
inline void ArriveStatus::set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ArriveStatus.target)
}
inline void ArriveStatus::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ArriveStatus.target)
}
inline void ArriveStatus::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ArriveStatus.target)
}
inline void ArriveStatus::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ArriveStatus.target)
}
inline std::string* ArriveStatus::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArriveStatus::release_target() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArriveStatus::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.target)
}

// string sub_target = 7;
inline void ArriveStatus::clear_sub_target() {
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArriveStatus::sub_target() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.sub_target)
  return sub_target_.GetNoArena();
}
inline void ArriveStatus::set_sub_target(const std::string& value) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ArriveStatus.sub_target)
}
inline void ArriveStatus::set_sub_target(std::string&& value) {
  
  sub_target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ArriveStatus.sub_target)
}
inline void ArriveStatus::set_sub_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ArriveStatus.sub_target)
}
inline void ArriveStatus::set_sub_target(const char* value, size_t size) {
  
  sub_target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ArriveStatus.sub_target)
}
inline std::string* ArriveStatus::mutable_sub_target() {
  
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.sub_target)
  return sub_target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArriveStatus::release_sub_target() {
  // @@protoc_insertion_point(field_release:common.ArriveStatus.sub_target)
  
  return sub_target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArriveStatus::set_allocated_sub_target(std::string* sub_target) {
  if (sub_target != nullptr) {
    
  } else {
    
  }
  sub_target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_target);
  // @@protoc_insertion_point(field_set_allocated:common.ArriveStatus.sub_target)
}

// .common.ArrivedStatusType status = 8;
inline void ArriveStatus::clear_status() {
  status_ = 0;
}
inline ::common::ArrivedStatusType ArriveStatus::status() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.status)
  return static_cast< ::common::ArrivedStatusType >(status_);
}
inline void ArriveStatus::set_status(::common::ArrivedStatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:common.ArriveStatus.status)
}

// repeated .common.Container containers = 9;
inline int ArriveStatus::containers_size() const {
  return containers_.size();
}
inline ::common::Container* ArriveStatus::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:common.ArriveStatus.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >*
ArriveStatus::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:common.ArriveStatus.containers)
  return &containers_;
}
inline const ::common::Container& ArriveStatus::containers(int index) const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.containers)
  return containers_.Get(index);
}
inline ::common::Container* ArriveStatus::add_containers() {
  // @@protoc_insertion_point(field_add:common.ArriveStatus.containers)
  return containers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Container >&
ArriveStatus::containers() const {
  // @@protoc_insertion_point(field_list:common.ArriveStatus.containers)
  return containers_;
}

// bool empty = 10;
inline void ArriveStatus::clear_empty() {
  empty_ = false;
}
inline bool ArriveStatus::empty() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.empty)
  return empty_;
}
inline void ArriveStatus::set_empty(bool value) {
  
  empty_ = value;
  // @@protoc_insertion_point(field_set:common.ArriveStatus.empty)
}

// .common.TwinFlag twin_flag = 11;
inline void ArriveStatus::clear_twin_flag() {
  twin_flag_ = 0;
}
inline ::common::TwinFlag ArriveStatus::twin_flag() const {
  // @@protoc_insertion_point(field_get:common.ArriveStatus.twin_flag)
  return static_cast< ::common::TwinFlag >(twin_flag_);
}
inline void ArriveStatus::set_twin_flag(::common::TwinFlag value) {
  
  twin_flag_ = value;
  // @@protoc_insertion_point(field_set:common.ArriveStatus.twin_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2farrive_5fstatus_2eproto
