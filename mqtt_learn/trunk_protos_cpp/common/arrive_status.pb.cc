// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/arrive_status.proto

#include "./arrive_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fcontainer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_common_2fcontainer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_common_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace common {
class ArriveStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArriveStatus> _instance;
} _ArriveStatus_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_ArriveStatus_common_2farrive_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_ArriveStatus_default_instance_;
    new (ptr) ::common::ArriveStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::ArriveStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ArriveStatus_common_2farrive_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ArriveStatus_common_2farrive_5fstatus_2eproto}, {
      &scc_info_Header_common_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Container_common_2fcontainer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2farrive_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2farrive_5fstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2farrive_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2farrive_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, header_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, created_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, order_id_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, task_id_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, crane_id_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, target_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, sub_target_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, status_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, containers_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, empty_),
  PROTOBUF_FIELD_OFFSET(::common::ArriveStatus, twin_flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::ArriveStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ArriveStatus_default_instance_),
};

const char descriptor_table_protodef_common_2farrive_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032common/arrive_status.proto\022\006common\032\037go"
  "ogle/protobuf/timestamp.proto\032\023common/he"
  "ader.proto\032\022common/enums.proto\032\026common/c"
  "ontainer.proto\"\272\002\n\014ArriveStatus\022\036\n\006heade"
  "r\030\001 \001(\0132\016.common.Header\022+\n\007created\030\002 \001(\013"
  "2\032.google.protobuf.Timestamp\022\020\n\010order_id"
  "\030\003 \001(\t\022\017\n\007task_id\030\004 \001(\t\022\020\n\010crane_id\030\005 \001("
  "\t\022\016\n\006target\030\006 \001(\t\022\022\n\nsub_target\030\007 \001(\t\022)\n"
  "\006status\030\010 \001(\0162\031.common.ArrivedStatusType"
  "\022%\n\ncontainers\030\t \003(\0132\021.common.Container\022"
  "\r\n\005empty\030\n \001(\010\022#\n\ttwin_flag\030\013 \001(\0162\020.comm"
  "on.TwinFlagB\tZ\007/commonb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2farrive_5fstatus_2eproto_deps[4] = {
  &::descriptor_table_common_2fcontainer_2eproto,
  &::descriptor_table_common_2fenums_2eproto,
  &::descriptor_table_common_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2farrive_5fstatus_2eproto_sccs[1] = {
  &scc_info_ArriveStatus_common_2farrive_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2farrive_5fstatus_2eproto_once;
static bool descriptor_table_common_2farrive_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2farrive_5fstatus_2eproto = {
  &descriptor_table_common_2farrive_5fstatus_2eproto_initialized, descriptor_table_protodef_common_2farrive_5fstatus_2eproto, "common/arrive_status.proto", 470,
  &descriptor_table_common_2farrive_5fstatus_2eproto_once, descriptor_table_common_2farrive_5fstatus_2eproto_sccs, descriptor_table_common_2farrive_5fstatus_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_common_2farrive_5fstatus_2eproto::offsets,
  file_level_metadata_common_2farrive_5fstatus_2eproto, 1, file_level_enum_descriptors_common_2farrive_5fstatus_2eproto, file_level_service_descriptors_common_2farrive_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2farrive_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2farrive_5fstatus_2eproto), true);
namespace common {

// ===================================================================

void ArriveStatus::InitAsDefaultInstance() {
  ::common::_ArriveStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::common::_ArriveStatus_default_instance_._instance.get_mutable()->created_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ArriveStatus::_Internal {
 public:
  static const ::common::Header& header(const ArriveStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const ArriveStatus* msg);
};

const ::common::Header&
ArriveStatus::_Internal::header(const ArriveStatus* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ArriveStatus::_Internal::created(const ArriveStatus* msg) {
  return *msg->created_;
}
void ArriveStatus::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ArriveStatus::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void ArriveStatus::clear_containers() {
  containers_.Clear();
}
ArriveStatus::ArriveStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ArriveStatus)
}
ArriveStatus::ArriveStatus(const ArriveStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.order_id().empty()) {
    order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.crane_id().empty()) {
    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_target().empty()) {
    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&twin_flag_) -
    reinterpret_cast<char*>(&status_)) + sizeof(twin_flag_));
  // @@protoc_insertion_point(copy_constructor:common.ArriveStatus)
}

void ArriveStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArriveStatus_common_2farrive_5fstatus_2eproto.base);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twin_flag_) -
      reinterpret_cast<char*>(&header_)) + sizeof(twin_flag_));
}

ArriveStatus::~ArriveStatus() {
  // @@protoc_insertion_point(destructor:common.ArriveStatus)
  SharedDtor();
}

void ArriveStatus::SharedDtor() {
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete created_;
}

void ArriveStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArriveStatus& ArriveStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArriveStatus_common_2farrive_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ArriveStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ArriveStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  order_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twin_flag_) -
      reinterpret_cast<char*>(&status_)) + sizeof(twin_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArriveStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_order_id(), ptr, ctx, "common.ArriveStatus.order_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "common.ArriveStatus.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string crane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crane_id(), ptr, ctx, "common.ArriveStatus.crane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_target(), ptr, ctx, "common.ArriveStatus.target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_target(), ptr, ctx, "common.ArriveStatus.sub_target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ArrivedStatusType status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::common::ArrivedStatusType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .common.Container containers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // bool empty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.TwinFlag twin_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_twin_flag(static_cast<::common::TwinFlag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArriveStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ArriveStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ArriveStatus.order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ArriveStatus.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crane_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crane_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crane_id().data(), static_cast<int>(this->crane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ArriveStatus.crane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ArriveStatus.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_target = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_target()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_target().data(), static_cast<int>(this->sub_target().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "common.ArriveStatus.sub_target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.ArrivedStatusType status = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::common::ArrivedStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.Container containers = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool empty = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.TwinFlag twin_flag = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_twin_flag(static_cast< ::common::TwinFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ArriveStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ArriveStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArriveStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ArriveStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::created(this), output);
  }

  // string order_id = 3;
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.order_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // string task_id = 4;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->task_id(), output);
  }

  // string crane_id = 5;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.crane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->crane_id(), output);
  }

  // string target = 6;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->target(), output);
  }

  // string sub_target = 7;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.sub_target");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sub_target(), output);
  }

  // .common.ArrivedStatusType status = 8;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  // repeated .common.Container containers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->containers(static_cast<int>(i)),
      output);
  }

  // bool empty = 10;
  if (this->empty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->empty(), output);
  }

  // .common.TwinFlag twin_flag = 11;
  if (this->twin_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->twin_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ArriveStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ArriveStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ArriveStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::created(this), target);
  }

  // string order_id = 3;
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.order_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // string task_id = 4;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->task_id(), target);
  }

  // string crane_id = 5;
  if (this->crane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crane_id().data(), static_cast<int>(this->crane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.crane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->crane_id(), target);
  }

  // string target = 6;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->target(), target);
  }

  // string sub_target = 7;
  if (this->sub_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_target().data(), static_cast<int>(this->sub_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ArriveStatus.sub_target");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->sub_target(), target);
  }

  // .common.ArrivedStatusType status = 8;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  // repeated .common.Container containers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->containers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->containers(static_cast<int>(i)), target);
  }

  // bool empty = 10;
  if (this->empty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->empty(), target);
  }

  // .common.TwinFlag twin_flag = 11;
  if (this->twin_flag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->twin_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ArriveStatus)
  return target;
}

size_t ArriveStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ArriveStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.Container containers = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->containers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->containers(static_cast<int>(i)));
    }
  }

  // string order_id = 3;
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  // string task_id = 4;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // string crane_id = 5;
  if (this->crane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crane_id());
  }

  // string target = 6;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->target());
  }

  // string sub_target = 7;
  if (this->sub_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_target());
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .common.ArrivedStatusType status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool empty = 10;
  if (this->empty() != 0) {
    total_size += 1 + 1;
  }

  // .common.TwinFlag twin_flag = 11;
  if (this->twin_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->twin_flag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArriveStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ArriveStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ArriveStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArriveStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ArriveStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ArriveStatus)
    MergeFrom(*source);
  }
}

void ArriveStatus::MergeFrom(const ArriveStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ArriveStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
  if (from.order_id().size() > 0) {

    order_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.crane_id().size() > 0) {

    crane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crane_id_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.sub_target().size() > 0) {

    sub_target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_target_);
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_created()) {
    mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.created());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.empty() != 0) {
    set_empty(from.empty());
  }
  if (from.twin_flag() != 0) {
    set_twin_flag(from.twin_flag());
  }
}

void ArriveStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ArriveStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArriveStatus::CopyFrom(const ArriveStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ArriveStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArriveStatus::IsInitialized() const {
  return true;
}

void ArriveStatus::InternalSwap(ArriveStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&containers_)->InternalSwap(CastToBase(&other->containers_));
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crane_id_.Swap(&other->crane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_target_.Swap(&other->sub_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(created_, other->created_);
  swap(status_, other->status_);
  swap(empty_, other->empty_);
  swap(twin_flag_, other->twin_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArriveStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ArriveStatus* Arena::CreateMaybeMessage< ::common::ArriveStatus >(Arena* arena) {
  return Arena::CreateInternal< ::common::ArriveStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
